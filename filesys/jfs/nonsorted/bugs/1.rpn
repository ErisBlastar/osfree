;
; Dynamic tracing for deadlock bug in JFS.
;
major=333
name=JFS.IFS
vars=1

;
; I expect this bug to somewhat end up in _iput@8,
; so let's add a check there for INODE with an owned mutex.
;
minor=1
opcode=0x83
object=0x1
offset=0xae2b
;
; Abort logging if not owned.
;
Push    EAX                             ; Inode pointer.
Push    D,0x78                          ; offsetof(INODE, i_rdwrlock)
Add
Push    WIF                             ; Push owner slot number.
Jmp     ZN, UnOwned                     ; Jumps is 0, ie. unowned


;
; Log it!
;
Push    EAX                             ; Inode pointer
Log     DN, 1                           ; Log 1 dword - the inode pointer.

Push    ESP                             ; Stack pointer - 32bit!
Push    W,8
Add                                     ; Add 4 to ESP.
Push    FIF                             ; Get the return pointer.
Log     DN,1                            ; Log 1 dword - the return pointer

Push    V,0
Log     DN, 1                           ; Log return address of jfs_rele

Push    D,8                             ; Size of logging data.
Push    EAX                             ; Inode pointer
Push    D,0x78                          ; offsetof(INODE, i_rdwrlock)
Add
Log     MRF                             ; Log 8 bytes - the mutex structure.

EndLogging:
Exit                                    ; Completed - logging.

UnOwned:
Abort                                   ; Completed - no logging.


;
; Get caller of _jfs_rele@4
;
minor=2
opcode=0x83
object=0x1
offset=0x200a0
;
; Put return address in local variable.
;
Push    ESP                             ; Stack pointer - 32bit!
Push    FIF                             ; Get the return pointer.
Move    v,0                             ; Move return pointer to var0

Abort                                   ; Completed - no logging.



;
; Trace the hang location in _iAlloc@20
;    WRITE_LOCK(&ip->i_rdwrlock);
;
minor=3
opcode=0xe8                             ; call
object=0x1
offset=0x9e3a
;
; lock pointer in ebx. check if owner != 0.
;
Push    EBX
Push    WIF                             ; Push owner slot number.
Jmp     ZN, UnOwned                     ; Jumps is 0, ie. unowned

;
; Log it!
;
Push    EBX                             ; Lock pointer
Push    D,0x78
Sub
Log     DN, 1                           ; Log 1 dword - the inode pointer.

;Push    ESP                             ; Stack pointer - 32bit!
;Push    W,8
;Add                                     ; Add 4 to ESP.
;Push    FIF                             ; Get the return pointer.
;Log     DN,1                            ; Log 1 dword - the return pointer

Push    D,8                             ; Size of logging data.
Push    EBX                             ; Lock pointer
Log     MRF                             ; Log 8 bytes - the mutex structure.

EndLogging:
Exit                                    ; Completed - logging.

UnOwned:
Abort                                   ; Completed - no logging.

