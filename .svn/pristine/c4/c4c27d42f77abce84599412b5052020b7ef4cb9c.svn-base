diff --git a/dlls/winedos/dosvm.c b/dlls/winedos/dosvm.c
index 2d1b915..92ce852 100644
--- a/dlls/winedos/dosvm.c
+++ b/dlls/winedos/dosvm.c
@@ -460,23 +460,65 @@ void WINAPI DOSVM_Wait( CONTEXT86 *waitc
     }
 }
 
+static WINAPI void send_key(ULONG_PTR arg)
+{
+  DWORD scan = OemKeyScan(arg);
+  scan &= 0x7f;
+  /* simulate a keypress and release */
+  TRACE("Simulating char=%ld[%c], scan=%d\n", arg, scan);
+  DOSVM_Int09SendScan(scan, arg);
+  DOSVM_Int09SendScan(0x80 | scan, arg);  
+}
+
+static WINAPI DWORD DOSVM_PumpInputThread(LPVOID param)
+{
+  HANDLE input = GetStdHandle(STD_INPUT_HANDLE);
+  CHAR ch;
+
+  while (TRUE)
+  {
+    INT read = ReadFile(input, &ch, 1, NULL, NULL);
+    if (read == 0)
+      break;
+
+    if (ch == 10)
+	ch = 13;
+
+    TRACE("Sending char '%c'\n", ch);
+    MZ_RunInThread(send_key, ch);
+  }
+  return 0;
+}
 
 DWORD WINAPI DOSVM_Loop( HANDLE hThread )
 {
   HANDLE objs[2];
   MSG msg;
-  DWORD waitret;
+  DWORD waitret, tmp, count;
+  BOOL console;
+  
+  objs[0] = hThread;
+  if (GetConsoleMode(GetStdHandle(STD_INPUT_HANDLE), &tmp))
+  {
+    TRACE("Running in a console\n");
+    console = TRUE;
+    objs[1] = GetStdHandle(STD_INPUT_HANDLE);
+    count = 2;
+  }
+  else
+  {
+    DWORD tid;
+    TRACE("Std input from a pipe\n");
+    console = FALSE;
+    count = 1;
 
-  objs[0] = GetStdHandle(STD_INPUT_HANDLE);
-  objs[1] = hThread;
+    CreateThread(NULL, 0, DOSVM_PumpInputThread, NULL, 0, &tid);
+  }
 
   for(;;) {
       TRACE_(int)("waiting for action\n");
-      waitret = MsgWaitForMultipleObjects(2, objs, FALSE, INFINITE, QS_ALLINPUT);
+      waitret = MsgWaitForMultipleObjects(count, objs, FALSE, INFINITE, QS_ALLINPUT);
       if (waitret == WAIT_OBJECT_0) {
-          DOSVM_ProcessConsole();
-      }
-      else if (waitret == WAIT_OBJECT_0 + 1) {
          DWORD rv;
          if(!GetExitCodeThread(hThread, &rv)) {
              ERR("Failed to get thread exit code!\n");
@@ -484,7 +526,10 @@ DWORD WINAPI DOSVM_Loop( HANDLE hThread 
          }
          return rv;
       }
-      else if (waitret == WAIT_OBJECT_0 + 2) {
+      else if (count == 2 && waitret == WAIT_OBJECT_0 + 1) {
+          DOSVM_ProcessConsole();
+      }
+      else if (waitret == WAIT_OBJECT_0 + count) {
           while (PeekMessageA(&msg,0,0,0,PM_REMOVE)) {
               if (msg.hwnd) {
                   /* it's a window message */
diff --git a/dlls/winedos/vga.c b/dlls/winedos/vga.c
index dcf68dd..16f6a57 100644
--- a/dlls/winedos/vga.c
+++ b/dlls/winedos/vga.c
@@ -884,7 +884,7 @@ void VGA_PutChar(BYTE ascii)
     /*
      * If we don't have a console, write directly to standard output.
      */
-    if(!vga_text_console)
+//    if(!vga_text_console)
         WriteFile(VGA_AlphaConsole(), &ascii, 1, &w, NULL);
 
     LeaveCriticalSection(&vga_lock);
