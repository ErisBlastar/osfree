group mmioos2;

(***************************************************************************\
*
* Module Name: MMIOOS2
*
* OS/2 2.0 Multimedia Extensions Input/Output Manager Definitions file
*  NOTE:  All structures are PACKED(4)
*
\****************************************************************************)

(* #pragma pack(4) *)

(* MMIO symbols. *)

type HMMIO=ULONG;

type HMMCF=HMMIO;
type FOURCC=ULONG;
type PFOURCC=^FOURCC;

(* MS compat defines. *)

type HPSTR=PSZ;

(* Define MMIO public data structures. *)

type MMCKINFO=structure    (* mmckinfo                             *)
      ckid: FOURCC;             (* Chunk id (FOURCC)                    *)
      ckSize: ULONG;           (* Chunk Size (bytes)                   *)
      fccType: FOURCC;          (* FourCC Type (if ckid RIFF or LIST)   *)
      ulDataOffset: ULONG;     (* File Offset of data portion of chunk *)
      ulFlags: ULONG;          (* MMIO_DIRTY (if new chunk)            *)
  end;

type PMMCKINFO=^MMCKINFO;

type MMIOPROC=function                    (*  Format must       *)
                                ( in pmmioinfo: PVOID;  (*  appear this       *)
                                  in usMsg: USHORT;     (*  way for h2inc     *)
                                  in lParam1: LONG;     (*  to work properly. *)
                                  in lParam2: LONG ): LONG;

type PMMIOPROC=^MMIOPROC;
type PPMMIOPROC=^PMMIOPROC;

type MMIOINFO=structure       (* mmioinfo                    *)
          ulFlags: ULONG;          (* Open flags                  *)
          fccIOProc: FOURCC;        (* FOURCC of the IOProc to use *)
          pIOProc: PMMIOPROC;          (* Function Pointer to IOProc to use *)
          ulErrorRet: ULONG;       (* Extended Error return code  *)
          cchBuffer: LONG;        (* I/O buff size (if used), Fsize if MEM *)
          pchBuffer: PCHAR;        (* Start of I/O buff           *)
          pchNext: PCHAR;          (* Next char to read or write in buff *)
          pchEndRead: PCHAR;       (* Last char in buff can be read + 1  *)
          pchEndWrite: PCHAR;      (* Last char in buff can be written + 1 *)
          lBufOffset: LONG;       (* Offset in buff to pchNext *)
          lDiskOffset: LONG;      (* Disk offset in file       *)
          aulInfo: array[4] of ULONG;       (* IOProc specific fields    *)
          lLogicalFilePos: LONG;  (* Actual file position, buffered or not *)
          ulTranslate: ULONG;      (* Translation field         *)
          fccChildIOProc: FOURCC;   (* FOURCC of Child IOProc    *)
          pExtraInfoStruct: PVOID; (* Pointer to a structure of related data *)
          hmmio: HMMIO;            (* Handle to media element   *)
    end;

type PMMIOINFO=^MMIOINFO;

type MMCFINFO=structure          (* mmcfinfo                  *)
       ulHeaderSize: ULONG;        (* CTOC header size          *)
       ulEntriesTotal: ULONG;      (* Num of CTOC table entries *)
       ulEntriesDeleted: ULONG;    (* Num of CTOC table entries deleted *)
       ulEntriesUnused: ULONG;     (* Num of unused CTOC entries *)
       ulBytesTotal: ULONG;        (* Combined byte size of all CGRP elements *)
       ulBytesDeleted: ULONG;      (* Byte size of all deleted CGRP elements *)
       ulHeaderFlags: ULONG;       (* Info about entire compound file (CF)  *)
       usEntrySize: USHORT;         (* Size of each CTOC table entry *)
       usNameSize: USHORT;          (* Size of name field in entry, default 13 *)
       usExHdrFields: USHORT;       (* Num CTOC header extra fields *)
       usExEntFields: USHORT;       (* Num CTOC entry extra fields  *)
end;

(*
 * Note:  The are variable length ULONG arrays that may be present
 *        at the end of the MMCFINFO structure.
 *)

(*   ULONG    (*aulExHdrFldUsage)[];  * Array of header extra usage fields *)
(*   ULONG    (*aulExtEntFldUsage)[]; * Array of entry extra usage fields  *)
(*   ULONG    (*aulExHdrField)[];     * Array of header extra fields       *)

type PMMCFINFO=^MMCFINFO;

type MMCTOCENTRY=structure    (* mmctocentry                   *)
       ulOffset: ULONG;            (* Offset of element within CGRP *)
       ulSize: ULONG;              (* Size of element               *)
       ulMedType: ULONG;           (* Fourcc of element             *)
       ulMedUsage: ULONG;          (* Possible sub type             *)
       ulCompressTech: ULONG;      (* Compression technique used    *)
       ulUncompressBytes: ULONG;   (* Actual size of uncompressed element *)
end;

(*
 * Note:  A variable length name field and possibly a ULONG array may
 *        be present at the end of the MMCTOCENTRY structure.
 *)

(*   ULONG    (*aulExEntField)[];  * Array of entry extra fields *)
(*   PSZ      pszElementName[];    * Name of element, variable length *)

type PMMCTOCENTRY=^MMCTOCENTRY;

(*
 * Conversion Flags/Data Structures:
 *)

constant MMIO_MEDIATYPE_IMAGE       = $00000001;  (* Image media *)
constant MMIO_MEDIATYPE_AUDIO       = $00000002;  (* Audio media *)
constant MMIO_MEDIATYPE_MIDI        = $00000004;  (* MIDI media  *)
constant MMIO_MEDIATYPE_COMPOUND    = $00000008;  (* Cmpd media  *)
constant MMIO_MEDIATYPE_OTHER       = $00000010;  (* Other media *)
constant MMIO_MEDIATYPE_UNKNOWN     = $00000020;  (* Unknown media *)
constant MMIO_MEDIATYPE_DIGITALVIDEO= $00000040;  (* Digital Video *)
constant MMIO_MEDIATYPE_ANIMATION   = $00000080;  (* Future: Not Supported *)
constant MMIO_MEDIATYPE_MOVIE       = $00000100;  (* Movie File *)

constant MMIO_CANREADTRANSLATED             = $00000001; (*IOProc Cpbilty Flgs*)
constant MMIO_CANWRITETRANSLATED            = $00000002; (* "       "       " *)
constant MMIO_CANREADWRITETRANSLATED        = $00000004; (* "       "       " *)
constant MMIO_CANREADUNTRANSLATED           = $00000008; (* "       "       " *)
constant MMIO_CANWRITEUNTRANSLATED          = $00000010; (* "       "       " *)
constant MMIO_CANREADWRITEUNTRANSLATED      = $00000020; (* "       "       " *)
constant MMIO_CANSEEKTRANSLATED             = $00000040; (* "       "       " *)
constant MMIO_CANSEEKUNTRANSLATED           = $00000080; (* "       "       " *)
constant MMIO_CANINSERTUNTRANSLATED         = $00000100; (* "       "       " *)
constant MMIO_CANSAVEUNTRANSLATED           = $00000200; (* "       "       " *)
constant MMIO_CANINSERTTRANSLATED           = $00000400; (* "       "       " *)
constant MMIO_CANSAVETRANSLATED             = $00000800; (* "       "       " *)
constant MMIO_CANMULTITRACKREADTRANSLATED   = $00001000; (* "       "       " *)
constant MMIO_CANMULTITRACKREADUNTRANSLATED = $00002000; (* "       "       " *)
constant MMIO_CANMULTITRACKWRITETRANSLATED  = $00004000; (* "       "       " *)
constant MMIO_CANMULTITRACKWRITEUNTRANSLATED= $00008000; (* "       "       " *)
constant MMIO_CANTRACKSEEKTRANSLATED        = $00010000; (* "       "       " *)
constant MMIO_CANTRACKSEEKUNTRANSLATED      = $00020000; (* "       "       " *)
constant MMIO_CANTRACKREADTRANSLATED        = $00040000; (* "       "       " *)
constant MMIO_CANTRACKREADUNTRANSLATED      = $00080000; (* "       "       " *)
constant MMIO_CANTRACKWRITETRANSLATED       = $00100000; (* "       "       " *)
constant MMIO_CANTRACKWRITEUNTRANSLATED     = $00200000; (* "       "       " *)

constant MMIO_IOPROC_STORAGESYSTEM    = $00000001;  (* IOProc Types *)
constant MMIO_IOPROC_FILEFORMAT       = $00000002;
constant MMIO_IOPROC_DATAFORMAT       = $00000004;

type MMFORMATINFO=structure          (* mmformatinfo             *)
       ulStructLen: ULONG;               (* Length of this structure *)
       fccIOProc: FOURCC;                 (* IOProc identifier        *)
       ulIOProcType: ULONG;              (* Type of IOProc           *)
       ulMediaType: ULONG;               (* Media Type               *)
       ulFlags: ULONG;                   (* IOProc capability flags  *)
       szDefaultFormatExt: array[sizeof(FOURCC)  + 1] of CHAR;
                                       (* Default extension 4 + null *)
       ulCodePage: ULONG;                (* Code Page                  *)
       ulLanguage: ULONG;                (* Language                   *)
       lNameLength: LONG;               (* length of identifier string *)
   end;

type PMMFORMATINFO=^MMFORMATINFO;

constant MMIO_IMAGE_UNKNOWN         = $00000000;  (* Unknown image content *)
constant MMIO_IMAGE_DRAWING         = $00000001;  (* Simple drawing        *)
constant MMIO_IMAGE_GRAPH           = $00000002;  (* Graphs & Cartoons     *)
constant MMIO_IMAGE_PHOTO           = $00000004;  (* Varying Color & Shades *)

constant MAX_PALETTE = 256;

type XDIBHDR_PREFIX=structure             (* XDIB Header Prefix *)
    ulMemSize: ULONG;                          (* Length of bitmap   *)
    ulPelFormat: ULONG;
    usTransType: USHORT;
    ulTransVal: ULONG;
end;

type MMXDIBHEADER=structure               (* XDIB Header *)
       XDIBHeaderPrefix: XDIBHDR_PREFIX;
       BMPInfoHeader2: BITMAPINFOHEADER2;
   end;

type PMMXDIBHEADER=^MMXDIBHEADER;

type MMIMAGEHEADER=structure              (* mmimageheader   *)
                ulHeaderLength: ULONG;         (* Length in Bytes *)
                ulContentType: ULONG;          (* Image content   *)
                ulMediaType: ULONG;            (* Media Type      *)
                mmXDIBHeader: MMXDIBHEADER;           (* OS/2 2.0 PM compat header *)
                bmiColors: array[MAX_PALETTE] of RGB2; (* PM compatible palette *)
   end;

type PMMIMAGEHEADER=^MMIMAGEHEADER;


constant MMIO_AUDIO_UNKNOWN         = $00000000;  (* Unknown image content  *)
constant MMIO_AUDIO_VOICE           = $00000001;  (* Limited Range          *)
constant MMIO_AUDIO_MUSIC           = $00000002;  (* FM Radio or equivalent *)
constant MMIO_AUDIO_HIFI            = $00000004;  (* High quality recording *)

type WAVE_HEADER=structure                (* waveheader          *)
             usFormatTag: USHORT;              (* Type of wave format *)
             usChannels: USHORT;               (* Number of channels  *)
             ulSamplesPerSec: ULONG;          (* Sampling rate       *)
             ulAvgBytesPerSec: ULONG;         (* Avg bytes per sec   *)
             usBlockAlign: USHORT;             (* Block Alignment in bytes *)
             usBitsPerSample: USHORT;          (* Bits per sample     *)
   end;

type XWAV_HEADERINFO=structure            (* xwaveheader info        *)
              ulAudioLengthInMS: ULONG;        (* Audio data in millisecs *)
              ulAudioLengthInBytes: ULONG;     (* Audio data in bytes     *)
              pAdditionalInformation: PVOID;
   end;

type MMXWAV_HEADER=structure              (* mmxwaveheader            *)
        WAVEHeader: WAVE_HEADER;               (* Per RIFF WAVE Definition *)
        XWAVHeaderInfo: XWAV_HEADERINFO;           (* Extended wave definition *)
   end;

type MMAUDIOHEADER=structure              (* mmaudioheader   *)
              ulHeaderLength: ULONG;           (* Length in Bytes *)
              ulContentType: ULONG;            (* Image content   *)
              ulMediaType: ULONG;              (* Media Type      *)
              mmXWAVHeader: MMXWAV_HEADER;             (* header          *)
   end;

type PMMAUDIOHEADER=^MMAUDIOHEADER;

constant MMIO_MIDI_UNKNOWN         = $00000000;  (* Unknown midi content   *)
constant MMIO_MIDI_VOICE           = $00000001;  (* Limited Range          *)
constant MMIO_MIDI_MUSIC           = $00000002;  (* FM Radio or equivalent *)
constant MMIO_MIDI_HIFI            = $00000004;  (* High quality recording *)

(* MMPMMMIO.INI file structure and definitions. *)

constant DLLNAME_SIZE    = CCHMAXPATH;
constant PROCNAME_SIZE   = 32;
constant MAX_EXTENSION_NAME = 4;

type MMINIFILEINFO=structure               (* mminifileinfo          *)
         fccIOProc: FOURCC;                     (* IOProc identifier      *)
         szDLLName: array[DLLNAME_SIZE] of CHAR;       (* DLL name string        *)
         szProcName: array[PROCNAME_SIZE] of CHAR;     (* Procedure name string  *)
         ulFlags: ULONG;                       (* Capability Flags       *)
         ulExtendLen: ULONG;                   (* Length of ext fields   *)
         ulMediaType: ULONG;                   (* Media type             *)
         ulIOProcType: ULONG;                  (* Type of IOProc         *)
         szDefExt:array[sizeof(MAX_EXTENSION_NAME)] of CHAR;
                                              (* Default file extension *)
   end;

type PMMINIFILEINFO=^MMINIFILEINFO;

(* CODEC Structures and type definitions for Rel. 1.1 *)


constant CODEC_INFO_SIZE   = 8;
constant CODEC_HW_NAME_SIZE = 32;


type PMMIOPROC=^CODECPROC;

type CODECINIFILEINFO=structure           (* codecinifileinfo            *)
   ULONG       ulStructLen;                  (* length of this structure    *)
   FOURCC      fcc;                          (* File Format ID              *)
   CHAR        szDLLName[DLLNAME_SIZE];      (* DLL name string             *)
   CHAR        szProcName[PROCNAME_SIZE];    (* Procedure name string       *)
   ULONG       ulCompressType;               (* Compression Type            *)
   ULONG       ulCompressSubType;            (* Compression SubType         *)
   ULONG       ulMediaType;                  (* Media type                  *)
   ULONG       ulCapsFlags;                  (* capabilities flags          *)
   ULONG       ulFlags;                      (* flags                       *)
   CHAR        szHWID[CODEC_HW_NAME_SIZE];   (* specific information        *)
   ULONG       ulMaxSrcBufLen;               (* max source buffer length    *)
   ULONG       ulSyncMethod;                 (* Synchronization method      *)
   ULONG       fccPreferredFormat;           (* Preferred output format     *)
   ULONG       ulXalignment;                 (* x alignment - video only    *)
   ULONG       ulYalignment;                 (* y alignment - video only    *)
   ULONG       ulSpecInfo[CODEC_INFO_SIZE];  (* specific information        *)
end;

type PCODECINIFILEINFO=^CODECINIFILEINFO;

(* CODECINIFILEINFO synchronization method (ulSyncMethod) values. *)

constant CODEC_SYNC_METHOD_NO_DROP_FRAMES                =  0;
constant CODEC_SYNC_METHOD_DROP_FRAMES_IMMEDIATELY       =  1;
constant CODEC_SYNC_METHOD_DROP_FRAMES_PRECEDING_KEY     =  2;
constant CODEC_SYNC_METHOD_HARDWARE                      =  3;



(* CODECINIFILEINFO capabilities (ulCapsFlags) values. *)

constant CODEC_COMPRESS           = $00000001;
constant CODEC_DECOMPRESS         = $00000002;
constant CODEC_WINDOW_CLIPPING    = $00000004;
constant CODEC_PALETTE_TRANS      = $00000008;
constant CODEC_SELFHEAL           = $00000010;
constant CODEC_SCALE_PEL_DOUBLE   = $00000020;
constant CODEC_SCALE_PEL_HALVED   = $00000040;
constant CODEC_SCALE_CONTINUOUS   = $00000080;
constant CODEC_MULAPERTURE        = $00000100;
constant CODEC_4_BIT_COLOR        = $00000200;
constant CODEC_8_BIT_COLOR        = $00000400;
constant CODEC_16_BIT_COLOR       = $00000800;
constant CODEC_24_BIT_COLOR       = $00001000;
constant CODEC_HARDWARE           = $00002000;
constant CODEC_SYMMETRIC          = $00004000;
constant CODEC_ASYMMETRIC         = $00008000;
constant CODEC_DIRECT_DISPLAY     = $00010000;
constant CODEC_DEFAULT            = $00020000;
constant CODEC_ORIGIN_LOWERLEFT   = $00040000;
constant CODEC_ORIGIN_UPPERLEFT   = $00080000;
constant CODEC_SET_QUALITY        = $00100000;  (* quality level is settable *)
constant CODEC_DATA_CONSTRAINT    = $00200000;  (* data constraint supported *)
constant CODEC_HW_OVERLAY         = $00400000;
constant CODEC_MULTI_BUFFER       = $00800000;
constant CODEC_DITHER_OUTPUT      = $01000000;


(* Audio related flags *)
constant CODEC_COMP_REALTIME      = $00020000;
constant CODEC_DECOMP_REALTIME    = $00040000;


(* CODECINIFILEINFO Flag Values (ulFlags) values. *)


(* Bit definitions for mmioSet() *)
constant         MMIO_SET_EXTENDEDINFO               =    $0001;
constant         MMIO_QUERY_EXTENDEDINFO_BASE        =    $0002;
constant         MMIO_QUERY_EXTENDEDINFO_ALL         =    $0004;


(* CODECASSOC structure *)
type  CODECASSOC=structure             (* codec information *)
     pCodecOpen: PVOID;                    (* codec specific open header *)
     pCODECIniFileInfo: PCODECINIFILEINFO;  (* codecinifileinfo           *)
end;

(* PCODECASSOC definition *)
type PCODECASSOC=^CODECASSOC;


(* MMEXTENDINFO structure *)
type MMEXTENDINFO=structure            (* extended file information *)
           ulStructLen: ULONG;              (* length of this structure  *)
           ulBufSize: ULONG;                (* total buffer size *)
           ulFlags: ULONG;                  (* flags *)
           ulTrackID: ULONG;                (* track ID *)
           ulNumCODECs: ULONG;              (* number of codec entries *)
           pCODECAssoc: PCODECASSOC;              (* pointer to codec info array *)
   end;

(* PMMEXTENDINFO definition *)
type PMMEXTENDINFO=^MMEXTENDINFO;

(* MMEXTENDINFO operation (ulFlags) values. *)
constant MMIO_TRACK               = $00000001;
constant MMIO_NORMAL_READ         = $00000002;
constant MMIO_SCAN_READ           = $00000004;
constant MMIO_REVERSE_READ        = $00000008;
constant MMIO_CODEC_ASSOC         = $00000100;

(* Audio Related defines *)

constant MMIO_REALTIME_CODEC      = $00000200;

constant MMIO_RESETTRACKS         = -1;       (*  Turns off the active track number. *)

constant CODEC_START             = $0EC0;
constant CODEC_END               = $0EFF;

constant MMIOM_CODEC_CLOSE           =  CODEC_START + 1;
constant MMIOM_CODEC_OPEN            =  CODEC_START + 2;
constant MMIOM_CODEC_QUERYNAME       =  CODEC_START + 3;
constant MMIOM_CODEC_QUERYNAMELENGTH =  CODEC_START + 4;
constant MMIOM_CODEC_COMPRESS        =  CODEC_START + 5;
constant MMIOM_CODEC_DECOMPRESS      =  CODEC_START + 6;
constant MMIOM_CODEC_HW_CONTROL      =  CODEC_START + 7;

constant MMIOMP_CODEC_HW_CONTROL_STOP_DISCARD  = 0;
constant MMIOMP_CODEC_HW_CONTROL_STOP_FLUSH    = 1;
constant MMIOMP_CODEC_HW_CONTROL_STOP_PAUSE    = 2;
constant MMIOMP_CODEC_HW_CONTROL_DATATYPE      = 3;

(* End CODEC include *)

(* Flags: *)

constant MMIO_CREATE    = $00000001;       (* Open *)
constant MMIO_CTOCFIRST = $00000002;       (* Open *)
constant MMIO_READ      = $00000004;       (* Open *)
constant MMIO_WRITE     = $00000008;       (* Open *)
constant MMIO_READWRITE = $00000010;       (* Open *)
constant MMIO_COMPAT    = $00000020;       (* Open *)
constant MMIO_EXCLUSIVE = $00000040;       (* Open *)
constant MMIO_DENYWRITE = $00000080;       (* Open *)
constant MMIO_DENYREAD  = $00000100;       (* Open *)
constant MMIO_DENYNONE  = $00000200;       (* Open *)
constant MMIO_ALLOCBUF  = $00000400;       (* Open *)
constant MMIO_DELETE    = $00000800;       (* Open *)

constant MMIO_USE_TEMP =  $00001000;       (* Open/Close/Save *)

constant MMIO_INSERTON =  $00000001;       (* Insert *)
constant MMIO_INSERTOFF=  $00000002;       (* Insert *)

constant MMIO_RWMODE   =  $00001000;       (* Open *)
constant MMIO_SHAREMODE=  $00002000;       (* Open *)

constant MMIO_DIRTY     = $00004000;       (* Write *)

constant MMIO_VERTBAR   =  $00008000;       (* Open *)
constant MMIO_BUFSHARED =  $00010000;       (* Open *)
constant MMIO_APPEND    =  $00020000;       (* Open *)
constant MMIO_NOIDENTIFY=  $00040000;       (* Open *)


constant MMIO_FINDFIRST  = $00000001;       (* CF Find Entry *)
constant MMIO_FINDNEXT   = $00000002;       (* CF Find Entry *)
constant MMIO_FINDUNUSED = $00000004;       (* CF Find Entry *)
constant MMIO_FINDDELETED= $00000008;       (* CF Find Entry *)

constant MMIO_CHANGEDELETED= $0001;         (* CF Change Entry *)

constant MMIO_CF_FQNAME  =   $0001;         (* CF Compact      *)

constant MMIO_FHOPEN    =  $0001;           (* Close *)

constant MMIO_EMPTYBUF  =  $0001;           (* Flush *)

constant MMIO_CREATERIFF=  $0001;           (* CreateChunk *)
constant MMIO_CREATELIST=  $0002;           (* CreateChunk *)
constant MMIO_FINDCHUNK =  $0004;           (* Descend     *)
constant MMIO_FINDRIFF  =  $0008;           (* Descend     *)
constant MMIO_FINDLIST  =  $0010;           (* Descend     *)

constant CTOC_HF_SEQUENTIAL= $00000001;    (* CTOC ulHeaderFlags *)
constant CTOC_HF_MEDSUBTYPE= $00000002;    (* CTOC ulHeaderFlags *)

constant CTOC_EFU_UNUSED         = $00000000; (* CTOC extra usage code *)
constant CTOC_EFU_LASTMODTIME    = $00000001; (* CTOC extra usage code *)
constant CTOC_EFU_CODEPAGE       = $00000002; (* CTOC extra usage code *)
constant CTOC_EFU_LANGUAGE       = $00000003; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM0 = $00000005; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM1 = $00000006; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM2 = $00000007; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM3 = $00000008; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM4 = $00000009; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM5 = $0000000A; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM6 = $0000000B; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM7 = $0000000C; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM8 = $0000000D; (* CTOC extra usage code *)
constant CTOC_EFU_COMPRESSPARAM9 = $0000000E; (* CTOC extra usage code *)
constant CTOC_CHARSET_STANDARD   = $00000000; (* CTOC charset value    *)

constant MMIO_INSTALLPROC         =$00000001; (* Install IO Proc *)
constant MMIO_REMOVEPROC          =$00000002; (* Install IO Proc *)
constant MMIO_FINDPROC            =$00000004; (* Install IO Proc *)

constant MMIO_MATCHFIRST          =$00000010; (* Ini File Handler *)
constant MMIO_MATCHNEXT           =$00000020; (* Ini File Handler *)
constant MMIO_MATCHFOURCC         =$00000040; (* Ini File Handler *)
constant MMIO_MATCHDLL            =$00000080; (* Ini File Handler *)
constant MMIO_MATCHPROCEDURENAME  =$00000100; (* Ini File Handler *)
constant MMIO_FULLPATH            =$00000200; (* Ini File Handler *)
constant MMIO_NOVERIFY            =$00000400; (* Ini File Handler *)
constant MMIO_MATCHCOMPRESSTYPE   =$00000800; (* Ini File Handler *)
constant MMIO_EXTENDED_STRUCT     =$00001000; (* Ini File ulFlags *)
constant MMIO_MATCHCOMPRESSSUBTYPE= $00002000; (* Ini File Handler *)
constant MMIO_MATCHHWID           =$00004000; (* Ini File Handler *)
constant MMIO_MATCHCAPSFLAGS      =$00008000; (* Ini File Handler *)
constant MMIO_SKIPMATCH           =$00010000; (* Ini/Load Handler *)

constant MMIO_TOUPPER             =$0001;      (* StringToFourcc *)

constant MMIO_CF_ENTRY_EXISTS     =$00000001; (* Add CGRP element *)

constant MMIO_FORCE_IDENTIFY_SS   =$00000001; (* Identify *)
constant MMIO_FORCE_IDENTIFY_FF   =$00000002; (* Identify *)

constant MMIO_NOTRANSLATE         =$00000000; (* Translation *)
constant MMIO_TRANSLATEDATA       =$00000001; (* Translation *)
constant MMIO_TRANSLATEHEADER     =$00000002; (* Translation *)
constant MMIO_DECOMPRESS          =$00000004; (* CODEC Decompress *)

constant MMIO_DEFAULTBUFFER = 8192;    (* two pages under OS/2 2.0 *)

constant MMIO_SEEK_IFRAME     =    $00010000;  (* Seek to nearest previous IFRAME *)



(* Messages : *)

constant MMIOM_START             = $0E00;
constant MMIOM_END               = $0EFF;

constant MMIOM_GETCF            =  MMIOM_START + 1;
constant MMIOM_GETCFENTRY       =  MMIOM_START + 2;

constant MMIOM_CLOSE            =  MMIOM_START + 3;
constant MMIOM_OPEN             =  MMIOM_START + 4;
constant MMIOM_READ             =  MMIOM_START + 5;
constant MMIOM_SEEK             =  MMIOM_START + 6;
constant MMIOM_WRITE            =  MMIOM_START + 7;

constant MMIOM_IDENTIFYFILE      = MMIOM_START + 8;
constant MMIOM_GETHEADER         = MMIOM_START + 9;
constant MMIOM_SETHEADER         = MMIOM_START + 10;
constant MMIOM_QUERYHEADERLENGTH = MMIOM_START + 11;
constant MMIOM_GETFORMATNAME     = MMIOM_START + 12;
constant MMIOM_GETFORMATINFO     = MMIOM_START + 13;
constant MMIOM_SEEKBYTIME        = MMIOM_START + 14;
constant MMIOM_TEMPCHANGE        = MMIOM_START + 15;
constant MMIOM_BEGININSERT       = MMIOM_START + 16;
constant MMIOM_ENDINSERT         = MMIOM_START + 17;
constant MMIOM_SAVE              = MMIOM_START + 18;
constant MMIOM_SET               = MMIOM_START + 19;
constant MMIOM_COMPRESS          = MMIOM_START + 20;
constant MMIOM_DECOMPRESS        = MMIOM_START + 21;
constant MMIOM_MULTITRACKREAD    = MMIOM_START + 22;
constant MMIOM_MULTITRACKWRITE   = MMIOM_START + 23;
constant MMIOM_DELETE            = MMIOM_START + 24;
constant MMIOM_BEGINGROUP        = MMIOM_START + 25;
constant MMIOM_ENDGROUP          = MMIOM_START + 26;
constant MMIOM_UNDO              = MMIOM_START + 27;
constant MMIOM_REDO              = MMIOM_START + 28;
constant MMIOM_BEGINSTREAM       = MMIOM_START + 29;
constant MMIOM_ENDSTREAM         = MMIOM_START + 30;


constant MMIOM_CUT              =  MMIOM_START + 31;
constant MMIOM_COPY             =  MMIOM_START + 32;
constant MMIOM_PASTE            =  MMIOM_START + 33;
constant MMIOM_CLEAR            =  MMIOM_START + 34;
constant MMIOM_STATUS           =  MMIOM_START + 35;
constant MMIOM_WINMSG           =  MMIOM_START + 36;
constant MMIOM_BEGINRECORD      =  MMIOM_START + 37;
constant MMIOM_ENDRECORD        =  MMIOM_START + 38;


(* These 3 new messages were added with feature 11710 *)

constant MMIOM_QUERYIMAGE        = MMIOM_START + 39;
constant MMIOM_QUERYIMAGECOUNT   = MMIOM_START + 40;
constant MMIOM_SETIMAGE          = MMIOM_START + 41;


constant MMIO_REALTIME           =  $00000001;
constant MMIO_NONREALTIME        =  $00000002;

constant MMIOM_USER              =  $0F00;
constant MMIOM_USER_END          =  $0FFF;


(* Parameter structure for MMIOM_STATUS *)

type MMIO_STATUS_PARMS=structure       (* this comment needed by h2inc *)
        hwndWindow: HWND;                   (* Some items require a window handle *)
        ulReturn: ULONG;                     (* Return field *)
        ulItem: ULONG;                       (* Use MCI_STATUS_... flags here *)
        ulValue: ULONG;                      (* Status value field *)
        ulType: ULONG;                       (* MCI_FORMAT_... of ulReturn *)
end;
type PMMIO_STATUS_PARMS=^MMIO_STATUS_PARMS;

(* Parameter structure for MMIOM_COPY, MMIOM_CUT, MMIOM_CLEAR and MMIOM_PASTE *)

type USEC=LONG;                        (* microsecond time format *)

type MMIO_MEDIT_PARMS=structure        (* this comment needed by h2inc *)
       ulStrucLen: ULONG;                   (* length of this structure *)
       hwndWindow: HWND;                   (* window handle *)
       ulStartTime: USEC;                  (* starting time in usec *)
       ulDuration: USEC;                   (* duration in usec *)
       ulCurrentFilePosition: ULONG;        (* current file position in usec *)
       ulNewFilePosition: ULONG;            (* returned by IO proc in usec, MCD will issue a seek *)
       ulNewFileLength: ULONG;              (* return by IO proc in usec, MCD updates its headers *)
       pBuffer: PVOID;                      (* optional buffer *)
       ulBufferLength: ULONG;               (* optional buffer's length *)
       pHeader: PVOID;                      (* optional pointer to header for buffer *)
       fUseBuffer: BOOL;                   (* flag to use Buffer instead of clipboard *)
end;
type PMMIO_EDIT_PARMS=^MMIO_EDIT_PARMS;

(* Parameter structure for MMIOM_WIN_MESSAGE *)

type MMIO_WINMSG=structure             (* this comment needed by h2inc *)
        hwndWindow: HWND;                   (* these are the parameters *)
        usMessage: USHORT;                    (*  ... passed to the       *)
        pParam1: PVOID;                      (*  ... window procedure    *)
        pParam2: PVOID;                      (*  ... by PM               *)
end;
type PMMIO_WINMSG=^MMIO_WINMSG;

(* JPEG IOproc specific structure *)

constant YUV_YVU        =   $0080;  (*v013 Compressed data is YUV *)
constant DST_Y          =    20;
constant DST_YY         =    25;

type JPEGOPTIONS=structure            (* this comment needed by h2inc         *)
        ulStructLen: ULONG;                    (* size of this sturcture                   *)
        usQuantization: array[4] of USHORT;              (* Each number may be 1 - 65535       *)
        usScale: USHORT;                        (* 1 (1/8 Size) - 8 (Full Size; default)   *)
        ulColorOrder: ULONG;                   (* YUV_YVU (Default) or ~YUV_YVU      *)
        usColorSpaceOut: USHORT;               (* DST_YY (Default) or DST_Y            *)
end;

type PJPEGOPTIONS=^JPEGOPTIONS;

(* Include error codes for MMIO only. *)

uses meerror;

constant MMIO_SUCCESS                   = 0;
constant MMIO_WARNING                   = 2;
constant MMIO_ERROR                     = $FFFFFFFF;
constant MMIOERR_UNSUPPORTED_MESSAGE    = $FFFFFFFE;

constant MMIO_CF_SUCCESS                = 0;
constant MMIO_CF_FAILURE                = 1;

(*
constant mmioFOURCC( ch0, ch1, ch2, ch3 )                         \
                  ( (ULONG)(BYTE)(ch0) | ( (ULONG)(BYTE)(ch1) << 8 ) |    \
                  ( (ULONG)(BYTE)(ch2) << 16 ) | ( (ULONG)(BYTE)(ch3) << 24 ) )

constant FOURCC_RIFF   mmioFOURCC( 'R', 'I', 'F', 'F' )
constant FOURCC_LIST   mmioFOURCC( 'L', 'I', 'S', 'T' )
constant FOURCC_MEM    mmioFOURCC( 'M', 'E', 'M', ' ' )
constant FOURCC_DOS    mmioFOURCC( 'D', 'O', 'S', ' ' )
constant FOURCC_BND    mmioFOURCC( 'B', 'N', 'D', ' ' )
constant FOURCC_FREE   mmioFOURCC( 'F', 'R', 'E', 'E' )
constant FOURCC_DEL    mmioFOURCC( 'D', 'E', 'L', ' ' )
constant FOURCC_CTOC   mmioFOURCC( 'C', 'T', 'O', 'C' )
constant FOURCC_CGRP   mmioFOURCC( 'C', 'G', 'R', 'P' )
constant FOURCC_CF     mmioFOURCC( 'C', 'F', ' ', ' ' )
*)

constant MMIO_NLS_CHARSET_INFO   = 8000;   (* RCDATA Name ID for NLS          *)
constant MMIO_IOPROC_NAME_TABLE  = 8500;   (* RCDATA Name ID for string table *)
constant MMIO_CODEC_NAME_TABLE   = 9000;   (* RCDATA Name ID for Codec  table *)

(*
 * Numeric equivalents of fourcc's.  These are needed for the resource
 * compiler.
 *)

constant HEX_FOURCC_DOS= $20534f44;
constant HEX_FOURCC_MEM= $204d454d;
constant HEX_FOURCC_BND= $20444e42;
constant HEX_FOURCC_CF = $20204643;

(* Country codes (CC), languages (LC), and dialects (DC). *)

constant MMIO_DEFAULT_CODE_PAGE          =  437;

constant MMIO_CC_NONE                    =    0;
constant MMIO_CC_USA                     =    1;
constant MMIO_CC_CANADA                  =    2;
constant MMIO_CC_LATIN_AMERICA           =    3;
constant MMIO_CC_GREECE                  =   30;
constant MMIO_CC_NETHERLANDS             =   31;
constant MMIO_CC_BELGIUM                 =   32;
constant MMIO_CC_FRANCE                  =   33;
constant MMIO_CC_SPAIN                   =   34;
constant MMIO_CC_ITALY                   =   39;
constant MMIO_CC_SWITZERLAND             =   41;
constant MMIO_CC_AUSTRIA                 =   43;
constant MMIO_CC_UNITED_KINGDOM          =   44;
constant MMIO_CC_DENMARK                 =   45;
constant MMIO_CC_SWEDEN                  =   46;
constant MMIO_CC_NORWAY                  =   47;
constant MMIO_CC_WEST_GERMANY            =   49;
constant MMIO_CC_MEXICO                  =   52;
constant MMIO_CC_BRAZIL                  =   55;
constant MMIO_CC_AUSTRALIA               =   61;
constant MMIO_CC_NEW_ZEALAND             =   64;
constant MMIO_CC_JAPAN                   =   81;
constant MMIO_CC_KOREA                   =   82;
constant MMIO_CC_CHINA                   =   86;
constant MMIO_CC_TAIWAN                  =   88;
constant MMIO_CC_TURKEY                  =   90;
constant MMIO_CC_PORTUGAL                =  351;
constant MMIO_CC_LUXEMBOURG              =  352;
constant MMIO_CC_ICELAND                 =  354;
constant MMIO_CC_FINLAND                 =  358;

constant MMIO_LC_NONE                      =  0;
constant MMIO_DC_NONE                      =  0;
constant MMIO_LC_ARABIC                    =  1;
constant MMIO_DC_ARABIC                    =  1;
constant MMIO_LC_BULGARIAN                 =  2;
constant MMIO_DC_BULGARIAN                 =  1;
constant MMIO_LC_CATALAN                   =  3;
constant MMIO_DC_CATALAN                   =  1;
constant MMIO_LC_TRADITIONAL_CHINESE       =  4;
constant MMIO_DC_TRADITIONAL_CHINESE       =  1;
constant MMIO_LC_SIMPLE_CHINESE            =  4;
constant MMIO_DC_SIMPLE_CHINESE            =  2;
constant MMIO_LC_CZECH                     =  5;
constant MMIO_DC_CZECH                     =  1;
constant MMIO_LC_DANISH                    =  6;
constant MMIO_DC_DANISH                    =  1;
constant MMIO_LC_GERMAN                    =  7;
constant MMIO_DC_GERMAN                    =  1;
constant MMIO_LC_SWISS_GERMAN              =  7;
constant MMIO_DC_SWISS_GERMAN              =  2;
constant MMIO_LC_GREEK                     =  8;
constant MMIO_DC_GREEK                     =  1;
constant MMIO_LC_US_ENGLISH                =  9;
constant MMIO_DC_US_ENGLISH                =  1;
constant MMIO_LC_UK_ENGLISH                =  9;
constant MMIO_DC_UK_ENGLISH                =  2;
constant MMIO_LC_SPANISH                   = 10;
constant MMIO_DC_SPANISH                   =  1;
constant MMIO_LC_SPANISH_MEXICAN           = 10;
constant MMIO_DC_SPANISH_MEXICAN           =  2;
constant MMIO_LC_FINNISH                   = 11;
constant MMIO_DC_FINNISH                   =  1;
constant MMIO_LC_FRENCH                    = 12;
constant MMIO_DC_FRENCH                    =  1;
constant MMIO_LC_BELGIAN_FRENCH            = 12;
constant MMIO_DC_BELGIAN_FRENCH            =  2;
constant MMIO_LC_CANADIAN_FRENCH           = 12;
constant MMIO_DC_CANADIAN_FRENCH           =  3;
constant MMIO_LC_SWISS_FRENCH              = 12;
constant MMIO_DC_SWISS_FRENCH              =  4;
constant MMIO_LC_HEBREW                    = 13;
constant MMIO_DC_HEBREW                    =  1;
constant MMIO_LC_HUNGARIAN                 = 14;
constant MMIO_DC_HUNGARIAN                 =  1;
constant MMIO_LC_ICELANDIC                 = 15;
constant MMIO_DC_ICELANDIC                 =  1;
constant MMIO_LC_ITALIAN                   = 16;
constant MMIO_DC_ITALIAN                   =  1;
constant MMIO_LC_SWISS_ITALIAN             = 16;
constant MMIO_DC_SWISS_ITALIAN             =  2;
constant MMIO_LC_JAPANESE                  = 17;
constant MMIO_DC_JAPANESE                  =  1;
constant MMIO_LC_KOREAN                    = 18;
constant MMIO_DC_KOREAN                    =  1;
constant MMIO_LC_DUTCH                     = 19;
constant MMIO_DC_DUTCH                     =  1;
constant MMIO_LC_BELGIAN_DUTCH             = 19;
constant MMIO_DC_BELGIAN_DUTCH             =  2;
constant MMIO_LC_NORWEGIAN_BOKMAL          = 20;
constant MMIO_DC_NORWEGIAN_BOKMAL          =  1;
constant MMIO_LC_NORWEGIAN_NYNORSK         = 20;
constant MMIO_DC_NORWEGIAN_NYNORSK         =  2;
constant MMIO_LC_POLISH                    = 21;
constant MMIO_DC_POLISH                    =  1;
constant MMIO_LC_BRAZILIAN_PORTUGUESE      = 22;
constant MMIO_DC_BRAZILIAN_PORTUGUESE      =  1;
constant MMIO_LC_PORTUGUESE                = 22;
constant MMIO_DC_PORTUGUESE                =  2;
constant MMIO_LC_RHAETO_ROMANIC            = 23;
constant MMIO_DC_RHAETO_ROMANIC            =  1;
constant MMIO_LC_ROMANIAN                  = 24;
constant MMIO_DC_ROMANIAN                  =  1;
constant MMIO_LC_RUSSIAN                   = 25;
constant MMIO_DC_RUSSIAN                   =  1;
constant MMIO_LC_SERBO_CROATIAN_LATIN      = 26;
constant MMIO_DC_SERBO_CROATIAN_LATIN      =  1;
constant MMIO_LC_SERBO_CROATIAN_CYRILLIC   = 26;
constant MMIO_DC_SERBO_CROATIAN_CYRILLIC   =  2;
constant MMIO_LC_SLOVAK                    = 27;
constant MMIO_DC_SLOVAK                    =  1;
constant MMIO_LC_ALBANIAN                  = 28;
constant MMIO_DC_ALBANIAN                  =  1;
constant MMIO_LC_SWEDISH                   = 29;
constant MMIO_DC_SWEDISH                   =  1;
constant MMIO_LC_THAI                      = 30;
constant MMIO_DC_THAI                      =  1;
constant MMIO_LC_TURKISH                   = 31;
constant MMIO_DC_TURKISH                   =  1;
constant MMIO_LC_URDU                      = 32;
constant MMIO_DC_URDU                      =  1;
constant MMIO_LC_BAHASA                    = 33;
constant MMIO_DC_BAHASA                    =  1;

(* Base function prototypes: *)

function mmioAdvance(in hmmio: HMMIO;
                     in pmmioinfo: PMMIOINFO;
                     in usFlags: USHORT): USHORT;

function mmioAscend(in hmmio: HMMIO;
                    in pckinfo: PMMCKINFO;
                    in usFlags: USHORT): USHORT;

function mmioClose(in hmmio: HMMIO;
                   in usFlags: USHORT): USHORT;

function mmioCreateChunk(in hmmio: HMMIO;
                         in pckinfo: PMMCKINFO;
                         in usFlags: USHORT): USHORT;

function mmioDescend(in hmmio: HMMIO;
                     in pckinfo: PMMCKINFO;
                     in pckinfoParent: PMMCKINFO;
                     in usFlags: USHORT): USHORT;

function mmioFlush(in hmmio: HMMIO;
                   in usFlags: USHORT): USHORT;

function mmioGetInfo(in hmmio: HMMIO;
                     in pmmioinfo: PMMIOINFO;
                     in usFlags: USHORT): USHORT;

function mmioGetLastError(in hmmio: HMMIO): ULONG;

function mmioInstallIOProc(in fccIOProc: FOURCC;
                           in pIOProc: PMMIOPROC;
                           in ulFlags: ULONG): PMMIOPROC;

function mmioIOProc(in pmmioinfo: PMMIOINFO;
                    in usMsg: USHORT;
                    in lParam1: LONG;
                    in lParam2: LONG): LONG;

function mmioOpen(in pszFileName: PSZ;
                  in pmmioinfo: PMMIOINFO;
                  in ulOpenFlags: ULONG): HMMIO;

function mmioRead(in hmmio: HMMIO;
                  in pchBuffer: PCHAR;
                  in cBytes: LONG): LONG;

function mmioSeek(in hmmio: HMMIO;
                  in lOffset: LONG;
                  in lOrigin: LONG): LONG;

function mmioSendMessage(in hmmio: HMMIO;
                         in usMsg: USHORT;
                         in lParam1: LONG;
                         in lParam2: LONG): LONG;

function mmioSetBuffer(in hmmio: HMMIO;
                       in pchBuffer: PCHAR;
                       in cBytes: LONG;
                       in usFlags: USHORT): USHORT;

function mmioSetInfo(in hmmio: HMMIO;
                     in pmmioinfo: PMMIOINFO;
                     in usFlags: USHORT): USHORT;

function mmioStringToFOURCC(in pszString: PSZ;
                            in usFlags: USHORT): FOURCC;

function mmioWrite(in hmmio: HMMIO;
                   in pchBuffer: PCHAR;
                   in cBytes: LONG): LONG;

(* Compound File function prototypes: *)

function mmioCFOpen(in pszFileName: PSZ;
                    in pmmcfinfo: PMMCFINFO;
                    in pmmioinfo: PMMIOINFO;
                    in ulFlags: ULONG): HMMCF;

function mmioCFClose(in hmmcf: HMMCF;
                     in ulFlags: ULONG): ULONG;

function mmioCFGetInfo(in hmmcf: HMMCF;
                       in pmmcfinfo: PMMCFINFO;
                       in cBytes: ULONG): ULONG;

function mmioCFSetInfo(in hmmcf: HMMCF;
                       in pmmcfinfo: PMMCFINFO;
                       in cBytes: ULONG): ULONG;

function mmioCFFindEntry(in hmmcf: HMMCF;
                         in pmmctocentry: PMMCTOCENTRY;
                         in ulFlags: ULONG): ULONG;

function mmioCFAddEntry(in hmmcf: HMMCF;
                        in pmmctocentry: PMMCTOCENTRY;
                        in ulFlags: ULONG): ULONG;

function mmioCFChangeEntry(in hmmcf: HMMCF;
                           in pmmctocentry: PMMCTOCENTRY;
                           in ulFlags: ULONG): ULONG;

function mmioCFDeleteEntry(in hmmcf: HMMCF;
                           in pmmctocentry: PMMCTOCENTRY;
                           in ulFlags: ULONG): ULONG;

function mmioCFAddElement(in hmmcf: HMMCF;
                          in pszElementName: PSZ;
                          in fccType: FOURCC;
                          in pchBuffer: PCHAR;
                          in cchBytes: LONG;
                          in ulFlags: ULONG): ULONG;

function mmioCFCopy(in hmmcfSource: HMMCF;
                    in pszDestFileName: PSZ;
                    in ulFlags: ULONG): ULONG;

(* Conversion Utility function prototypes: *)

function mmioQueryFormatCount(in pmmformatinfo: PMMFORMATINFO;
                              in plNumFormats: PLONG;
                              in ulReserved: ULONG;
                              in ulFlags: ULONG): ULONG;

function mmioGetFormats(in pmmformatinfo: PMMFORMATINFO;
                        in lNumFormats: LONG;
                        in pFormatInfoList: PVOID;
                        in plFormatsRead: PLONG;
                        in ulReserved: ULONG;
                        in ulFlags: ULONG): ULONG;

function mmioGetFormatName(in pmmformatinfo: PMMFORMATINFO;
                           in pszFormatName: PSZ;
                           in plBytesRead: PLONG;
                           in ulReserved: ULONG;
                           in ulFlags: ULONG): ULONG;

function mmioIdentifyFile(in pszFileName: PSZ;
                          in pmmioinfo: PMMIOINFO;
                          in pmmformatinfo: PMMFORMATINFO;
                          in pfccStorageSystem: PFOURCC;
                          in ulReserved: ULONG;
                          in ulFlags: ULONG): ULONG;

function mmioQueryHeaderLength(in hmmio: HMMIO;
                               in plHeaderLength: PLONG;
                               in ulReserved: ULONG;
                               in ulFlags: ULONG): ULONG;

function mmioGetHeader(in hmmio: HMMIO;
                       in pHeader: PVOID;
                       in lHeaderLength: LONG;
                       in plBytesRead: PLONG;
                       in ulReserved: ULONG;
                       in ulFlags: ULONG): ULONG;

function mmioSetHeader(in hmmio: HMMIO;
                       in pHeader: PVOID;
                       in lHeaderLength: LONG;
                       in plBytesWritten: PLONG;
                       in ulReserved: ULONG;
                       in ulFlags: ULONG): ULONG;

function mmioIniFileHandler(in pmminifileinfo: PMMINIFILEINFO;
                            in ulFlags: ULONG): ULONG;

function mmioIdentifyStorageSystem(in pszFileName: PSZ;
                                   in pmmioinfo: PMMIOINFO;
                                   in pfccStorageSystem: PFOURCC): ULONG;

function mmioDetermineSSIOProc(in pszFileName: PSZ;
                               in pmmioinfo: PMMIOINFO;
                               in pfccStorageSystem: PFOURCC;
                               in pszParsedRemainder: PSZ): ULONG;

function mmioQueryIOProcModuleHandle(in pIOProc: PMMIOPROC;
                                     in phmodIOProc: PHMODULE): ULONG;

function mmioCFCompact(in pszFileName: PSZ;
                       in ulFlags: ULONG): ULONG;


(* MMPMMMIO.INI file migration utility *)

function mmioMigrateIniFile(in ulFlags: ULONG): ULONG;

(* MMIO CODEC APIs *)

function mmioIniFileCODEC(in pCODECIniFileInfo: PCODECINIFILEINFO;
                          in ulFlags: ULONG): ULONG;
                                 
function mmioSet(in hmmio: HMMIO;
                 in pUserExtendmminfo: PMMEXTENDINFO;
                 in ulFlags: ULONG): ULONG;

function mmioQueryCODECName(in pCODECIniFileinfo: PCODECINIFILEINFO;
                            in pszCODECName: PSZ;
                            in pulBytesRead: PULONG): ULONG;

function mmioQueryCODECNameLength(in pCODECIniFileinfo: PCODECINIFILEINFO;
                                  in pulNameLength: PULONG): ULONG;

function mmioLoadCODECProc(in pCODECIniFileInfo: PCODECINIFILEINFO;
                           in phMod: PHMODULE;
                           in ulFlags: ULONG): PCODECPROC;

function mmioGetData(in hmmio: HMMIO;
                     in pmmioinfo: PMMIOINFO;
                     in usFlags: USHORT): USHORT;

end.

