<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <title>Rexx/Wrapper</title>
    <link href="common/default.css" type="text/css" rel="stylesheet">
    <link type="image/png" href="favicon.png" rel="icon">
    <meta name="keys" content="rexx, executable, wrap, compiler">
  </head>
  <body style="margin:0px;">
    <table width="100%" border="0" cellspacing="0" cellpadding="0" summary="">
      <tr>
        <!-- main body column -->
        <td class="mainbody" valign="top">
          <div class="mainbody">
            <!-- Here go the page contents -->
            <h1 class="centre">
              <IMG WIDTH="64" HEIGHT="64" SRC="images/rxwrap64.png" ALT="Rexx/Wrapper"><br>
              Rexx/Wrapper<br>
              Version 2.4<br>
              21 Sep 2006
            </h1>
            <H2>Introduction</H2>
              Rexx/Wrapper is a tool that wraps Rexx source or tokenised code
              into an executable program.
              The Rexx source code can be optionally compressed and encoded to ensure
              that the original Rexx code cannot be viewed (unless you have the original
              encryption key).
              <P>
              <B>Note that Rexx/Wrapper is NOT a compiler; the executable program still
              requires a Rexx interpreter to execute the program.</B>
            <H2>Getting Started</H2>
              The first time you run Rexx/Wrapper you should display the help information.
              To do this run the <B>rexxwrap.cmd</B> program with your Rexx interpreter; eg.
              <p class="code">
                rexx rexxwrap.cmd -h
              </p>
              -h, -?, and -help can all be specified to display help.
            <H2>Requirements</H2>
              To use Rexx/Wrapper you need two extra bits of software:
              <OL>
                <LI>A supported Rexx interpreter</LI>
                <LI>A supported C compiler</LI>
              </OL>
              The Rexx interpreter that is linked with the executable must be capable
              of executing an <I>instore</I> Rexx macro via the SAA API.
              The Rexx interpreter used to build the executable wrapper can be different
              to the interpreter used to run the executable program.
              If wrapping tokenised code, then the Rexx interpreter that creates the
              tokenised code, <B>must</B> be the same interpreter that runs the tokenised code.
              <P>
              All suppliers of Rexx interpreters provide access to their interpreter
              via a shared or dynamic library. This means that it is not possible to
              build a completely stand-alone executable; you will always have to include
              the shared or dynamic library with the executable built with Rexx/Wrapper.
              <P>
              There is one exception to this rule; <B>Regina</B>.  Regina also provides a
              static library, which means you can link your program with Regina's static
              library, and you will get a completely stand-alone executable.
              <P>
              There is a catch however with using the Regina static library :-(. The
              Rexx program that you wrap, cannot dynamically load an external function
              package.  This is because the Regina static library does not (and cannot)
              support the dynamic loading of external functions.  External functions, by
              their very nature, require the presence of a dynamic or shared library to
              operate.
              <P>
              Rexx/Wrapper requires a C compilers that supports ANSI prototypes.
              It will not work with older K&amp;R C Compilers.
              <P>
              For a list of the supported C compilers for the current platform, run
              <B>rexxwrap.cmd</B> with the <B>-h</B>.
            <H2>Modes of Operation</H2>
              Rexx/Wrapper can be run in one of 3 ways.
              <H3>Interactive</H3>
                To run Rexx/Wrapper interactively, simply run the <B>rexxwrap.cmd</B>
                program with your Rexx interpreter; eg.
                <p class="code">
                  rexx rexxwrap.cmd
                </p>
                You will then be prompted for several pieces of information that Rexx/Wrapper
                needs to build the executable program. The equivalent command-line switch
                is included below in parentheses. To set a value to an empty value, enter
                a dash at the prompt.
                <UL>
                  <LI>
                    <B>Program Name</B> <I>(-program)</I>
                    <BR>
                    This will be the name of the executable that Rexx/Wrapper creates.
                    Do not specify a .exe extension.
                  </li>
                  <LI>
                    <a name="rexxfilename"></a><B>Rexx filename</B> <I>(-rexxfiles)</I>
                    <BR>
                    The full file name of the source Rexx program. This can contain an
                    absolute file name like <I>c:\rexx\rexxcps.rexx</I> or <I>/home/me/rexx/rexxcps</I>
                    or a relative file name like <I>..\rexx\rexxcps.rexx</I> or <I>../rexxcps.rexx</I>.
                  </li>
                  <LI>
                    <B>Rexx interpreter</B> <I>(-interpreter)</I>
                    <BR>
                    The name of the Rexx interpreter to which you will be linking the executable.
                    The valid names can be determined by running <B>rexxwrap.cmd</B> with the <B>-h</B>
                    command line option.
                  </li>
                  <LI>
                    <B>Compiler</B> <I>(-compiler)</I>
                    <BR>
                    The symbolic name of the C compiler you will be using to build the
                    executable. Again, these are listed when you run <B>rexxwrap.cmd</B> with the
                    <B>-h</B> command line option.
                  </li>
                  <LI>
                    <B>Rexx Interpreter Library</B> <I>(-intlib)</I>
                    <br>
                    The full filename of the Rexx interpreter library to link to. This
                    will be something like <I>librexx.so</I>, on Unix platforms, and something
                    like <I>rexx.lib</I> on Windows, DOS and OS/2.  Again, absolute or relative
                    path names can be specified. <I>This value is ignored if
                    using <B>os2rexx</B> and the <B>EMX</B> compiler on OS/2, or <b>MinGW</b>
                    or <b>Cygwin</b> compilers on Win32.</I>
                  </li>
                  <LI>
                    <B>Rexx Interpreter Header File Directory</B> <I>(-intincdir)</I>
                    <BR>
                    The full directory in which the Rexx interpreter header file(s) reside.
                    Header files have a file extension of <B>.h</B>, and will be named something like
                    <I>rexx.h</I> or <I>rexxsaa.h</I>. <I>This value is ignored if
                    using <B>os2rexx</B> and the <B>EMX</B> compiler on OS/2.</I>
                  </li>
                  <LI>
                    <B>Rexx/Wrapper Source Directory</B> <I>(-srcdir)</I>
                    <br>
                    The full path to the Rexx/Wrapper source directory. This can be an absolute
                    or relative path. It is the directory where the files, loader.c, rexxtok.c
                    etc reside.
                  </li>
                  <LI>
                    <B>Encrypt source: yes/no</B> <I>(-encrypt)</I>
                    <br>
                    Answer <B>yes</B> or <B>no</B> if you want the source code encrypted.
                    Answering <B>yes</B> will make it very difficult for someone to extract
                    the source code form the executable without knowing the encryption key,
                    but it will add a small amount of extra processing time when you
                    execute the program.
                  </li>
                  <LI>
                    <B>Compress source: yes/no</B> <I>(-compress)</I>
                    <br>
                    Answer <B>yes</B> or <B>no</B> if you want the source code compressed.
                    Answering <B>yes</B> will reduce the size of the executable program
                    but it will add a small amount of extra processing time when you
                    execute the program.
                  </li>
                  <LI>
                    <B>Use tokenised code rather than source: yes/no</B> <I>(-token)</I>
                    <br>
                    Answer <B>yes</B> or <B>no</B> if you want Rexx/Wrapper to generate
                    tokenised code from your source code.  Note that using tokenised code
                    in the executable program, will NOT include the source code. So any trace
                    or use of SOURCELINE in your tokenised program will not work as
                    expected.
                    Some Rexx interpreters do not allow tokenised code to be generated.
                  </li>
                  <LI>
                    <B>Call Rexx program as subroutine: yes/no</B> <I>(-subroutine)</I>
                    <br>
                    Answer <B>Yes</B> or <B>No</B> if you want Rexx/Wrapper to run the
                    Rexx program as a subroutine.  This option will only work with Rexx/Trans
                    or Regina as the Rexx interpreter.  Running as a subroutine allows you
                    to pass parameters to your Rexx program with embeded spaces.
                  </li>
                  <li>
                    <b><i>Win32 Only</i></b>
                    <ul>
                      <LI><B>Do you want to build a GUI version: yes/no</B> <I>(-win32gui)</I>
                        <BR>
                        This option allows you to build a Win32 GUI application from your Rexx program.
                        The resultant executable will not display a console window when started. Any
                        data written to stdout or stderr, such as output from SAY or TRACE commands or
                        a stack trace as a result of a syntax error may
                        be lost depending on the answer to the following option (-guiconsole). Similarly
                        attempting to obtain data from stdin, such as PULL or interactive TRACE will result
                        in the program hanging, unless <b>-guiconsole</b> is set to <b>yes</b>.
                        This option is really only of use for wrapping
                        <a href="http://rexxdw.sf.net">Rexx/DW</a>
                        programs and other Rexx
                        programs written with GUI-based Rexx extensions.
                      </li>
                      <LI><B>Do you want a console window if required: yes/no</B> <I>(-guiconsole)</I>
                        <BR>
                        Specifying <b>no</b> for this option will result in all output being thrown away
                        and a program hang if you attempt to obtain input via PULL or interactive TRACE.
                        Generally it is not a good idea to set this to <b>no</b>.<br>
                        Specifying <b>yes</b> for this option will result in a console window appearing
                        as soon as any output or input is made from your Rexx program; either as a result
                        of SAY, TRACE, PULL or interactive TRACE. Also, once the console window appears
                        you must press any key in the console window once the program completes
                        and displays a message to that effect.
                      </li>
                      <li>
                        <b>Do you want to specify versioning information and add an icon to the executable: yes/no</b> <i>(-resource)</i>
                        <br>
                        Answer <b>yes</b> to enable a resource file and an optional icon to be built into your executable.
                      </li>
                      <li>
                        <b>Program version. eg 2.0.1</b> <i>(-version)</i>
                        <br>
                        Specify the version number; x.y.z to apply to the exectable.
                        Only valid if -resource=yes.
                      </li>
                      <li>
                        <b>Program description</b> <i>(-desc)</i>
                        <br>
                        A short description of the exectable.
                        Only valid if -resource=yes.
                      </li>
                      <li>
                        <b>License</b> <i>(-license)</i>
                        <br>
                        Specify the license that you want associated with the exectable.
                        Only valid if -resource=yes.
                      </li>
                      <li>
                        <b>Icon filename</b> <i>(-icon)</i>
                        <br>
                        The full filename of a valid Windows ICO file to be associated with the exectable.
                        Only valid if -resource=yes.
                      </li>
                    </ul>
                  </li>
                  <li>
                    <b><i>OS/2 Only</i></b>
                    <ul>
                      <li>
                        <b>Do you want to build a GUI version: yes/no</b> <i>(-win32gui)</i>
                        <br>
                        Answer <b>yes</b> to build the resultant executable as an OS/2 GUI program.
                      </li>
                      <li>
                        <b>Do you want to add an icon to the executable: yes/no</b> <i>-resource</i>
                        <br>
                        Answer <b>yes</b> to enable an icon to be built into your executable.
                      </li>
                      <li>
                        <b>Icon filename</b> <i>(-icon)</i>
                        <br>
                        The full filename of a valid OS/2 ICO file to be associated with the exectable.
                        Only valid if -resource=yes.
                      </li>
                    </ul>
                  </li>
                </UL>
              <H3>Command line</H3>
                To run Rexx/Wrapper from the command line (not really recommended) you
                supply all options on the Operating System command line.  The options
                are defined above, and consist of the option concatenated with an equals
                sign concatenated with the option value. eg
                <p class="code">
                  rexx rexxwrap.cmd -encrypt=yes -intlib=..\rexx\rexx.lib ...
                </p>
              <H3>Defaults</H3>
                This mode of operation assumes you have already run Rexx/Wrapper at least once
                and want to use the values you supplied the last time Rexx/Wrapper was run. You
                also must be running Rexx/Wrapper in the same directory you last ran it.
                To run with default values, supply the simgle option -d on the command line.
                Rexx/Wrapper will read the values specified in the rexxwrap.prm file in the
                current directory.  This file consists of a number of Rexx statements, that
                set compound variables, which are interpreted.
                <p>
                You can also supply a filename to the <b>-d</b> switch to specify the file containing
                the Rexx/Wrapper parameters to use.
              <H3>Sample session</H3>
                An example session using the prompt method and REXX/imc is shown below. User
                entered values are displayed in bold.
                <p class="code">
                This is Rexx/Wrapper 2.0 - 18 July 2002<br>
                ---------------------------------------<br>
                Program Name(-program) [] <B>rexxcps</B><BR>
                Rexx filename(-rexxfiles) [] <B>../rexx/demo/rexxcps.rexx</B><BR>
                Rexx interpreter(-interpreter) [] <B>rexximc</B><BR>
                Compiler(-compiler) [] <B>gcc</B><BR>
                Rexx Interpreter Library(-intlib) [] <B>/tmp/rexx-imc-1.7/librexx.so</B><BR>
                Rexx Interpreter Header File Directory(-intincdir) [] <B>/tmp/rexx-imc-1.7</B><BR>
                Rexx/Wrapper Source Directory(-srcdir) [] <B>..</B><BR>
                Encrypt source: yes/no(-encrypt) [] <B>yes</B><BR>
                Compress source: yes/no(-compress) [] <B>no</B><BR>
                Use tokenised code rather than source: yes/no(-token) [] <B>no</B><BR>
                Call Rexx program as subroutine: yes/no(-subroutine) [] <b>no</b><br>
                Running configure script...<BR>
                creating cache ./config.cache<BR>
                updating cache ./config.cache<BR>
                creating ./config.status<BR>
                creating configur<BR>
                creating config.h<BR>
                Compiling DES modules...rand_key set_key str2key ecb_enc cbc_cksm des_enc<BR>
                Compiling intbuild.c...<BR>
                Linking intbuild...<BR>
                Running intbuild to produce rexxcps.c...<BR>
                The generated key for this program is: tlxNhsju<BR>
                If you need to dump the original code from the rexxcps executable, run:<BR>
                rexxcps '--key=tlxNhsju'<BR>
                Compiling rexxcps.c...<BR>
                Linking rexxcps<BR>
                Done!<BR>
                </p>
                The following example session uses the default method and Rexx/Trans (under Win32). User
                entered values read from the <i>rexxwrap.prm</i> file are displayed in bold.
                <p class="code">
                This is Rexx/Wrapper 2.0 - 18 July 2002<br>
                ---------------------------------------<br>
                Program Name(-program) [<b>aces</b>]<br>
                Rexx filename(-rexxfiles) [<b>d:\rexxtk\demo\aces.rexx</b>]<br>
                Rexx interpreter(-interpreter) [<b>rexxtrans</b>]<br>
                Compiler(-compiler) [<b>vc</b>]<br>
                Rexx Interpreter Library(-intlib) [<b>d:\rexxtrans\rexxtrans.lib</b>]<br>
                Rexx Interpreter Header File Directory(-intincdir) [<b>d:\rexxtrans</b>]<br>
                Rexx/Wrapper Source Directory(-srcdir) [<b>d:\rexxwrapper</b>]<br>
                Encrypt source: yes/no(-encrypt) [<b>no</b>]<br>
                Compress source: yes/no(-compress) [<b>no</b>]<br>
                Use tokenised code rather than source: yes/no(-token) [<b>no</b>]<br>
                Call Rexx program as subroutine: yes/no(-subroutine) [<b>no</b>]<br>
                Do you want to build a GUI version: yes/no(-win32gui) [<b>yes</b>]<br>
                Do you want a console window if required: yes/no(-guiconsole) [<b>yes</b>]<br>
                Do you want to specify versioning information and add an icon to the executable: yes/no(-resource) [<b>yes</b>]<br>
                Program version. eg 2.0.1(-version) [<b>1.0</b>]<br>
                Program description(-desc) [<b>Aces Card Game</b>]<br>
                License(-license) [<b>LGPL</b>]<br>
                Icon filename(-icon) [<b>d:\rexxtk\demo\aces.ico</b>]<br>
                Compiling intbuild.c...<br>
                intbuild.c<br>
                Linking intbuild...<br>
                Running intbuild to produce aces.c...<br>
                If you need to dump the original code from the aces executable, run:<br>
                aces --key=1<br>
                Compiling aces.c...<br>
                aces.c<br>
                Linking aces<br>
                Done!<br>
                </p>
            <H2>Other uses of the tokenised file</H2>
              If you run Rexx/Wrapper and request that tokenised code be generated for your
              program, you have another option when it comes to running your program.
              In this mode. Rexx/Wrapper creates an executable progam called <B>rexxtok</B>
              or <B>rexxtok.exe</B>. This program can be run independently of the rexxwrap.cmd
              program, and can create or execute tokenised Rexx code.
              <BR>To generate a file of tokeinsed Rexx code, run rexxtok with the following
              options:
              <UL>
                <LI>
                  <B>-s</B><I>source file name</I>
                  <br>
                  The name of the Rexx source program. See <a href="#rexxfilename">Rexx Filename</a>
                  for the format of the filename.
                </li>
                <LI>
                  <B>-t</B><I>tokenised code file name</I>
                  <br>
                  The name of the output Rexx tokenised code. This can also include a
                  absolute or relative path name.
                </li>
              </UL>
              eg.
              <p class="code">
                rexxtok -srexxcps.rexx -trexxcps.tok
              </p>
              To execute the tokenised Rexx code, run rexxtok with the following options:
              <UL>
                <LI>
                  <B>-x</B>
                  <br>
                  This indicates that the tokenised code is to be executed.
                </li>
                <LI>
                  <B>-t</B><I>tokenised code file name</I>
                  <br>
                  The name of the output Rexx tokenised code. This can also include a
                  absolute or relative path name.
                </li>
                <LI>
                  <B>-s</B><I>source file name</I>
                  <br>
                  The name of the Rexx source program. See <a href="#rexxfilename">Rexx Filename</a>
                  for the format of the filename. This is an optional parameter when
                  executing the tokenised code.  If your tokenised program uses trace
                  or SOURCELINE, specifying the name of the Rexx program that the
                  tokenised code was generated from, will allow these featues to work.
                  You are on your own if the Rexx program supplied is <B>not</B> the
                  program the tokenised code was generated from!
                </li>
              </UL>
              eg.
              <p class="code">
                rexxtok -x -trexxcps.tok
              </p>
            <H2>Getting at the original program</H2>
              When Rexx/Wrapper runs, it will display details on how to extract the
              source code (or tokenised code) from the executable Rexx/Wrapper built.
              Essentially, this involves running the generated executable program with the
              --key=<I>key value</I> option. Assuming you created an executable called
              <B>rexxcps</B>, and you did not request encryption of the Rexx code or
              tokenised code:
              <p class="code">
                rexxcps --key=1
              </p>
              <BR>will display the original source code.  The encryption code generated
              by Rexx/Wrapper will be displayed during the building phase, so make a note
              of it. If you asked for tokensed code, then the executable will still dump
              out the tokenised code, but it won't make much sense, or be much use.
            <H2>Supported C compilers</H2>
              Rexx/Wrapper supports the following C compilers:
              <div class="mainbodycenter">
              <TABLE BORDER=1 CELLSPACING=1 CELLPADDING=2>
                <TR>
                  <TH>Platform</TH>
                  <TH>Compiler</TH>
                  <TH>Location</TH>
                  <TH>Status</TH>
                </TR>
                <TR>
                  <TD rowspan=2>Unix</TD>
                  <TD>GNU C</TD>
                  <TD><A HREF="http://gcc.gnu.org/">http://gcc.gnu.org/</A></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>cc, c89, xlc,...</TD>
                  <TD>Various Commercial ANSI Compilers</TD>
                  <TD>Commercial</TD>
                </TR>
                <TR>
                  <TD rowspan=3>OS/2</TD>
                  <TD>EMX</TD>
                  <TD><a href="ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/">ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/</a><br><a href="ftp://ftp-os2.cdrom.com/pub/os2/emx09d/">ftp://ftp-os2.cdrom.com/pub/os2/emx09d/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>Innotek GCC</TD>
                  <TD><a href="ftp://ftp.netlabs.org/pub/gcc/">ftp://ftp.netlabs.org/pub/gcc/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>Open Watcom</TD>
                  <TD><a href="http://www.openwatcom.org/">http://www.openwatcom.org/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>DOS - VCPI</TD>
                  <TD>EMX - OS/2 hosted</TD>
                  <TD><a href="ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/">ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/</a><br><a href="ftp://ftp-os2.cdrom.com/pub/os2/emx09d/">ftp://ftp-os2.cdrom.com/pub/os2/emx09d/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>DOS - DPMI</TD>
                  <TD>DJGPP</TD>
                  <TD><a href="http://delorie.com/djgpp/">http://delorie.com/djgpp/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD rowspan=7>Win32</td>
                  <TD>Cygnus Win32</TD>
                  <TD><a href="http://www.cygwin.com/">http://www.cygwin.com/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>MinGW</TD>
                  <TD><a href="http://www.mingw.org/">http://www.mingw.org</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>lcc-win32</TD>
                  <TD><a href="http://www.cs.virginia.edu/~lcc-win32/">http://www.cs.virginia.edu/~lcc-win32/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>Borland C++ 5.5</TD>
                  <TD><a href="http://www.borland.com/bcppbuilder/freecompiler/">http://www.borland.com/bcppbuilder/freecompiler/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>Open Watcom</TD>
                  <TD><a href="http://www.openwatcom.org/">http://www.openwatcom.org/</a></TD>
                  <TD>Free</TD>
                </TR>
                <TR>
                  <TD>Microsoft C++ 5.0+</TD>
                  <TD><a href="http://www.microsoft.com">http://www.microsoft.com</a></TD>
                  <TD>Commercial</TD>
                </TR>
                <TR>
                  <TD>Watcom C++ 10.6+</TD>
                  <TD><br></TD>
                  <TD>Commercial</TD>
                </TR>
                <TR>
                  <TD>QNX</TD>
                  <TD>Watcom C++ 10.6</TD>
                  <TD><br></TD>
                  <TD>Commercial</TD>
                </TR>
              </TABLE>
              </div>
            <h2>Acknowlegements</h2>
              All compression code in the <b>zlib</b> directory is Copyright (C) 1995-1998
              Jean-loup Gailly and Mark Adler.
              <br>
              All encryption code in the <b>des</b> directory is Copyright (C) 1995-1997
              Eric Young (eay@cryptsoft.com).
            <!-- Here end the page contents -->
          </div>
          <div class="address">
            Last Updated: 21 September 2006. Copyright &copy; 2005-2006 <a href="http://www.rexx.org/">Mark Hessling</a>, &lt;<a href="mailto:mark@rexx.org">mark@rexx.org</a>&gt;
          </div>
          <div class="footer">
            <a href="http://validator.w3.org/check?uri=referer"><img src="common/images/valid-html401.png" alt="Valid HTML 4.01!"></a>
            <a href="http://jigsaw.w3.org/css-validator/"><img src="common/images/vcss.png" alt="Valid CSS!"></a>
          </div>
        </td>
      </tr>
    </table>
  </body>
</html>
