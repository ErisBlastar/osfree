/**************************************************************************
 *
 *  Copyright 2008, Roger Brown
 *
 *  This file is part of Roger Brown's Toolkit.
 *
 *  This program is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or (at your
 *  option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 *  more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 */

/*
 * $Id: somos.idl 3928 2013-01-18 22:12:06Z rogerb $
 */

#ifndef somos_idl
#define somos_idl
#include <somobj.idl>
#include <somdserv.idl>
#include <somdcprx.idl>
#include <xmscssae.idl>
#include <omgidobj.idl>
module somOS
{
	enum service_id 
	{
		somOSNaming,
		somOSEvents,
		somOSLifeCycle,
		somOSPersistence,
		somOSSecurity,
		somOSObjectIdentity,
		somOSTransactions,
		somOSConcurrency,
		somOSExternalization,
		somOSAttributePersistence,
		somOSLastEnum};

	typedef service_id service_id_e;

	struct metastate_struct
	{
		service_id_e svc_id;
		unsigned short version_major;
		unsigned short version_minor;
		any service_metastate;
	};

	typedef metastate_struct metastate_struct_t;

	interface Server : SOMDServer
	{
#pragma version Server 3.0
		SOMObject make_persistent_ref(
			in SOMObject referenced_object)
				raises (SysAdminException::ExExists,SysAdminException::ExNotFound,SysAdminException::ExFailed,SysAdminException::ExFileIO);
		void delete_ref(
			in SOMObject referenced_object)
				raises (SysAdminException::ExNotFound,SysAdminException::ExFailed,SysAdminException::ExFileIO);
		boolean has_persistent_ref(
			in SOMObject referenced_object);
		void passivate_object(
			in SOMObject referenced_object)
				raises (SysAdminException::ExNotFound,SysAdminException::ExFileIO,SysAdminException::ExFailed);
		void passivate_all_objects()
				raises (SysAdminException::ExNotFound,SysAdminException::ExFileIO,SysAdminException::ExFailed);
		void store_service_metastate(
			in SOMObject referenced_object,
			in service_id_e somos_service_id,
			in any service_metadata)
				raises (SysAdminException::ExNotFound,SysAdminException::ExFileIO,SysAdminException::ExFailed);
		void store_metastate(
			in SOMObject referenced_object)
				raises (SysAdminException::ExNotFound,SysAdminException::ExFileIO,SysAdminException::ExFailed);
		void restore_metastate(
			in SOMObject referenced_object)
				raises (SysAdminException::ExNotFound,SysAdminException::ExFileIO,SysAdminException::ExFailed);
#ifdef __SOMIDL__
		implementation
		{
			callstyle = idl;
			dllname = "somos.dll";
			metaclass = SOMMSingleInstance;
			majorversion = 3;
			minorversion = 0;
			releaseorder : 
				make_persistent_ref,
				delete_ref,
				passivate_object,
				passivate_all_objects,
				store_metastate,
				restore_metastate,
				has_persistent_ref,
				store_service_metastate;
		};
#endif /* __SOMIDL__ */
	};
	interface ServiceBase :
		CosObjectIdentity::IdentifiableObject
	{
		typedef sequence<metastate_struct_t> metastate_t;
		void reinit(
			in metastate_t meta_data);
		void capture(
			inout metastate_t meta_data);
		SOMObject GetInstanceManager();
		SOMObject init_for_object_creation()
				raises (SysAdminException::ExException,SysAdminException::ExInvalid);
		SOMObject init_for_object_reactivation();
		SOMObject init_for_object_copy();
		void uninit_for_object_move();
		void uninit_for_object_passivation();
		void uninit_for_object_destruction();
#ifdef __SOMIDL__
		implementation
		{
			majorversion = 3;
			minorversion = 0;
			memory_management = corba;
			callstyle = idl;
			dllname = "somos.dll";
			releaseorder : 
				reinit,
				capture,
				init_for_object_creation,
				init_for_object_reactivation,
				init_for_object_copy,
				uninit_for_object_move,
				uninit_for_object_passivation,
				uninit_for_object_destruction,
				_get_som_uuid,
				GetInstanceManager;
		};
#endif /* __SOMIDL__ */
	};
	interface ServiceBasePRef :
		ServiceBase
	{
#ifdef __SOMIDL__
		implementation
		{
			majorversion = 3;
			minorversion = 0;
			callstyle = idl;
			dllname = "somos.dll";
		};
#endif /* __SOMIDL__ */
	};
	interface ServiceBaseCORBA :
		ServiceBase
	{
#ifdef __SOMIDL__
		implementation
		{
			majorversion = 3;
			minorversion = 0;
			callstyle = idl;
			dllname = "somos.dll";
		};
#endif /* __SOMIDL__ */
	};
	interface ServiceBasePRefCORBA :
		ServiceBasePRef,
		ServiceBaseCORBA
	{
#ifdef __SOMIDL__
		implementation
		{
			majorversion = 3;
			minorversion = 0;
			callstyle = idl;
			dllname = "somos.dll";
			init_for_object_reactivation: 
				override,
				select=somOS_ServiceBaseCORBA;
		};
#endif /* __SOMIDL__ */
	};
};
#endif /* somos_idl */
