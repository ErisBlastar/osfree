group os2def;


type BYTE   = T_BYTE; (* 8bit *)
type UCHAR  = T_BYTE; (* 8bit *)
type USHORT = T_WORD; (* 16bit *)
type ULONG  = T_DWORD; (* 32bit *)
type SHORT  = T_INT16; (* 16bit *)
type LONG   = T_INT32; (* 32bit *)
type WORD   = T_WORD; (* 16bit *)
type DWORD  = T_DWORD; (* 32bit *)

type INT   = T_INT32;
type UINT  = T_DWORD;
type CHAR  = T_CHAR;

type SHANDLE = USHORT;
type LHANDLE = ULONG;

type PUCHAR=^UCHAR;
type PBYTE=^BYTE;
type NPBYTE=^BYTE;
type PUSHORT=^USHORT;
type PUINT=^UINT;
type PULONG=^ULONG;

type _PFN=function: INT;
type PFN=^_PFN;
type _NPFN=function: INT;
type NPFN=^_NPFN;

constant NULLHANDLE:  LHANDLE = 0;
constant NULLSHANDLE: SHANDLE = 0;

constant SEVERITY_NOERROR       = $0000;
constant SEVERITY_WARNING       = $0004;
constant SEVERITY_ERROR         = $0008;
constant SEVERITY_SEVERE        = $000C;
constant SEVERITY_UNRECOVERABLE = $0010;

constant WINERR_BASE = $1000;
constant GPIERR_BASE = $2000;
constant DEVERR_BASE = $3000;
constant SPLERR_BASE = $4000;

constant ICON_FILE     = 1;
constant ICON_RESOURCE = 2;
constant ICON_DATA     = 3;
constant ICON_CLEAR    = 4;

constant DRIVER_NAME     = 1;
constant DRIVER_DATA     = 2;
constant DATA_TYPE       = 3;
constant COMMENT         = 4;
constant PROC_NAME       = 5;
constant PROC_PARAMS     = 6;
constant SPL_PARAMS      = 7;
constant NETWORK_PARAMS  = 8;

constant PD_JOB_PROPERTY = $0001;

constant FATTR_SEL_ITALIC          = $0001;
constant FATTR_SEL_UNDERSCORE      = $0002;
constant FATTR_SEL_OUTLINE         = $0008;
constant FATTR_SEL_STRIKEOUT       = $0010;
constant FATTR_SEL_BOLD            = $0020;
constant FATTR_SEL_MUST_COLOR      = $0100;
constant FATTR_SEL_MUST_MIXEDMODES = $0200;
constant FATTR_SEL_MUST_HOLLOW     = $0400;

constant FATTR_TYPE_KERNING        = $0004;
constant FATTR_TYPE_MBCS           = $0008;
constant FATTR_TYPE_DBCS           = $0010;
constant FATTR_TYPE_ANTIALIASED    = $0020;

constant FATTR_FONTUSE_NOMIX       = $0002;
constant FATTR_FONTUSE_OUTLINE     = $0004;
constant FATTR_FONTUSE_TRANSFORMABLE=$0008;

constant FACESIZE=32;

constant FM_TYPE_FIXED         = $0001;
constant FM_TYPE_LICENSED      = $0002;
constant FM_TYPE_KERNING       = $0004;
constant FM_TYPE_DBCS          = $0010;
constant FM_TYPE_MBCS          = $0018;
constant FM_TYPE_UNICODE       = $0040;
constant FM_TYPE_64K           = $8000;
constant FM_TYPE_ATOMS         = $4000;
constant FM_TYPE_FAMTRUNC      = $2000;
constant FM_TYPE_FACETRUNC     = $1000;

constant FM_DEFN_OUTLINE       = $0001;
constant FM_DEFN_IFI           = $0002;
constant FM_DEFN_WIN           = $0004;
constant FM_DEFN_GENERIC       = $8000;

constant FM_DEFN_LATIN1        = $0010;
constant FM_DEFN_PC            = $0020;
constant FM_DEFN_LATIN2        = $0040;
constant FM_DEFN_CYRILLIC      = $0080;
constant FM_DEFN_HEBREW        = $0100;
constant FM_DEFN_GREEK         = $0200;
constant FM_DEFN_ARABIC        = $0400;
constant FM_DEFN_UGLEXT        = $0800;
constant FM_DEFN_KANA          = $1000;
constant FM_DEFN_THAI          = $2000;

constant FM_DEFN_UGL383        = $0070;
constant FM_DEFN_UGL504        = $00F0;
constant FM_DEFN_UGL767        = $0FF0;
constant FM_DEFN_UGL1105       = $3FF0;

constant FM_SEL_ITALIC         = $0001;
constant FM_SEL_UNDERSCORE     = $0002;
constant FM_SEL_NEGATIVE       = $0004;
constant FM_SEL_OUTLINE        = $0008;
constant FM_SEL_STRIKEOUT      = $0010;
constant FM_SEL_BOLD           = $0020;
constant FM_SEL_ISO9241_TESTED = $0040;

constant FM_SEL_JAPAN          = $1000;
constant FM_SEL_TAIWAN         = $2000;
constant FM_SEL_CHINA          = $4000;
constant FM_SEL_KOREA          = $8000;
constant FM_SEL_DBCSMASK       = $F000;

constant FM_ISO_9518_640       = $01;
constant FM_ISO_9515_640       = $02;
constant FM_ISO_9515_1024      = $04;
constant FM_ISO_9517_640       = $08;
constant FM_ISO_9517_1024      = $10;

constant FM_CAP_NOMIX          = $0001;
constant FM_CAP_NO_COLOR       = $0002;
constant FM_CAP_NO_MIXEDMODES  = $0004;
constant FM_CAP_NO_HOLLOW      = $0008;

type APIRET=ULONG;
type APIRET16=USHORT;
type APIRET32=ULONG;

type PSZ=^T_CHAR;
type SZ=T_CHAR;

type NPSZ=^T_CHAR;
type PCH=^T_CHAR;
type PCCH=PCH;
type NPCH=^T_CHAR;
type PCSZ=^T_CHAR;


type BOOL=ULONG;
type PBOOL=^BOOL;
type BOOL32=ULONG;
type PBOOL32=^BOOL32;
type BOOL16=USHORT;
type PBOOL16=^BOOL16; (* Непонятно, как сделать модификатор _Seg16 *)

type PCHAR=^CHAR;
type PSHORT=^SHORT;
type PINT=^INT;
type PLONG=^LONG;

(* type CHAR     * _Seg16 PCHAR16; *)
(* type UCHAR    * _Seg16 PUCHAR16; *)

type PVOID=T_POINTER;
type PPVOID=^PVOID;
(* type VOID     * _Seg16 PVOID16; *)

(*  type int (APIENTRY _PFN)();
type _PFN  *PFN;
type int (APIENTRY _NPFN)();
type _NPFN *NPFN; *)

type SEL=USHORT;
type PSEL=^SEL;

type HFILE=LHANDLE;
type PHFILE=^HFILE;
type HMODULE=LHANDLE;
type PHMODULE=^HMODULE;
type PID=LHANDLE;
type PPID=^PID;
type TID=LHANDLE;
type PTID=^TID;
type HAB=LHANDLE;
type PHAB=^HAB;
type HPS=LHANDLE;
type PHPS=^HPS;
type HDC=LHANDLE;
type PHDC=^HDC;
type HRGN=LHANDLE;
type PHRGN=^HRGN;
type HBITMAP=LHANDLE;
type PHBITMAP=^HBITMAP;
type HMF=LHANDLE;
type PHMF=^HMF;
type HPAL=LHANDLE;
type PHPAL=^HPAL;
type HWND=LHANDLE;
type PHWND=^HWND;
type HMQ=LHANDLE;
type PHMQ=^HMQ;
type HPOINTER=LHANDLE;
type COLOR=LONG;
type PCOLOR=^COLOR;
type FIXED=LONG;
type PFIXED=^FIXED;

uses hevdef default;

type HMTX=ULONG;
type PHMTX=^HMTX;
type HMUX=ULONG;
type PHMUX=^HMUX;
type HSEM=ULONG;
type PHSEM=^HSEM;
type SGID=USHORT;

type MPARAM=PVOID;
type PMPARAM=^MPARAM;
type MRESULT=PVOID;
type PMRESULT=^MRESULT;

type ERRORID=ULONG;
type PERRORID=^ERRORID;

type STR8=array[8] of CHAR;
type PSTR8=^STR8;

type PDEVOPENDATA=^PSZ;

type QWORD=structure
    ulLo: ULONG;
    ulHi: ULONG;
  end;
type PQWORD=^QWORD;

type PRINTDEST=structure
   cb: ULONG;
   lType: LONG;
   pszToken: PSZ;
   lCount: LONG;
   pdopData: PDEVOPENDATA;
   fl: ULONG;
   pszPrinter: PSZ;
  end;
type PPRINTDEST=^PRINTDEST;

type ICONINFO=structure
    cb: ULONG;
    fFormat: ULONG;
    pszFileName: PSZ;
    hmod: HMODULE;
    resid: ULONG;
    cbIconData: ULONG;
    pIconData: PVOID;
  end;
type PICONINFO=^ICONINFO;

type ACCEL=structure
    fs: USHORT;
    key: USHORT;
    cmd: USHORT;
  end;
type PACCEL=^ACCEL;

(* font metrics returned by GpiQueryFonts and others *)

type PANOSE=structure
       bFamilyType: BYTE;
       bSerifStyle: BYTE;
       bWeight: BYTE;
       bProportion: BYTE;
       bContrast: BYTE;
       bStrokeVariation: BYTE;
       bArmStyle: BYTE;
       bLetterform: BYTE;
       bMidline: BYTE;
       bXHeight: BYTE;
       fbPassedISO: BYTE;
       fbFailedISO: BYTE;
  end;

type FONTMETRICS=structure
       szFamilyname: array[FACESIZE] of CHAR;
       szFacename: array[FACESIZE] of CHAR;
       idRegistry: USHORT;
       usCodePage: USHORT;
       lEmHeight: LONG;
       lXHeight: LONG;
       lMaxAscender: LONG;
       lMaxDescender: LONG;
       lLowerCaseAscent: LONG;
       lLowerCaseDescent: LONG;
       lInternalLeading: LONG;
       lExternalLeading: LONG;
       lAveCharWidth: LONG;
       lMaxCharInc: LONG;
       lEmInc: LONG;
       lMaxBaselineExt: LONG;
       sCharSlope: SHORT;
       sInlineDir: SHORT;
       sCharRot: SHORT;
       usWeightClass: USHORT;
       usWidthClass: USHORT;
       sXDeviceRes: SHORT;
       sYDeviceRes: SHORT;
       sFirstChar: SHORT;
       sLastChar: SHORT;
       sDefaultChar: SHORT;
       sBreakChar: SHORT;
       sNominalPointSize: SHORT;
       sMinimumPointSize: SHORT;
       sMaximumPointSize: SHORT;
       fsType: USHORT;
       fsDefn: USHORT;
       fsSelection: USHORT;
       fsCapabilities: USHORT;
       lSubscriptXSize: LONG;
       lSubscriptYSize: LONG;
       lSubscriptXOffset: LONG;
       lSubscriptYOffset: LONG;
       lSuperscriptXSize: LONG;
       lSuperscriptYSize: LONG;
       lSuperscriptXOffset: LONG;
       lSuperscriptYOffset: LONG;
       lUnderscoreSize: LONG;
       lUnderscorePosition: LONG;
       lStrikeoutSize: LONG;
       lStrikeoutPosition: LONG;
       sKerningPairs: SHORT;
       sFamilyClass: SHORT;
       lMatch: LONG;
       FamilyNameAtom: LONG;
       FaceNameAtom: LONG;
       panose: PANOSE;
end;
type PFONTMETRICS=^FONTMETRICS;

type FATTRS=structure
     usRecordLength: USHORT;
     fsSelection: USHORT;
     lMatch: LONG;
     szFacename: array[FACESIZE] of CHAR;
     idRegistry: USHORT;
     usCodePage: USHORT;
     lMaxBaselineExt: LONG;
     lAveCharWidth: LONG;
     fsType: USHORT;
     fsFontUse: USHORT;
  end;
type PFATTRS=^FATTRS;

(* structure for size parameters e.g. for GpiCreatePS *)
type SIZEL=structure            (* sizl *)
    cx: LONG;
    cy: LONG;
  end;
type PSIZEL=^SIZEL;

end.
