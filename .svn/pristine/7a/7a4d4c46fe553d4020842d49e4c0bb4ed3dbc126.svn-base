The University of Queensland Motorola 68328 to Motorola 68328 Binary Translator
Processing appStart    
000000a0 *8* r[0] := r[0]{8} | 1{8}
         LOGICALFLAGS8( r[0] )
000000a4  CALL 0x46a
Processing proc1    
0000046a
00000472 *32* r[tmp1] := a[m[r[14] + -12]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000476 *32* r[tmp1] := a[m[r[14] + -8]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
0000047a *32* r[tmp1] := a[m[r[14] + -4]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
0000047e  CALL 0xaaaaa08f
00000482 *16* r[temp1] := r[0]
         *16* r[4] := r[temp1]
         COMMONFLAGS16( r[4] )
00000484 *16* r[tmp1] := r[4]{16}
         LOGICALFLAGS16( r[4] )
00000486 *32* r[15] := r[15] + 12
0000048a  JCOND 4a8, condition equals
0000048c *32* r[8] := a[m[1268]]
00000490 *32* r[tmp1] := a[m[r[8]]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000492 *16* m[r[15] + -2] := 92
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
00000496 *32* r[8] := a[m[1296]]
0000049a *32* r[tmp1] := a[m[r[8]]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
0000049c  CALL 0xaaaaa084
000004a0 *32* r[0] := 0
         COMMONFLAGS32( r[0] )
000004a2 *32* r[15] := r[15] + 10
000004a6  JUMP 4de
000004a8 *32* r[8] := m[r[14] + -4]
         COMMONFLAGS32( r[8] )
000004ac *16* m[r[15] + -2] := m[r[8] + 6]
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000004b0 *32* m[r[15] + -4] := m[r[8] + 2]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000004b4 *16* r[temp1] := m[r[8]]
         *16* m[r[15] + -2] := r[temp1]
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000004b6  CALL 0x436
000004c6 *32* r[temp1] := r[0]
         *32* r[3] := r[temp1]
         COMMONFLAGS32( r[3] )
000004c8 *32* m[r[15] + -4] := m[r[14] + -12]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000004cc *32* m[r[15] + -4] := m[r[14] + -8]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000004d0 *32* m[r[15] + -4] := m[r[14] + -4]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000004d4  CALL 0xaaaaa090
000004d8 *32* r[temp1] := r[3]
         *32* r[0] := r[temp1]
         COMMONFLAGS32( r[0] )
000004da *32* r[15] := r[15] + 20
000004de  RET
Processing proc2    
00000436
0000043e *16* r[4] := m[r[14] + 8]
         COMMONFLAGS16( r[4] )
00000442 *32* r[10] := m[r[14] + 10]
         COMMONFLAGS32( r[10] )
00000446 *16* r[3] := m[r[14] + 14]
         COMMONFLAGS16( r[3] )
0000044a *16* r[temp1] := r[3]
         *16* m[r[15] + -2] := r[temp1]
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
0000044c *32* r[temp1] := r[10]
         *32* m[r[15] + -4] := r[temp1]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
0000044e *16* r[temp1] := r[4]
         *16* m[r[15] + -2] := r[temp1]
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
00000450  CALL 0x3c6
00000454 *16* r[15] := r[15]{16} + 8{16}
00000456  RET
Processing proc3    
000003c6
000003ce *16* r[5] := m[r[14] + 8]
         COMMONFLAGS16( r[5] )
000003d2 *16* r[4] := m[r[14] + 14]
         COMMONFLAGS16( r[4] )
000003d6 *16* r[temp1] := r[4]
         *16* m[r[15] + -2] := r[temp1]
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000003d8 *32* m[r[15] + -4] := 33566720
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000003de  CALL 0xb0
000003e2 *16* r[temp1] := r[0]
         *16* r[3] := r[temp1]
         COMMONFLAGS16( r[3] )
000003e4 *16* r[tmp1] := r[3]{16}
         LOGICALFLAGS16( r[3] )
000003e6 *16* r[15] := r[15]{16} + 6{16}
000003e8  JCOND 3f0, condition equals
000003ea *16* r[temp1] := r[3]
         *16* r[8] := r[temp1]
         COMMONFLAGS16( r[8] )
000003ec *32* r[temp1] := r[8]
         *32* r[0] := r[temp1]
         COMMONFLAGS32( r[0] )
000003ee  JUMP 41a
000003f0 *16* r[temp1] := r[5]
         *16* r[0] := r[temp1]
         COMMONFLAGS16( r[0] )
000003f2  JCOND 3f6, condition equals
000003f4  JUMP 418
0000041a  RET
000003f6  CALL 0x366
000003fa *16* r[temp1] := r[0]
         *16* r[3] := r[temp1]
         COMMONFLAGS16( r[3] )
000003fc *16* r[tmp1] := r[3]{16}
         LOGICALFLAGS16( r[3] )
000003fe  JCOND 406, condition equals
00000400 *16* r[temp1] := r[3]
         *16* r[8] := r[temp1]
         COMMONFLAGS16( r[8] )
00000402 *32* r[temp1] := r[8]
         *32* r[0] := r[temp1]
         COMMONFLAGS32( r[0] )
00000404  JUMP 41a
00000418 *32* r[0] := 0
         COMMONFLAGS32( r[0] )
00000406 *16* m[r[15] + -2] := 1000
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
0000040a  CALL 0xaaaaa19b
0000040e  CALL 0x2fc
00000412  CALL 0x39a
00000416 *16* r[15] := r[15]{16} + 2{16}
Processing proc4    
000000b0
000000b8 *32* r[5] := m[r[14] + 8]
         COMMONFLAGS32( r[5] )
000000bc *16* r[4] := m[r[14] + 12]
         COMMONFLAGS16( r[4] )
000000c0 *32* r[tmp1] := a[m[r[14] + -8]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
000000c4 *16* m[r[15] + -2] := 1
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000000c8 *32* m[r[15] + -4] := 1886615923
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000000ce  CALL 0xaaaaa27b
000000d2 *32* r[tmp1] := r[5] - m[r[14] + -8]
         SUBFLAGS32( r[5], m[r[14] + -8], r[tmp1] )
000000d6 *32* r[15] := r[15] + 10
000000da  JCOND 186, condition unsigned less or equals
000000de *16* r[temp1] := r[4]
         *16* r[0] := r[temp1]
         COMMONFLAGS16( r[0] )
000000e0 *16* r[0] := r[0]{16} & 12{16}
         LOGICALFLAGS16( r[0] )
000000e4 *16* r[tmp1] := r[0] - 12
         SUBFLAGS16( r[0], 12, r[tmp1] )
000000e8  JCOND 180, condition not equals
000000ec *16* m[r[15] + -2] := 1001
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000000f0  CALL 0xaaaaa192
000000f4 *32* r[tmp1] := m[r[14] + -8] - 33566720
         SUBFLAGS32( m[r[14] + -8], 33566720, r[tmp1] )
000000fc *16* r[15] := r[15]{16} + 2{16}
000000fe  JCOND 180, condition unsigned greater or equals
00000102 *32* r[tmp1] := a[m[r[14] + -4]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000106 *32* r[tmp1] := a[m[r[14] + -10]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
0000010a *8* m[r[15] + -2] := 1
         COMMONFLAGS8( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
0000010e *32* m[r[15] + -4] := 1886545254
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
00000114 *32* m[r[15] + -4] := 1634758764
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
0000011a *32* r[tmp1] := a[m[r[14] + -42]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
0000011e *8* m[r[15] + -2] := 1
         COMMONFLAGS8( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
00000122  CALL 0xaaaaa078
00000126 *32* r[tmp1] := m[r[14] + -4]
         LOGICALFLAGS32( m[r[14] + -4] )
0000012a *32* r[15] := r[15] + 24
0000012e  JCOND 148, condition not equals
00000130 *32* r[8] := a[m[424]]
00000134 *32* r[tmp1] := a[m[r[8]]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000136 *16* m[r[15] + -2] := 144
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
0000013a *32* r[8] := a[m[444]]
0000013e *32* r[tmp1] := a[m[r[8]]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000140  CALL sysTrapErrDisplayFileLineMsg()
00000144 *32* r[15] := r[15] + 10
00000148 *32* r[tmp1] := m[r[14] + -4]
         LOGICALFLAGS32( m[r[14] + -4] )
0000014c  JCOND 180, condition equals
0000014e *32* m[r[15] + -4] := 0
         CLEARFLAGS( )
         *32* r[15] := r[15] + -4
00000150 *16* m[r[15] + -2] := 0
         CLEARFLAGS( )
         *32* r[15] := r[15] + -2
00000152 *32* m[r[15] + -4] := m[r[14] + -4]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
00000156 *16* m[r[15] + -2] := m[r[14] + -10]
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
0000015a  CALL 0xaaaaa0a7
0000015e *16* r[temp1] := r[0]
         *16* r[3] := r[temp1]
         COMMONFLAGS16( r[3] )
00000160 *16* r[tmp1] := r[3]{16}
         LOGICALFLAGS16( r[3] )
00000162 *32* r[15] := r[15] + 12
00000166  JCOND 180, condition equals
00000168 *32* r[8] := a[m[454]]
0000016c *32* r[tmp1] := a[m[r[8]]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
0000016e *16* m[r[15] + -2] := 144
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
00000172 *32* r[8] := a[m[476]]
00000176 *32* r[tmp1] := a[m[r[8]]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000178  CALL sysTrapErrDisplayFileLineMsg()
0000017c *32* r[15] := r[15] + 10
00000180 *16* r[0] := 1292
         COMMONFLAGS16( r[0] )
00000184  JUMP 188
00000186 *32* r[0] := 0
         COMMONFLAGS32( r[0] )
00000188  RET
Back end for proc proc4
Finished proc4    
Processing proc5    
00000366
0000036a *16* m[r[14] + -2] := 2
         COMMONFLAGS16( m[r[14] + -2] )
00000370 *8* m[r[15] + -2] := 1
         COMMONFLAGS8( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
00000374 *32* r[tmp1] := a[m[r[14] + -2]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000378 *32* r[tmp1] := a[m[r[14] + -4]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
0000037c *16* m[r[15] + -2] := 0
         CLEARFLAGS( )
         *32* r[15] := r[15] + -2
0000037e *32* m[r[15] + -4] := 1937011316
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
00000384  CALL 0xaaaaa2d3
00000388 *32* r[0] := 0
         COMMONFLAGS32( r[0] )
0000038a  RET
Back end for proc proc5
Finished proc5    
Processing proc6    
000002fc
00000300 *32* r[tmp1] := a[m[65535]{16}]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000304 *32* r[tmp1] := a[m[r[14] + -24]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000308  CALL 0xaaaaa11d
0000030c *32* r[tmp1] := a[m[r[14] + -24]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000310  CALL 0xaaaaa0a9
00000314 *8* r[tmp1] := r[0]{8}
         LOGICALFLAGS8( r[0] )
00000316 *32* r[15] := r[15] + 12
0000031a  JCOND 34a, condition not equals
0000031c *32* r[tmp1] := a[m[r[14] + -26]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000320 *32* r[tmp1] := a[m[r[14] + -24]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000324 *32* m[r[15] + -4] := 0
         CLEARFLAGS( )
         *32* r[15] := r[15] + -4
00000326  CALL 0xaaaaa1bf
0000032a *8* r[tmp1] := r[0]{8}
         LOGICALFLAGS8( r[0] )
0000032c *32* r[15] := r[15] + 12
00000330  JCOND 34a, condition not equals
00000332 *32* r[tmp1] := a[m[r[14] + -24]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000336  CALL 0x2a0
0000033a *8* r[tmp1] := r[0]{8}
         LOGICALFLAGS8( r[0] )
0000033c *16* r[15] := r[15]{16} + 4{16}
0000033e  JCOND 34a, condition not equals
00000340 *32* r[tmp1] := a[m[r[14] + -24]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
00000344  CALL 0xaaaaa1a0
00000348 *16* r[15] := r[15]{16} + 4{16}
0000034a *16* r[tmp1] := m[r[14] + -24] - 22
         SUBFLAGS16( m[r[14] + -24], 22, r[tmp1] )
00000350  JCOND 300, condition not equals
00000352  RET
Processing proc8    
000002a0
000002a8 *32* r[11] := m[r[14] + 8]
         COMMONFLAGS32( r[11] )
000002ac *16* r[tmp1] := m[r[11]] - 23
         SUBFLAGS16( m[r[11]], 23, r[tmp1] )
000002b0  JCOND 2e0, condition not equals
000002b2 *16* r[3] := m[r[11] + 8]
         COMMONFLAGS16( r[3] )
000002b6 *16* r[temp1] := r[3]
         *16* m[r[15] + -2] := r[temp1]
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000002b8  CALL 0xaaaaa16f
000002bc *32* r[temp1] := r[8]
         *32* r[10] := r[temp1]
         COMMONFLAGS32( r[10] )
000002be *32* r[temp1] := r[10]
         *32* m[r[15] + -4] := r[temp1]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000002c0  CALL 0xaaaaa174
000002c4 *16* r[15] := r[15]{16} + 6{16}
000002c6 *16* r[temp1] := r[3]
         *16* r[0] := r[temp1]
         COMMONFLAGS16( r[0] )
000002c8 *16* r[0] := r[0]{16} - 1000{16}
         SUBFLAGS16( r[0] )
000002cc  JCOND 2d0, condition equals
000002ce  JUMP 2dc
000002e0 *32* r[0] := 0
         COMMONFLAGS32( r[0] )
000002e2  RET
000002d0 *32* r[tmp1] := a[m[578]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
000002d4 *32* r[temp1] := r[10]
         *32* m[r[15] + -4] := r[temp1]
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000002d6  CALL 0xaaaaa19f
000002da *16* r[15] := r[15]{16} + 8{16}
000002dc *32* r[0] := 1
         COMMONFLAGS32( r[0] )
000002de  JUMP 2e2
Back end for proc proc8
Finished proc8    
Back end for proc proc6
Finished proc6    
Processing proc7    
0000039a
0000039e *8* m[r[15] + -2] := 1
         COMMONFLAGS8( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000003a2 *16* m[r[15] + -2] := 2
         COMMONFLAGS16( m[r[15] + -2] )
         *32* r[15] := r[15] + -2
000003a6 *32* r[tmp1] := a[m[r[14] + -2]]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
000003aa *32* r[tmp1] := a[m[1]{16}]
         *32* r[15] := r[15] - 4
         *32* m[r[15]] := r[tmp1]
000003ae *32* m[r[15] + -4] := 1937011316
         COMMONFLAGS32( m[r[15] + -4] )
         *32* r[15] := r[15] + -4
000003b4  CALL 0xaaaaa2d4
000003b8  RET
Back end for proc proc7
Finished proc7    
Back end for proc proc3
Finished proc3    
Back end for proc proc2
Finished proc2    
Back end for proc proc1
Finished proc1    
Back end for proc appStart
Finished appStart    
Backend: will need the block move plan, with move from 520 to 0, size 56
