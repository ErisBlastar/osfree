/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define TWIN_dbg_const const
#else
#define TWIN_dbg_const
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN TWIN_dbg__start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((TWIN_dbg__start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE TWIN_dbg_restart( TWIN_dbg_in )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct TWIN_dbg__buffer_state *YY_BUFFER_STATE;

extern int TWIN_dbg_leng;
extern FILE *TWIN_dbg_in, *TWIN_dbg_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		TWIN_dbg_less( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the TWIN_dbg_less() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define TWIN_dbg_less(n) \
	do \
		{ \
		/* Undo effects of setting up TWIN_dbg_text. */ \
		*TWIN_dbg__cp = TWIN_dbg__hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		TWIN_dbg__c_buf_p = TWIN_dbg__cp = TWIN_dbg__bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up TWIN_dbg_text again */ \
		} \
	while ( 0 )

#define unput(c) TWIN_dbg_unput( c, TWIN_dbg_text_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int TWIN_dbg__size_t;


struct TWIN_dbg__buffer_state
	{
	FILE *TWIN_dbg__input_file;

	char *TWIN_dbg__ch_buf;		/* input buffer */
	char *TWIN_dbg__buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	TWIN_dbg__size_t TWIN_dbg__buf_size;

	/* Number of characters read into TWIN_dbg__ch_buf, not including EOB
	 * characters.
	 */
	int TWIN_dbg__n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int TWIN_dbg__is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int TWIN_dbg__is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int TWIN_dbg__at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int TWIN_dbg__fill_buffer;

	int TWIN_dbg__buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via TWIN_dbg_restart()), so that the user can continue scanning by
	 * just pointing TWIN_dbg_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE TWIN_dbg__current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER TWIN_dbg__current_buffer


/* TWIN_dbg__hold_char holds the character lost when TWIN_dbg_text is formed. */
static char TWIN_dbg__hold_char;

static int TWIN_dbg__n_chars;		/* number of characters read into TWIN_dbg__ch_buf */


int TWIN_dbg_leng;

/* Points to current character in buffer. */
static char *TWIN_dbg__c_buf_p = (char *) 0;
static int TWIN_dbg__init = 1;		/* whether we need to initialize */
static int TWIN_dbg__start = 0;	/* start state number */

/* Flag which is used to allow TWIN_dbg_wrap()'s to do buffer switches
 * instead of setting up a fresh TWIN_dbg_in.  A bit of a hack ...
 */
static int TWIN_dbg__did_buffer_switch_on_eof;

void TWIN_dbg_restart YY_PROTO(( FILE *input_file ));

void TWIN_dbg__switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void TWIN_dbg__load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE TWIN_dbg__create_buffer YY_PROTO(( FILE *file, int size ));
void TWIN_dbg__delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void TWIN_dbg__init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void TWIN_dbg__flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER TWIN_dbg__flush_buffer( TWIN_dbg__current_buffer )

YY_BUFFER_STATE TWIN_dbg__scan_buffer YY_PROTO(( char *base, TWIN_dbg__size_t size ));
YY_BUFFER_STATE TWIN_dbg__scan_string YY_PROTO(( TWIN_dbg_const char *TWIN_dbg__str ));
YY_BUFFER_STATE TWIN_dbg__scan_bytes YY_PROTO(( TWIN_dbg_const char *bytes, int len ));

static void *TWIN_dbg__flex_alloc YY_PROTO(( TWIN_dbg__size_t ));
static void *TWIN_dbg__flex_realloc YY_PROTO(( void *, TWIN_dbg__size_t ));
static void TWIN_dbg__flex_free YY_PROTO(( void * ));

#define TWIN_dbg__new_buffer TWIN_dbg__create_buffer

#define TWIN_dbg__set_interactive(is_interactive) \
	{ \
	if ( ! TWIN_dbg__current_buffer ) \
		TWIN_dbg__current_buffer = TWIN_dbg__create_buffer( TWIN_dbg_in, YY_BUF_SIZE ); \
	TWIN_dbg__current_buffer->TWIN_dbg__is_interactive = is_interactive; \
	}

#define TWIN_dbg__set_bol(at_bol) \
	{ \
	if ( ! TWIN_dbg__current_buffer ) \
		TWIN_dbg__current_buffer = TWIN_dbg__create_buffer( TWIN_dbg_in, YY_BUF_SIZE ); \
	TWIN_dbg__current_buffer->TWIN_dbg__at_bol = at_bol; \
	}

#define YY_AT_BOL() (TWIN_dbg__current_buffer->TWIN_dbg__at_bol)

typedef unsigned char YY_CHAR;
FILE *TWIN_dbg_in = (FILE *) 0, *TWIN_dbg_out = (FILE *) 0;
typedef int TWIN_dbg__state_type;
extern char *TWIN_dbg_text;
#define TWIN_dbg_text_ptr TWIN_dbg_text

static TWIN_dbg__state_type TWIN_dbg__get_previous_state YY_PROTO(( void ));
static TWIN_dbg__state_type TWIN_dbg__try_NUL_trans YY_PROTO(( TWIN_dbg__state_type current_state ));
static int TWIN_dbg__get_next_buffer YY_PROTO(( void ));
static void TWIN_dbg__fatal_error YY_PROTO(( TWIN_dbg_const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up TWIN_dbg_text.
 */
#define YY_DO_BEFORE_ACTION \
	TWIN_dbg_text_ptr = TWIN_dbg__bp; \
	TWIN_dbg_leng = (int) (TWIN_dbg__cp - TWIN_dbg__bp); \
	TWIN_dbg__hold_char = *TWIN_dbg__cp; \
	*TWIN_dbg__cp = '\0'; \
	TWIN_dbg__c_buf_p = TWIN_dbg__cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
static TWIN_dbg_const short int TWIN_dbg__accept[234] =
    {   0,
        0,    0,    1,    1,    2,    2,   88,   86,   85,    3,
       15,   86,   17,   86,    8,    9,   10,    4,   14,    5,
       13,    6,   26,   26,   12,    7,   11,   83,   83,   83,
       78,   80,   75,   83,   83,   76,   83,   83,   82,   73,
       81,   83,   79,   83,   77,   74,    1,   87,    2,   85,
       16,    0,   84,    0,    0,    0,    0,    0,    0,    0,
       26,    0,    0,    0,   83,   83,   83,   83,   83,   44,
       44,   61,   55,   66,   83,   83,   83,   59,   56,   42,
       83,   83,   83,   47,   64,   83,   68,   58,   70,   60,
       63,   83,   57,    1,    2,   40,   39,    0,    0,    0,

        0,    0,   38,    0,    0,   27,   28,   41,   18,   25,
       25,   67,   83,   52,   83,   44,   55,   66,   48,   46,
       45,   83,   59,   42,   83,   47,   83,   64,   83,   68,
       58,   70,   83,   60,   72,   63,   83,   57,    0,    0,
       32,   31,   33,   34,   37,   35,   29,    0,   36,   30,
        0,    0,    0,   67,   83,   53,   44,   55,   62,   66,
       48,   46,   45,   50,   59,   42,   51,   47,   69,   49,
       64,   83,   68,   58,   70,   43,   72,   63,   65,   57,
       19,   20,   21,   22,   23,   24,   67,   54,   55,   66,
       48,   46,   45,   50,   47,   49,   83,   68,   83,   72,

       65,   57,   55,   66,   48,   46,   45,   50,   47,   49,
       83,   83,   65,   55,   46,   50,   83,   49,   83,   83,
       65,   55,   83,   83,   43,   65,   55,   83,   71,   65,
       83,   65,    0
    } ;

static TWIN_dbg_const int TWIN_dbg__ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    1,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,    1,    1,
       19,    1,   20,    1,   21,   21,   21,   21,   21,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        1,    1,    1,    1,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   22,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   22,   43,   44,
       45,   22,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static TWIN_dbg_const int TWIN_dbg__meta[46] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,    5,    1,    1,
        4,    6,    4,    4,    4,    4,    4,    4,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    5,    6
    } ;

static TWIN_dbg_const short int TWIN_dbg__base[249] =
    {   0,
        0,    0,   44,   46,  450,  449,  451,  454,  448,  454,
      430,  443,  454,   25,  454,  454,  454,  454,  454,  454,
      454,  454,   39,   42,  454,  454,  454,   71,  429,   84,
       37,   39,   40,   80,   50,   88,   62,  100,  101,  102,
       48,  103,  111,   96,  428,  427,    0,  454,    0,  442,
      454,  438,  454,  402,  401,  108,  400,  399,  413,  103,
        0,    0,   68,  421,  118,  418,  121,  128,  126,  417,
      131,  416,  129,  138,   51,  132,  135,  150,  415,  147,
      151,  152,  155,  414,  156,  158,  159,  161,  160,  164,
      176,  167,  184,    0,    0,  413,  412,  385,  151,  384,

      165,  390,  180,  408,  407,  454,  454,  406,    0,  379,
        0,  169,  192,  404,  186,  195,  188,  188,  198,  205,
      202,  206,  209,  213,  214,  215,  216,  218,  217,  219,
      220,  222,  226,  403,  223,  227,  229,  238,    0,    0,
      454,  454,  454,  454,  454,  454,  454,    0,  454,  454,
        0,    0,    0,  232,  234,  402,  247,  249,  401,  248,
      250,  251,  252,  253,  400,  399,  398,  254,  397,  263,
      396,  259,  258,  395,  394,  260,  266,  393,  264,  270,
        0,    0,    0,    0,    0,    0,  392,  391,  271,  276,
      277,  272,  283,  284,  288,  289,  290,  387,  291,  381,

      295,  380,  293,  354,  353,  296,  352,  297,  301,  300,
      302,  303,  304,  309,  351,  350,  311,  349,  312,  313,
      317,  316,  318,  321,  348,  323,  347,  324,  346,  334,
      332,  345,  454,  373,  379,  385,  388,  390,  396,  402,
      356,  354,  353,  351,  350,  235,  180,   99
    } ;

static TWIN_dbg_const short int TWIN_dbg__def[249] =
    {   0,
      233,    1,  234,  234,  235,  235,  233,  233,  233,  233,
      233,  236,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  237,  237,  233,  233,  233,  238,  238,  238,
       30,   30,   30,   30,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  239,  233,  240,  233,
      233,  236,  233,  233,  233,  233,  233,  233,  233,  233,
       24,  241,   24,  242,   30,  238,   30,  238,  238,  238,
      238,  238,  238,   30,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  239,  240,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  241,  242,
      242,  238,  238,  238,  238,  238,  238,   30,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  243,  244,
      233,  233,  233,  233,  233,  233,  233,  245,  233,  233,
      246,  247,  248,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      243,  244,  245,  246,  247,  248,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,    0,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233
    } ;

static TWIN_dbg_const short int TWIN_dbg__nxt[500] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   28,   29,   35,
       36,   29,   37,   38,   39,   29,   40,   41,   42,   43,
       44,   29,   45,   46,   29,   48,   10,   48,   10,   54,
       55,   56,   57,   58,   61,   61,   62,   61,   61,   62,
       65,   59,   65,   65,   60,  233,   74,  233,  233,   66,
       75,   66,   66,   70,   73,   71,   78,   72,   66,  233,
       66,   66,   64,   63,   63,  233,   65,   65,   62,   88,
      120,   65,   81,   65,   65,   65,   65,   65,   65,   65,

       65,   62,  186,   65,   65,  233,   65,   67,   65,   65,
       65,   65,   66,  233,   76,   79,   68,  233,  233,  233,
      233,   66,   80,   77,   86,   69,   82,   85,  233,   89,
       98,   99,  100,  101,   93,   83,   84,   90,  102,  107,
       87,   65,  108,  233,   65,  233,  233,  103,  233,  233,
       66,   91,  233,   66,  121,   92,  112,  116,  113,   66,
      114,   65,   66,  117,  233,  118,  115,  233,  233,  233,
      119,  122,  233,  233,  124,  233,  233,  233,  233,   66,
      127,  233,  123,  185,  233,  126,  233,  142,  132,  130,
      125,  131,  133,  233,  143,  145,  129,  148,  135,  128,

      137,  233,  136,  233,  134,  233,  138,  154,  146,  233,
      149,   65,  233,  158,  155,  233,  150,  157,  160,  233,
       66,  156,  233,  233,  161,  163,  233,  162,  159,   66,
      233,  233,  233,  233,  233,  233,  233,  233,  184,  233,
      233,  164,  169,  233,  233,  165,  233,  177,  166,  233,
      168,  233,  179,  173,  167,  233,  172,  170,  171,  176,
      174,  175,  180,  178,  233,  233,  233,  233,  233,  233,
      233,  233,  187,  188,  192,  233,  233,  233,   70,  189,
      233,  233,  190,  233,  193,  197,  199,  233,  233,  233,
      191,  194,  195,  233,  233,  196,  202,  200,  198,  201,

      233,  233,  204,  205,  206,  233,  233,  233,  233,  207,
      233,  203,  233,  233,  233,  210,  211,  233,  233,  233,
      233,  233,  215,  214,  208,  212,  233,  213,  233,  233,
      233,  221,  209,  233,  233,  233,  216,  217,  233,  218,
      233,  233,  224,  220,  222,  219,  223,  226,  228,  233,
      227,  233,  225,  183,  182,  230,  181,  111,  231,  109,
      232,  229,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,   84,   47,   47,   47,   47,   47,   47,   49,
       49,   49,   49,   49,   49,   52,   52,   52,   52,   52,
       52,   63,   63,   66,   66,   66,   94,  233,  233,   94,

       94,   94,   95,   95,  233,   95,   95,   95,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,   64,  153,  152,  151,  147,  144,  141,  140,
      139,  233,  233,  233,  233,  233,  110,  106,  105,  104,
       97,   96,   53,   50,  233,  233,  233,   53,   51,   50,
      233,   10,   10,    7,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233

    } ;

static TWIN_dbg_const short int TWIN_dbg__chk[500] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,   14,
       14,   14,   14,   14,   23,   23,   23,   24,   24,   24,
       31,   14,   32,   33,   14,   41,   33,   35,   75,   31,
       33,   32,   33,   31,   32,   31,   35,   31,   31,   37,
       32,   33,   23,   63,   63,   24,   28,   28,   28,   41,
       75,   28,   37,   28,   28,   28,   28,   28,   28,   30,

       30,   30,  248,   34,   30,   36,   30,   30,   30,   30,
       30,   30,   34,   44,   34,   36,   30,   38,   39,   40,
       42,   34,   36,   34,   40,   30,   38,   39,   43,   42,
       56,   56,   56,   56,   44,   38,   38,   43,   56,   60,
       40,   65,   60,   69,   67,   68,   73,   56,   71,   76,
       65,   43,   77,   67,   76,   43,   67,   71,   68,   65,
       68,   74,   67,   73,   80,   74,   69,   78,   81,   82,
       74,   77,   83,   85,   80,   86,   87,   89,   88,   74,
       83,   90,   78,  247,   92,   82,  112,   99,   89,   87,
       81,   88,   90,   91,   99,  101,   86,  103,   91,   85,

       92,   93,   91,  115,   90,  117,   93,  112,  101,  113,
      103,  118,  116,  117,  113,  119,  103,  116,  118,  121,
      118,  115,  120,  122,  119,  121,  123,  120,  117,  118,
      124,  125,  126,  127,  129,  128,  130,  131,  246,  132,
      135,  122,  127,  133,  136,  123,  137,  135,  124,  154,
      126,  155,  137,  130,  125,  138,  129,  127,  128,  133,
      131,  132,  138,  136,  157,  160,  158,  161,  162,  163,
      164,  168,  154,  155,  162,  173,  172,  176,  157,  158,
      170,  179,  160,  177,  163,  172,  176,  180,  189,  192,
      161,  164,  168,  190,  191,  170,  180,  177,  173,  179,

      193,  194,  190,  191,  192,  195,  196,  197,  199,  193,
      203,  189,  201,  206,  208,  196,  197,  210,  209,  211,
      212,  213,  206,  203,  194,  199,  214,  201,  217,  219,
      220,  213,  195,  222,  221,  223,  208,  209,  224,  210,
      226,  228,  219,  212,  214,  211,  217,  221,  223,  231,
      222,  230,  220,  245,  244,  226,  243,  242,  228,  241,
      230,  224,  232,  229,  227,  225,  218,  216,  215,  207,
      205,  204,  231,  234,  234,  234,  234,  234,  234,  235,
      235,  235,  235,  235,  235,  236,  236,  236,  236,  236,
      236,  237,  237,  238,  238,  238,  239,  202,  200,  239,

      239,  239,  240,  240,  198,  240,  240,  240,  188,  187,
      178,  175,  174,  171,  169,  167,  166,  165,  159,  156,
      134,  114,  110,  108,  105,  104,  102,  100,   98,   97,
       96,   84,   79,   72,   70,   66,   64,   59,   58,   57,
       55,   54,   52,   50,   46,   45,   29,   12,   11,    9,
        7,    6,    5,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233

    } ;

static TWIN_dbg__state_type TWIN_dbg__last_accepting_state;
static char *TWIN_dbg__last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define TWIN_dbg_more() TWIN_dbg_more_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *TWIN_dbg_text;
#line 1 "debug.l"
#define INITIAL 0
/* Lexical scanner for command line parsing in the Wine debugger
 *
 * Modification history:
 *    9/93 Eric Youngdale	Original version
 *    6/95 Bob Amstadt		Added seg:off addressing,
 *				Added ability to create aliases
 *				
 */
#line 11 "debug.l"
#include <stdio.h>
#include <string.h>
#include "dbg.tab.h"
#include "regpos.h"
#include "windows.h"
#include "alias.h"

#ifdef USE_READLINE
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = dbg_read((char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#endif

char *force_parse_string;
int   force_exit = 0;
int   lex_syntax_error;
int   debug_parse_literal = 0;
int   debug_parse_restofline = 0;

extern char * readline(char *);
static char * make_symbol(char *);
void flush_symbols();
extern int GetAddress(int,int);
extern int TWIN_dbg_lval;
extern WORD native_cs;
extern WORD native_ds;
extern WORD native_ss;
extern unsigned int * regval;
extern FILE *debug_outfp;
extern FILE *init_file;
int dbg_read(char * , int );
void add_history (char *);

#define PARSELITERAL 1

#define ROL 2

#line 599 "lex.TWIN_dbg_.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int TWIN_dbg_wrap YY_PROTO(( void ));
#else
extern int TWIN_dbg_wrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void TWIN_dbg_unput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef TWIN_dbg_text_ptr
static void TWIN_dbg__flex_strncpy YY_PROTO(( char *, TWIN_dbg_const char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int TWIN_dbg__flex_strlen YY_PROTO(( TWIN_dbg_const char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int TWIN_dbg_input YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int TWIN_dbg__start_stack_ptr = 0;
static int TWIN_dbg__start_stack_depth = 0;
static int *TWIN_dbg__start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void TWIN_dbg__push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void TWIN_dbg__pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int TWIN_dbg__top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( TWIN_dbg_text, TWIN_dbg_leng, 1, TWIN_dbg_out )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( TWIN_dbg__current_buffer->TWIN_dbg__is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( TWIN_dbg_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( TWIN_dbg_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, TWIN_dbg_in )) == 0) \
		  && ferror( TWIN_dbg_in ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "TWIN_dbg_terminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef TWIN_dbg_terminate
#define TWIN_dbg_terminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) TWIN_dbg__fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int TWIN_dbg_lex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after TWIN_dbg_text and TWIN_dbg_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register TWIN_dbg__state_type TWIN_dbg__current_state;
	register char *TWIN_dbg__cp, *TWIN_dbg__bp;
	register int TWIN_dbg__act;

#line 55 "debug.l"


	if ( debug_parse_literal )
	    BEGIN(PARSELITERAL);
        else if ( debug_parse_restofline )
            BEGIN(ROL);
        else
	    BEGIN(INITIAL);

#line 760 "lex.TWIN_dbg_.c"

	if ( TWIN_dbg__init )
		{
		TWIN_dbg__init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! TWIN_dbg__start )
			TWIN_dbg__start = 1;	/* first start state */

		if ( ! TWIN_dbg_in )
			TWIN_dbg_in = stdin;

		if ( ! TWIN_dbg_out )
			TWIN_dbg_out = stdout;

		if ( ! TWIN_dbg__current_buffer )
			TWIN_dbg__current_buffer =
				TWIN_dbg__create_buffer( TWIN_dbg_in, YY_BUF_SIZE );

		TWIN_dbg__load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		TWIN_dbg__cp = TWIN_dbg__c_buf_p;

		/* Support of TWIN_dbg_text. */
		*TWIN_dbg__cp = TWIN_dbg__hold_char;

		/* TWIN_dbg__bp points to the position in TWIN_dbg__ch_buf of the start of
		 * the current run.
		 */
		TWIN_dbg__bp = TWIN_dbg__cp;

		TWIN_dbg__current_state = TWIN_dbg__start;
TWIN_dbg__match:
		do
			{
			register YY_CHAR TWIN_dbg__c = TWIN_dbg__ec[YY_SC_TO_UI(*TWIN_dbg__cp)];
			if ( TWIN_dbg__accept[TWIN_dbg__current_state] )
				{
				TWIN_dbg__last_accepting_state = TWIN_dbg__current_state;
				TWIN_dbg__last_accepting_cpos = TWIN_dbg__cp;
				}
			while ( TWIN_dbg__chk[TWIN_dbg__base[TWIN_dbg__current_state] + TWIN_dbg__c] != TWIN_dbg__current_state )
				{
				TWIN_dbg__current_state = (int) TWIN_dbg__def[TWIN_dbg__current_state];
				if ( TWIN_dbg__current_state >= 234 )
					TWIN_dbg__c = TWIN_dbg__meta[(unsigned int) TWIN_dbg__c];
				}
			TWIN_dbg__current_state = TWIN_dbg__nxt[TWIN_dbg__base[TWIN_dbg__current_state] + (unsigned int) TWIN_dbg__c];
			++TWIN_dbg__cp;
			}
		while ( TWIN_dbg__base[TWIN_dbg__current_state] != 454 );

TWIN_dbg__find_action:
		TWIN_dbg__act = TWIN_dbg__accept[TWIN_dbg__current_state];
		if ( TWIN_dbg__act == 0 )
			{ /* have to back up */
			TWIN_dbg__cp = TWIN_dbg__last_accepting_cpos;
			TWIN_dbg__current_state = TWIN_dbg__last_accepting_state;
			TWIN_dbg__act = TWIN_dbg__accept[TWIN_dbg__current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( TWIN_dbg__act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*TWIN_dbg__cp = TWIN_dbg__hold_char;
			TWIN_dbg__cp = TWIN_dbg__last_accepting_cpos;
			TWIN_dbg__current_state = TWIN_dbg__last_accepting_state;
			goto TWIN_dbg__find_action;

case 1:
YY_RULE_SETUP
#line 64 "debug.l"
{
                                 TWIN_dbg_lval = (int) make_symbol(TWIN_dbg_text); 
				 return LITERAL;
			     }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "debug.l"
{ 
				 TWIN_dbg_lval = (int) make_symbol(TWIN_dbg_text); 
				 return LITERAL;
			     }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 74 "debug.l"
{ 
                                 lex_syntax_error = 0; 
				 debug_parse_literal = 0;
				 debug_parse_restofline = 0;
				 return '\n';  /* Indicate end of command */
			     }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "debug.l"
{ return '+'; } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 83 "debug.l"
{ return '-'; } 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 85 "debug.l"
{ return '/'; } 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 87 "debug.l"
{ return '='; } 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "debug.l"
{ return '('; } 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 91 "debug.l"
{ return ')'; } 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "debug.l"
{ return '*'; } 
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "debug.l"
{ return HELP; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 97 "debug.l"
{ return ':'; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 99 "debug.l"
{ return '.'; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 101 "debug.l"
{ return ','; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 103 "debug.l"
{ return '!'; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 105 "debug.l"
{ return NOTEQUAL; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 107 "debug.l"
{ return '#'; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "debug.l"
{
    		int seg, off;
		sscanf(TWIN_dbg_text, "%x:%x", &seg, &off);
		TWIN_dbg_lval = GetAddress(seg, off);
		return NUM;
	        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "debug.l"
{
    		int off;
		sscanf(TWIN_dbg_text, "cs:%x", &off);
                if (SC_CS != native_cs)
                    TWIN_dbg_lval = GetAddress(SC_CS, off);
                else
                    TWIN_dbg_lval = off;
		return NUM;
	        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 126 "debug.l"
{
    		int off;
		sscanf(TWIN_dbg_text, "ds:%x", &off);
                if (SC_DS != native_ds)
                    TWIN_dbg_lval = GetAddress(SC_DS, off);
                else
                    TWIN_dbg_lval = off;
		return NUM;
	        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 136 "debug.l"
{
    		int off;
		sscanf(TWIN_dbg_text, "es:%x", &off);
                if (SC_ES != native_ds)
                    TWIN_dbg_lval = GetAddress(SC_ES, off);
                else
                    TWIN_dbg_lval = off;
		return NUM;
	        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "debug.l"
{
    		int off;
		sscanf(TWIN_dbg_text, "fs:%x", &off);
                if (SC_FS != native_ds)
                    TWIN_dbg_lval = GetAddress(SC_FS, off);
                else
                    TWIN_dbg_lval = off;
		return NUM;
	        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 156 "debug.l"
{
    		int off;
		sscanf(TWIN_dbg_text, "gs:%x", &off);
                if (SC_GS != native_ds)
                    TWIN_dbg_lval = GetAddress(SC_GS, off);
                else
                    TWIN_dbg_lval = off;
		return NUM;
	        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 166 "debug.l"
{
    		int off;
		sscanf(TWIN_dbg_text, "ss:%x", &off);
                if (SC_SS != native_ss)
                    TWIN_dbg_lval = GetAddress(SC_SS, off);
                else
                    TWIN_dbg_lval = off;
		return NUM;
	        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 176 "debug.l"
{
		sscanf(TWIN_dbg_text, "%x", &TWIN_dbg_lval);
		return NUM;
		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 181 "debug.l"
{
		sscanf(TWIN_dbg_text, "%d", &TWIN_dbg_lval);
		return NUM;
		}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 186 "debug.l"
{ TWIN_dbg_lval = RN_EIP; return REG;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 187 "debug.l"
{ TWIN_dbg_lval = RN_ESP; return REG;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 188 "debug.l"
{ TWIN_dbg_lval = RN_EIP; return REG;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 189 "debug.l"
{ TWIN_dbg_lval = RN_ESP; return REG;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 190 "debug.l"
{ TWIN_dbg_lval = RN_EBP; return REG;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 191 "debug.l"
{ TWIN_dbg_lval = RN_EAX; return REG;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 192 "debug.l"
{ TWIN_dbg_lval = RN_EBX; return REG;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 193 "debug.l"
{ TWIN_dbg_lval = RN_ECX; return REG;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 194 "debug.l"
{ TWIN_dbg_lval = RN_EDX; return REG;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 195 "debug.l"
{ TWIN_dbg_lval = RN_ESI; return REG;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 196 "debug.l"
{ TWIN_dbg_lval = RN_EDI; return REG;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 198 "debug.l"
{ TWIN_dbg_lval = RN_ES;  return REG;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 199 "debug.l"
{ TWIN_dbg_lval = RN_DS;  return REG;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 200 "debug.l"
{ TWIN_dbg_lval = RN_CS;  return REG;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 201 "debug.l"
{ TWIN_dbg_lval = RN_SS;  return REG;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 203 "debug.l"
{ return INFO; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 204 "debug.l"
{ return SEGMENTS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 205 "debug.l"
{ return BREAK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 206 "debug.l"
{ return ENABLE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 207 "debug.l"
{ return DISABLE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 208 "debug.l"
{ return MP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 209 "debug.l"
{ return DEL; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 210 "debug.l"
{ return MODULES; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 211 "debug.l"
{ return EXPORTS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 212 "debug.l"
{ return LIST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 213 "debug.l"
{ return ALL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 214 "debug.l"
{ return AUTO; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 215 "debug.l"
{ return ALIAS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 216 "debug.l"
{ return CONDITION; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 217 "debug.l"
{ return IF; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 218 "debug.l"
{ return TRACECMD; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 220 "debug.l"
{ return QUIT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 222 "debug.l"
{ return HELP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 224 "debug.l"
{ return SET; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 226 "debug.l"
{ return BACKTRACE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 228 "debug.l"
{ return CONT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 229 "debug.l"
{ return STEP; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 230 "debug.l"
{ return NEXT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 232 "debug.l"
{ return SYMBOLFILE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 234 "debug.l"
{ return DEFINE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 235 "debug.l"
{ return ABORT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 236 "debug.l"
{ return PRINT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 238 "debug.l"
{ return MODE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 240 "debug.l"
{ return REGS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 242 "debug.l"
{ return PARSEEXIT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 244 "debug.l"
{ return STACK; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 246 "debug.l"
{ return 'p'; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 247 "debug.l"
{ return 'x'; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 248 "debug.l"
{ return 'd'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 249 "debug.l"
{ return 'i'; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 250 "debug.l"
{ return 'w'; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 251 "debug.l"
{ return 'b'; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 252 "debug.l"
{ return 's'; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 253 "debug.l"
{ return 'c'; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 254 "debug.l"
{ return 'q'; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 255 "debug.l"
{ return 'n'; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 257 "debug.l"
{TWIN_dbg_lval = (int) make_symbol(TWIN_dbg_text); 
	          return IDENTIFIER;
	         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 261 "debug.l"
{ char *p;
    		  TWIN_dbg_lval = (int) make_symbol(TWIN_dbg_text+1); 
		  p = (char *) TWIN_dbg_lval;
		  p[strlen(p) - 1] = '\0';
	          return QUOTEDSTRING;
	         }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 268 "debug.l"
/* Eat up whitespace */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 270 "debug.l"
{ if(lex_syntax_error == 0) 
		  {
		      lex_syntax_error ++; 
		      fprintf(debug_outfp, "Syntax Error\n"); 
		  }
	        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 277 "debug.l"
ECHO;
	YY_BREAK
#line 1360 "lex.TWIN_dbg_.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSELITERAL):
case YY_STATE_EOF(ROL):
	TWIN_dbg_terminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int TWIN_dbg__amount_of_matched_text = (int) (TWIN_dbg__cp - TWIN_dbg_text_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*TWIN_dbg__cp = TWIN_dbg__hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( TWIN_dbg__current_buffer->TWIN_dbg__buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed TWIN_dbg_in at a new source and called
			 * TWIN_dbg_lex().  If so, then we have to assure
			 * consistency between TWIN_dbg__current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			TWIN_dbg__n_chars = TWIN_dbg__current_buffer->TWIN_dbg__n_chars;
			TWIN_dbg__current_buffer->TWIN_dbg__input_file = TWIN_dbg_in;
			TWIN_dbg__current_buffer->TWIN_dbg__buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for TWIN_dbg__c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since TWIN_dbg__c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( TWIN_dbg__c_buf_p <= &TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[TWIN_dbg__n_chars] )
			{ /* This was really a NUL. */
			TWIN_dbg__state_type TWIN_dbg__next_state;

			TWIN_dbg__c_buf_p = TWIN_dbg_text_ptr + TWIN_dbg__amount_of_matched_text;

			TWIN_dbg__current_state = TWIN_dbg__get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * TWIN_dbg__get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			TWIN_dbg__next_state = TWIN_dbg__try_NUL_trans( TWIN_dbg__current_state );

			TWIN_dbg__bp = TWIN_dbg_text_ptr + YY_MORE_ADJ;

			if ( TWIN_dbg__next_state )
				{
				/* Consume the NUL. */
				TWIN_dbg__cp = ++TWIN_dbg__c_buf_p;
				TWIN_dbg__current_state = TWIN_dbg__next_state;
				goto TWIN_dbg__match;
				}

			else
				{
				TWIN_dbg__cp = TWIN_dbg__c_buf_p;
				goto TWIN_dbg__find_action;
				}
			}

		else switch ( TWIN_dbg__get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				TWIN_dbg__did_buffer_switch_on_eof = 0;

				if ( TWIN_dbg_wrap() )
					{
					/* Note: because we've taken care in
					 * TWIN_dbg__get_next_buffer() to have set up
					 * TWIN_dbg_text, we can now set up
					 * TWIN_dbg__c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					TWIN_dbg__c_buf_p = TWIN_dbg_text_ptr + YY_MORE_ADJ;

					TWIN_dbg__act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! TWIN_dbg__did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				TWIN_dbg__c_buf_p =
					TWIN_dbg_text_ptr + TWIN_dbg__amount_of_matched_text;

				TWIN_dbg__current_state = TWIN_dbg__get_previous_state();

				TWIN_dbg__cp = TWIN_dbg__c_buf_p;
				TWIN_dbg__bp = TWIN_dbg_text_ptr + YY_MORE_ADJ;
				goto TWIN_dbg__match;

			case EOB_ACT_LAST_MATCH:
				TWIN_dbg__c_buf_p =
				&TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[TWIN_dbg__n_chars];

				TWIN_dbg__current_state = TWIN_dbg__get_previous_state();

				TWIN_dbg__cp = TWIN_dbg__c_buf_p;
				TWIN_dbg__bp = TWIN_dbg_text_ptr + YY_MORE_ADJ;
				goto TWIN_dbg__find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of TWIN_dbg_lex */


/* TWIN_dbg__get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int TWIN_dbg__get_next_buffer()
	{
	register char *dest = TWIN_dbg__current_buffer->TWIN_dbg__ch_buf;
	register char *source = TWIN_dbg_text_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( TWIN_dbg__c_buf_p > &TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[TWIN_dbg__n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( TWIN_dbg__current_buffer->TWIN_dbg__fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( TWIN_dbg__c_buf_p - TWIN_dbg_text_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (TWIN_dbg__c_buf_p - TWIN_dbg_text_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( TWIN_dbg__current_buffer->TWIN_dbg__buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		TWIN_dbg__current_buffer->TWIN_dbg__n_chars = TWIN_dbg__n_chars = 0;

	else
		{
		int num_to_read =
			TWIN_dbg__current_buffer->TWIN_dbg__buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = TWIN_dbg__current_buffer;

			int TWIN_dbg__c_buf_p_offset =
				(int) (TWIN_dbg__c_buf_p - b->TWIN_dbg__ch_buf);

			if ( b->TWIN_dbg__is_our_buffer )
				{
				int new_size = b->TWIN_dbg__buf_size * 2;

				if ( new_size <= 0 )
					b->TWIN_dbg__buf_size += b->TWIN_dbg__buf_size / 8;
				else
					b->TWIN_dbg__buf_size *= 2;

				b->TWIN_dbg__ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TWIN_dbg__flex_realloc( (void *) b->TWIN_dbg__ch_buf,
							 b->TWIN_dbg__buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->TWIN_dbg__ch_buf = 0;

			if ( ! b->TWIN_dbg__ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			TWIN_dbg__c_buf_p = &b->TWIN_dbg__ch_buf[TWIN_dbg__c_buf_p_offset];

			num_to_read = TWIN_dbg__current_buffer->TWIN_dbg__buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[number_to_move]),
			TWIN_dbg__n_chars, num_to_read );

		TWIN_dbg__current_buffer->TWIN_dbg__n_chars = TWIN_dbg__n_chars;
		}

	if ( TWIN_dbg__n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			TWIN_dbg_restart( TWIN_dbg_in );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			TWIN_dbg__current_buffer->TWIN_dbg__buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	TWIN_dbg__n_chars += number_to_move;
	TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[TWIN_dbg__n_chars] = YY_END_OF_BUFFER_CHAR;
	TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[TWIN_dbg__n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	TWIN_dbg_text_ptr = &TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[0];

	return ret_val;
	}


/* TWIN_dbg__get_previous_state - get the state just before the EOB char was reached */

static TWIN_dbg__state_type TWIN_dbg__get_previous_state()
	{
	register TWIN_dbg__state_type TWIN_dbg__current_state;
	register char *TWIN_dbg__cp;

	TWIN_dbg__current_state = TWIN_dbg__start;

	for ( TWIN_dbg__cp = TWIN_dbg_text_ptr + YY_MORE_ADJ; TWIN_dbg__cp < TWIN_dbg__c_buf_p; ++TWIN_dbg__cp )
		{
		register YY_CHAR TWIN_dbg__c = (*TWIN_dbg__cp ? TWIN_dbg__ec[YY_SC_TO_UI(*TWIN_dbg__cp)] : 1);
		if ( TWIN_dbg__accept[TWIN_dbg__current_state] )
			{
			TWIN_dbg__last_accepting_state = TWIN_dbg__current_state;
			TWIN_dbg__last_accepting_cpos = TWIN_dbg__cp;
			}
		while ( TWIN_dbg__chk[TWIN_dbg__base[TWIN_dbg__current_state] + TWIN_dbg__c] != TWIN_dbg__current_state )
			{
			TWIN_dbg__current_state = (int) TWIN_dbg__def[TWIN_dbg__current_state];
			if ( TWIN_dbg__current_state >= 234 )
				TWIN_dbg__c = TWIN_dbg__meta[(unsigned int) TWIN_dbg__c];
			}
		TWIN_dbg__current_state = TWIN_dbg__nxt[TWIN_dbg__base[TWIN_dbg__current_state] + (unsigned int) TWIN_dbg__c];
		}

	return TWIN_dbg__current_state;
	}


/* TWIN_dbg__try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = TWIN_dbg__try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static TWIN_dbg__state_type TWIN_dbg__try_NUL_trans( TWIN_dbg__state_type TWIN_dbg__current_state )
#else
static TWIN_dbg__state_type TWIN_dbg__try_NUL_trans( TWIN_dbg__current_state )
TWIN_dbg__state_type TWIN_dbg__current_state;
#endif
	{
	register int TWIN_dbg__is_jam;
	register char *TWIN_dbg__cp = TWIN_dbg__c_buf_p;

	register YY_CHAR TWIN_dbg__c = 1;
	if ( TWIN_dbg__accept[TWIN_dbg__current_state] )
		{
		TWIN_dbg__last_accepting_state = TWIN_dbg__current_state;
		TWIN_dbg__last_accepting_cpos = TWIN_dbg__cp;
		}
	while ( TWIN_dbg__chk[TWIN_dbg__base[TWIN_dbg__current_state] + TWIN_dbg__c] != TWIN_dbg__current_state )
		{
		TWIN_dbg__current_state = (int) TWIN_dbg__def[TWIN_dbg__current_state];
		if ( TWIN_dbg__current_state >= 234 )
			TWIN_dbg__c = TWIN_dbg__meta[(unsigned int) TWIN_dbg__c];
		}
	TWIN_dbg__current_state = TWIN_dbg__nxt[TWIN_dbg__base[TWIN_dbg__current_state] + (unsigned int) TWIN_dbg__c];
	TWIN_dbg__is_jam = (TWIN_dbg__current_state == 233);

	return TWIN_dbg__is_jam ? 0 : TWIN_dbg__current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void TWIN_dbg_unput( int c, register char *TWIN_dbg__bp )
#else
static void TWIN_dbg_unput( c, TWIN_dbg__bp )
int c;
register char *TWIN_dbg__bp;
#endif
	{
	register char *TWIN_dbg__cp = TWIN_dbg__c_buf_p;

	/* undo effects of setting up TWIN_dbg_text */
	*TWIN_dbg__cp = TWIN_dbg__hold_char;

	if ( TWIN_dbg__cp < TWIN_dbg__current_buffer->TWIN_dbg__ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = TWIN_dbg__n_chars + 2;
		register char *dest = &TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[
					TWIN_dbg__current_buffer->TWIN_dbg__buf_size + 2];
		register char *source =
				&TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[number_to_move];

		while ( source > TWIN_dbg__current_buffer->TWIN_dbg__ch_buf )
			*--dest = *--source;

		TWIN_dbg__cp += (int) (dest - source);
		TWIN_dbg__bp += (int) (dest - source);
		TWIN_dbg__current_buffer->TWIN_dbg__n_chars =
			TWIN_dbg__n_chars = TWIN_dbg__current_buffer->TWIN_dbg__buf_size;

		if ( TWIN_dbg__cp < TWIN_dbg__current_buffer->TWIN_dbg__ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--TWIN_dbg__cp = (char) c;


	TWIN_dbg_text_ptr = TWIN_dbg__bp;
	TWIN_dbg__hold_char = *TWIN_dbg__cp;
	TWIN_dbg__c_buf_p = TWIN_dbg__cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int TWIN_dbg_input()
#else
static int input()
#endif
	{
	int c;

	*TWIN_dbg__c_buf_p = TWIN_dbg__hold_char;

	if ( *TWIN_dbg__c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* TWIN_dbg__c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( TWIN_dbg__c_buf_p < &TWIN_dbg__current_buffer->TWIN_dbg__ch_buf[TWIN_dbg__n_chars] )
			/* This was really a NUL. */
			*TWIN_dbg__c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = TWIN_dbg__c_buf_p - TWIN_dbg_text_ptr;
			++TWIN_dbg__c_buf_p;

			switch ( TWIN_dbg__get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because TWIN_dbg__g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					TWIN_dbg_restart( TWIN_dbg_in );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( TWIN_dbg_wrap() )
						return EOF;

					if ( ! TWIN_dbg__did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return TWIN_dbg_input();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					TWIN_dbg__c_buf_p = TWIN_dbg_text_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) TWIN_dbg__c_buf_p;	/* cast for 8-bit char's */
	*TWIN_dbg__c_buf_p = '\0';	/* preserve TWIN_dbg_text */
	TWIN_dbg__hold_char = *++TWIN_dbg__c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void TWIN_dbg_restart( FILE *input_file )
#else
void TWIN_dbg_restart( input_file )
FILE *input_file;
#endif
	{
	if ( ! TWIN_dbg__current_buffer )
		TWIN_dbg__current_buffer = TWIN_dbg__create_buffer( TWIN_dbg_in, YY_BUF_SIZE );

	TWIN_dbg__init_buffer( TWIN_dbg__current_buffer, input_file );
	TWIN_dbg__load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void TWIN_dbg__switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void TWIN_dbg__switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( TWIN_dbg__current_buffer == new_buffer )
		return;

	if ( TWIN_dbg__current_buffer )
		{
		/* Flush out information for old buffer. */
		*TWIN_dbg__c_buf_p = TWIN_dbg__hold_char;
		TWIN_dbg__current_buffer->TWIN_dbg__buf_pos = TWIN_dbg__c_buf_p;
		TWIN_dbg__current_buffer->TWIN_dbg__n_chars = TWIN_dbg__n_chars;
		}

	TWIN_dbg__current_buffer = new_buffer;
	TWIN_dbg__load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (TWIN_dbg_wrap()) processing, but the only time this flag
	 * is looked at is after TWIN_dbg_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	TWIN_dbg__did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void TWIN_dbg__load_buffer_state( void )
#else
void TWIN_dbg__load_buffer_state()
#endif
	{
	TWIN_dbg__n_chars = TWIN_dbg__current_buffer->TWIN_dbg__n_chars;
	TWIN_dbg_text_ptr = TWIN_dbg__c_buf_p = TWIN_dbg__current_buffer->TWIN_dbg__buf_pos;
	TWIN_dbg_in = TWIN_dbg__current_buffer->TWIN_dbg__input_file;
	TWIN_dbg__hold_char = *TWIN_dbg__c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE TWIN_dbg__create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE TWIN_dbg__create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) TWIN_dbg__flex_alloc( sizeof( struct TWIN_dbg__buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in TWIN_dbg__create_buffer()" );

	b->TWIN_dbg__buf_size = size;

	/* TWIN_dbg__ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->TWIN_dbg__ch_buf = (char *) TWIN_dbg__flex_alloc( b->TWIN_dbg__buf_size + 2 );
	if ( ! b->TWIN_dbg__ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in TWIN_dbg__create_buffer()" );

	b->TWIN_dbg__is_our_buffer = 1;

	TWIN_dbg__init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void TWIN_dbg__delete_buffer( YY_BUFFER_STATE b )
#else
void TWIN_dbg__delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == TWIN_dbg__current_buffer )
		TWIN_dbg__current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->TWIN_dbg__is_our_buffer )
		TWIN_dbg__flex_free( (void *) b->TWIN_dbg__ch_buf );

	TWIN_dbg__flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void TWIN_dbg__init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void TWIN_dbg__init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	TWIN_dbg__flush_buffer( b );

	b->TWIN_dbg__input_file = file;
	b->TWIN_dbg__fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->TWIN_dbg__is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->TWIN_dbg__is_interactive = 0;
#else
	b->TWIN_dbg__is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void TWIN_dbg__flush_buffer( YY_BUFFER_STATE b )
#else
void TWIN_dbg__flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->TWIN_dbg__n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->TWIN_dbg__ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->TWIN_dbg__ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->TWIN_dbg__buf_pos = &b->TWIN_dbg__ch_buf[0];

	b->TWIN_dbg__at_bol = 1;
	b->TWIN_dbg__buffer_status = YY_BUFFER_NEW;

	if ( b == TWIN_dbg__current_buffer )
		TWIN_dbg__load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE TWIN_dbg__scan_buffer( char *base, TWIN_dbg__size_t size )
#else
YY_BUFFER_STATE TWIN_dbg__scan_buffer( base, size )
char *base;
TWIN_dbg__size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) TWIN_dbg__flex_alloc( sizeof( struct TWIN_dbg__buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in TWIN_dbg__scan_buffer()" );

	b->TWIN_dbg__buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->TWIN_dbg__buf_pos = b->TWIN_dbg__ch_buf = base;
	b->TWIN_dbg__is_our_buffer = 0;
	b->TWIN_dbg__input_file = 0;
	b->TWIN_dbg__n_chars = b->TWIN_dbg__buf_size;
	b->TWIN_dbg__is_interactive = 0;
	b->TWIN_dbg__at_bol = 1;
	b->TWIN_dbg__fill_buffer = 0;
	b->TWIN_dbg__buffer_status = YY_BUFFER_NEW;

	TWIN_dbg__switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE TWIN_dbg__scan_string( TWIN_dbg_const char *TWIN_dbg__str )
#else
YY_BUFFER_STATE TWIN_dbg__scan_string( TWIN_dbg__str )
TWIN_dbg_const char *TWIN_dbg__str;
#endif
	{
	int len;
	for ( len = 0; TWIN_dbg__str[len]; ++len )
		;

	return TWIN_dbg__scan_bytes( TWIN_dbg__str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE TWIN_dbg__scan_bytes( TWIN_dbg_const char *bytes, int len )
#else
YY_BUFFER_STATE TWIN_dbg__scan_bytes( bytes, len )
TWIN_dbg_const char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	TWIN_dbg__size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) TWIN_dbg__flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in TWIN_dbg__scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = TWIN_dbg__scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in TWIN_dbg__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->TWIN_dbg__is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void TWIN_dbg__push_state( int new_state )
#else
static void TWIN_dbg__push_state( new_state )
int new_state;
#endif
	{
	if ( TWIN_dbg__start_stack_ptr >= TWIN_dbg__start_stack_depth )
		{
		TWIN_dbg__size_t new_size;

		TWIN_dbg__start_stack_depth += YY_START_STACK_INCR;
		new_size = TWIN_dbg__start_stack_depth * sizeof( int );

		if ( ! TWIN_dbg__start_stack )
			TWIN_dbg__start_stack = (int *) TWIN_dbg__flex_alloc( new_size );

		else
			TWIN_dbg__start_stack = (int *) TWIN_dbg__flex_realloc(
					(void *) TWIN_dbg__start_stack, new_size );

		if ( ! TWIN_dbg__start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	TWIN_dbg__start_stack[TWIN_dbg__start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void TWIN_dbg__pop_state()
	{
	if ( --TWIN_dbg__start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(TWIN_dbg__start_stack[TWIN_dbg__start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int TWIN_dbg__top_state()
	{
	return TWIN_dbg__start_stack[TWIN_dbg__start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void TWIN_dbg__fatal_error( TWIN_dbg_const char msg[] )
#else
static void TWIN_dbg__fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine TWIN_dbg_less() so it works in section 3 code. */

#undef TWIN_dbg_less
#define TWIN_dbg_less(n) \
	do \
		{ \
		/* Undo effects of setting up TWIN_dbg_text. */ \
		TWIN_dbg_text[TWIN_dbg_leng] = TWIN_dbg__hold_char; \
		TWIN_dbg__c_buf_p = TWIN_dbg_text + n; \
		TWIN_dbg__hold_char = *TWIN_dbg__c_buf_p; \
		*TWIN_dbg__c_buf_p = '\0'; \
		TWIN_dbg_leng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef TWIN_dbg_text_ptr
#ifdef YY_USE_PROTOS
static void TWIN_dbg__flex_strncpy( char *s1, TWIN_dbg_const char *s2, int n )
#else
static void TWIN_dbg__flex_strncpy( s1, s2, n )
char *s1;
TWIN_dbg_const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int TWIN_dbg__flex_strlen( TWIN_dbg_const char *s )
#else
static int TWIN_dbg__flex_strlen( s )
TWIN_dbg_const char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *TWIN_dbg__flex_alloc( TWIN_dbg__size_t size )
#else
static void *TWIN_dbg__flex_alloc( size )
TWIN_dbg__size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *TWIN_dbg__flex_realloc( void *ptr, TWIN_dbg__size_t size )
#else
static void *TWIN_dbg__flex_realloc( ptr, size )
void *ptr;
TWIN_dbg__size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void TWIN_dbg__flex_free( void *ptr )
#else
static void TWIN_dbg__flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	TWIN_dbg_lex();
	return 0;
	}
#endif
#line 277 "debug.l"


#ifndef TWIN_dbg_wrap
int TWIN_dbg_wrap(void) { return 1; }
#endif

#ifndef whitespace
#define whitespace(c) (((c) == ' ') || ((c) == '\t'))

/* Strip whitespace from the start and end of STRING. */
static void stripwhite (char *string)
{
    register int i = 0;

    while (whitespace (string[i]))
	i++;

    if (i)
	strcpy (string, string + i);

    i = strlen (string) - 1;

    while (i > 0 && whitespace (string[i]))
	i--;

    string[++i] = '\0';
}

int
dbg_read(char * buf, int size)
{
    char aliasbuf[MAX_ALIAS_LENGTH + 1];
    char *line;
    char *p;
    char *replace;
    int i;

    do
    {
	debug_parse_literal = 0;
	flush_symbols();
	if (force_parse_string)
	{
	    line = force_parse_string;
	    force_parse_string = NULL;
	}
	else if (force_exit)
	{
	    line = (char *) strdup("parseexit\n");
	    force_exit = 0;
	}
	else if (init_file)
	{
	    line = (char *) malloc(256);
	    if (fgets(line, 256, init_file) == NULL)
	    {
		strcpy(line, "parseexit\n");
		fclose(init_file);
		init_file = NULL;
	    }
	}
	    
	else
	{
	    line = readline ("dbg> ");
	}
	
	if (!line)
	    return 0;
	else
	{
	    /* Remove leading and trailing whitespace from the line.
	       Then, if there is anything left, add it to the history list
	       and execute it. */
	    stripwhite (line);
	    
	    if (*line)
	    {
		add_history (line);

		/* Is there an alias at the beginning of the line? */
		for (i = 0, p = line; 
		     *p && !whitespace(*p) && i < MAX_ALIAS_LENGTH;
		     i++)
		{
		    aliasbuf[i] = *p++;
		}
		aliasbuf[i] = '\0';

		if (i < MAX_ALIAS_LENGTH && 
		    (replace = alias_substitute(aliasbuf)))
		{
		    if (strlen(replace) + strlen(p) + 1 > size)
		    {
			fprintf(debug_outfp,"Fatal readline goof.\n");
			exit(0);
		    }

		    strcpy(buf, replace);
		    if (*p)
			strcat(buf, p);
		}
		else
		{
		    if (strlen(line) + 1 > size)
		    {
			fprintf(debug_outfp,"Fatal readline goof.\n");
			exit(0);
		    }
		    strcpy(buf, line);
		}

		i = strlen(buf);
		buf[i] = '\n';
		buf[i+1] = '\0';
		free(line);
		return strlen(buf);
	    }
	}
	
    } 
    while (1==1);
}

static char *local_symbols[10];
static int next_symbol;

char *make_symbol(char *symbol)
{
    return local_symbols[next_symbol++] = (char *) strdup(symbol);
}

void flush_symbols()
{
    while(--next_symbol>= 0) 
	free(local_symbols[next_symbol]);
    next_symbol = 0;
}

#endif
