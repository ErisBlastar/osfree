name: FOR
de: Repeat a command
req: CMD_FOR

SYNOPSIS:
EBNF: FOR '%' letter IN '(' { word | pattern } ')' DO <<any command>>

Executes
EBNF!: <<any command>>
 for several values assigned to
the variable <ARG>letter</ARG>. The values are read strictly left to right
from the <ARG>word</ARG>s and <ARG>pattern</ARG>s enclosed in
parenthises; where <ARG>pattern</ARG>s are words containing
wildcards and are replaced by all matching filenames.
<P>Any occurence of a percent sign <TT>%</TT> and the specified letter
is replaced by the current value of the FOR loop. <EM>Note:</EM> The
letter is case-sensitively matched!

<P><STRONG>Warning #1</STRONG>: Unlike most commands
<A HREF="!:redirection">I/O-redirections</A> are passed forth to the
command instead of to apply them to FOR itself, e.g.:<BR>
CMD: FOR %a IN (*.*) DO ECHO %a >q
repeatedly executes the ECHO command with the redirection <CMD>>q</CMD>,
hence, effectively overwriting the file each time.

<BR><STRONG>Warning #2</STRONG>: Due the syntactical problem that the
FOR variable is specified as 
EBNF!: '%' letter
, which is also
a legal start of an environment variable, the following kludge had
been included to support FOR and its special variables:
<UL>
<LI>You can use as many percent character as you wish as long as you
use exactly the same number for a particular FOR variable.
<LI>Before any environment variables are expanded, the command line
is checked for the skeleton specified within the synopsis (there must
not be specified no redirection between the FOR and DO keywords), if
it is found, the FOR command is executed <EM>without</EM> expanding
any environment variables -- they get expanded each time the
command is invoked.
<LI><STRONG><FONT SIZE="+1">Known Bug</FONT></STRONG>: Otherwise any
environment variables are expanded and, if it happens
that a valid FOR command is found now, the environment variables within
the command are expanded a second time.
In this case the I/O redirections are applied to FOR, too, instead of
passing them forth to the command.
<LI>FOR commands as part of the command of CALL, IF, and FOR itself are
never found before expanding the environment variables.
</UL>

<BR><STRONG>Warning #3</STRONG>: Due a bug in MS COMMAND (BugID #1050) the right
parenthesis <STRONG>must</STRONG> be followed by at least one whitespace,
this allows the "<EM>feature</EM>" to embed such characters within the
words and patterns, e.g.:<BR>
CMD: FOR %a in (a()a b()b) DO command
executes the <CMD>command</CMD> two times, first replacing <CMD>%a</CMD>
by <CMD>a()a</CMD>, second by <CMD>b()b</CMD>.

EXAMPLES:
EXAMPLE: 1
CMD: FOR %z IN (*.*) DO copy %a a:

Performs a <CMD>COPY xyz A:</CMD> command for each file in the current
directory. Its behaviour is equal to <CMD>COPY *.* A:</CMD>

EXAMPLE: 2
CMD: FOR %z IN (a?b*.TXT) DO CALL batch arg %z

Executes the batch script <CMD>batch.bat</CMD> for each file matching
the pattern <TT>A?B*.TXT</TT> located in the current directory. Within the
script, the automatic variable <ARG>%1</ARG> always expands to the constant
argument <ARG>arg</ARG>, whereas <ARG>%2</ARG> expands to the filename
of the current loop.

EXAMPLE: 3
CMD: FOR %a IN (1 2 3 4 5) DO ECHO %a

Is equal to the command sequence:<BR>
CMD: ECHO 1
CMD: ECHO 2
CMD: ECHO 3
CMD: ECHO 4
CMD: ECHO 5

Because these words do <EM>not</EM> contain no wildcards, they are <EM>not</EM>
matched as filenames.

EXAMPLE: 4
CMD: FOR %g IN (1 2 3*) DO ECHO %g

Performs the commands:<BR>
CMD: ECHO 1
CMD: ECHO 2

and the ECHO command for each file in the current directory, that has no
extension and which name starts with the digit three.
