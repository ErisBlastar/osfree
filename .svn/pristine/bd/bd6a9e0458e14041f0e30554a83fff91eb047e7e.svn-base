<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="en">
<META NAME="GENERATOR" CONTENT="VI">
<META NAME="DESCRIPTION" CONTENT="Description of features and implementation status of FreeCOM, the COMMAND.COM replacement">
<META NAME="AUTHOR" CONTENT="Steffen Kaiser">
<META NAME="KEYWORDS" CONTENT="DOS, FreeDOS, FreeCOM, COMMAND.COM, CLI">
<META NAME="DATE" CONTENT="2001-02-06">
<TITLE>Internal Commands of FreeCOM</TITLE>
</HEAD>

<BODY>
List of commands and features of FreeCOM:
<UL>
<LI><A HREF="#alias">ALIAS - Display or change an alias</A>
<LI><A HREF="#beep">BEEP - Issue a Beep</A>
<LI><A HREF="#break">BREAK - Display or Set Extended Break Checking</A>
<LI><A HREF="#call">CALL - Call a Nested Batchfile or Program</A>
<LI><A HREF="#cd">CD - Change current directory of a drive</A>
<LI><A HREF="#cdd">CDD - Changes the current working directory</A>
<LI><A HREF="#chdir">CHDIR - Change current directory of a drive</A>
<LI><A HREF="#cls">CLS - Clear screen</A>
<LI><A HREF="#copy">COPY - Copy one or more files to another location</A>
<LI><A HREF="#ctty">CTTY - Change TTY (console)</A>
<LI><A HREF="#date">DATE - Display or set current date</A>
<LI><A HREF="#del">DEL - Delete files</A>
<LI><A HREF="#dir">DIR - Displays the contents of the directory</A>
<LI><A HREF="#dirs">DIRS - Display the directory stack</A>
<LI><A HREF="#echo">ECHO - Displays a string onto screen</A>
<LI><A HREF="#erase">ERASE - Delete files</A>
<LI><A HREF="#exit">EXIT - Terminate shell</A>
<LI><A HREF="#for">FOR - Repeat a command</A>
<LI><A HREF="#goto">GOTO - Goto label</A>
<LI><A HREF="#if">IF - Conditional execution of a command</A>
<LI><A HREF="#loadfix">LOADFIX - Load an external program above the first 64KB memory</A>
<LI><A HREF="#loadhigh">LOADHIGH - Load an external program into high memory</A>
<LI><A HREF="#md">MD - make directory</A>
<LI><A HREF="#memory">MEMORY - Display the internally used memory</A>
<LI><A HREF="#mkdir">MKDIR - Make directory</A>
<LI><A HREF="#path">PATH - Display or set the search path</A>
<LI><A HREF="#pause">PAUSE - Pauses batch file execution</A>
<LI><A HREF="#popd">POPD - Change back to the last pushed directory</A>
<LI><A HREF="#prompt">PROMPT - Display or set the shell prompt</A>
<LI><A HREF="#pushd">PUSHD - Push the current working directory onto the directory stack</A>
<LI><A HREF="#rd">RD - Remove directory</A>
<LI><A HREF="#rem">REM - Marks comments or remarks in batchfiles</A>
<LI><A HREF="#ren">REN - Rename files</A>
<LI><A HREF="#rename">RENAME - Rename files</A>
<LI><A HREF="#rmdir">RMDIR - Remove directory</A>
<LI><A HREF="#set">SET - Display or set environment variables</A>
<LI><A HREF="#shift">SHIFT - Shift the arguments of a batch script</A>
<LI><A HREF="#time">TIME - Display or set current time</A>
<LI><A HREF="#truename">TRUENAME - Display the true name of a file</A>
<LI><A HREF="#type">TYPE - Display the contents of files</A>
<LI><A HREF="#ver">VER - Display the version information about FreeCOM and DOS</A>
<LI><A HREF="#verify">VERIFY - Display or set verify level</A>
<LI><A HREF="#vol">VOL - Display the volume label of a drive</A>
<LI><A HREF="#which">WHICH - Search and display the executable file of specified commands</A>
</UL>
<BR><BR><HR><BR>
<H2><A NAME="alias">ALIAS - Display or change an alias</H2>
Requirements: FEATURE_ALIAS<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>ALIAS</TT> <BR>

<LI>
 <TT>ALIAS</TT>  <I>name</I>  <TT>'='</TT>  <B>[</B>  &laquo;string&raquo;  <B>]</B> <BR>

</OL>

<P>


The first format without any argument displays all defined aliases.

<P>The second format assigns the specified <TT><I>string</I></TT> to the alias with
the specified <TT><I>name</I></TT>. If the <TT><I>string</I></TT> is empty, the named
alias is removed.

<P>Once an aliase is defined, a command line of the form:

<TT> name { argument }</TT><BR>
is replaced by:

<TT> <<string>> { argument }</TT><BR>
This mechanism is called <EM>alias expansion</EM>, because the alias
<TT><I>name</I></TT> expands to the specified <EBNF><<string>></EBNF>. To
prevent alias expansion the command must be prefixed by one asterisk,
e.g.:

<TT> *name arguments</TT><BR>


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#alias">ALIAS</A></TT> dir=dir /w</TT><BR>

<TT> dir</TT><BR>
displays short directory listing from now on.


<H4>Example: 2</H4>


<TT> <TT><A HREF="#alias">ALIAS</A></TT></TT><BR>
displays all currently defined aliases, e.g.:
<PRE><TT><A HREF="#dir">DIR</A></TT>=dir /w</PRE>
in this case.


<H4>Example: 3</H4>


<TT> <TT><A HREF="#alias">ALIAS</A></TT> dir=</TT><BR>
removes the previously defined alias <TT>dir</TT>, thus, <TT><A HREF="#dir">DIR</A></TT> displays
the long output as by default again.
<P><HR>
<H2><A NAME="beep">BEEP - Issue a Beep</H2>
Requirements: CMD_BEEP<BR>

<H3>Synopsis</H3>

 <TT>BEEP</TT> <BR>


<P>


Issues a beep.
<BR>At this time FreeCOM supports audible beeps only.
<P><HR>
<H2><A NAME="break">BREAK - Display or Set Extended Break Checking</H2>
Requirements: CMD_BREAK<BR>

<H3>Synopsis</H3>

 <TT>BREAK</TT>  <B>[</B>  <TT>ON</TT>  |  <TT>OFF</TT>  <B>]</B> <BR>


<P>


Displays or sets the Extended Break status.
<P>By pressing ^Break or ^C (Control-Break or Control-C) an user
may signal the currently running program to halt. Most programs will
abort to the prompt, but some may decide to just cancel the current
action, but remain active.
<P>DOS checks for ^Break/^C (Control-Break or Crontrol-C) each time
a program issues a console input/output request. When Extended Break
checking is enabled (<EM>ON</EM>), DOS checks for ^Break each time
a program issues a request.
<P><HR>
<H2><A NAME="call">CALL - Call a Nested Batchfile or Program</H2>
See also: <A HREF="#loadfix">LOADFIX</A>, <A HREF="#loadhigh">LOADHIGH</A><BR>
Optional requirements: FEATURE_KERNEL_SWAP_SHELL<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>CALL</TT>  <I>program</I>  <B>[</B>  &laquo;arguments&raquo;  <B>]</B> <BR>

<LI>
 <TT>CALL</TT>  <B>/S</B>  <I>program</I>  <B>[</B>  &laquo;arguments&raquo;  <B>]</B> <BR>

</OL>

<P>


Calls a program or batch script.

<P>If the <TT><I>program</I></TT> is a <A HREF="#_appendix_batch">batch script</A>,
that means it has the
extension <TT>.BAT</TT>, <TT><TT><A HREF="#call">CALL</A></TT></TT> nests the batch script within
the already running one. Without <TT><TT><A HREF="#call">CALL</A></TT></TT> the invoked batch
script would terminate all already running batch scripts.
<P>If present, the arguments are passed unchanged to the invoked program.


<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.

<UL>
<LI><TT><B>/S</B></TT>: If <TT><I>program</I></TT> is not a batch script, the external
program is executed by swapping FreeCOM out of memory. This process will
require more time, especially if FreeCOM is to be reloaded from a floppy,
some internal settings are lost, e.g. command line history, but it will
free as much memory as possible for the external program.
<P>This option and, thereby, this function is available only, if FreeCOM
had been compiled with some support for swapping.
</UL>

<P>Note: In the future to swap FreeCOM out of memory during the execution
of an external program will be the default behaviour.
<P><HR>
<H2><A NAME="cd">CD - Change current directory of a drive</H2>
See also: <A HREF="#cdd">CDD</A>, <A HREF="#chdir">CHDIR</A>, <A HREF="#dir">DIR</A>, <A HREF="#dirs">DIRS</A>, <A HREF="#md">MD</A>, <A HREF="#mkdir">MKDIR</A>, <A HREF="#pushd">PUSHD</A>, <A HREF="#rd">RD</A>, <A HREF="#rmdir">RMDIR</A><BR>
Requirements: CMD_CHDIR<BR>
Optional requirements: FEATURE_LAST_DIR<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>CD</TT> <BR>

<LI>
 <TT>CD</TT>  <B>[</B>  <I>drive</I>  <TT>':'</TT>  <B>]</B>  <I>path</I> <BR>

<LI>
 <TT>CD</TT>  <TT>'-'</TT> <BR>

</OL>

<TT><TT><A HREF="#cd">CD</A></TT></TT> is 100% compatible with the <TT><TT><A HREF="#chdir">CHDIR</A></TT></TT> command; there
is no difference -- beside the spelling -- between them.

<P>The first variant shows the <A HREF="#_appendix_cwd">current working
directory</A> as absolute path.

<P>The second variant changes the <A HREF="#_appendix_currdir">current
directory</A> of the given drive.  If no drive is specified on command
line, the current directory of the <A HREF="#chgdrive">currently
selected drive (disk)</A> is changed.  This command does
<STRONG>not</STRONG> change the currently selected drive in opposite to
<TT><TT><A HREF="#cdd">CDD</A></TT></TT>!

<P>The third variant changes back into the last visited directory
<STRONG>and</STRONG> drive.  The commands <TT><TT><A HREF="#cd">CD</A></TT></TT>,
<TT><TT><A HREF="#chdir">CHDIR</A></TT></TT>, <TT><TT><A HREF="#cdd">CDD</A></TT></TT>, and <TT><TT><A HREF="#pushd">PUSHD</A></TT></TT> save the current
working directory before performing the specified directory change; the
command <TT><TT><A HREF="#cd">CD</A></TT> '-'</TT> restores this saved directory. This command is
available only, if the feature LAST_DIR has been enabled during the
compilation of FreeCOM.


<H3>Options</H3>

There are no options for this command.


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#cd">CD</A></TT> \freedos\help</TT><BR>

Changes the current working directory of the currently selected drive to
the path <TT>\FREEDOS\HELP</TT>.


<H4>Example: 2</H4>


<TT> <TT><A HREF="#cd">CD</A></TT> c:\freedos\help</TT><BR>

Changes the current directory of drive <TT>C:</TT>.


<H4>Example: 3</H4>

Assuming the current working directory is <TT>\FREEDOS\HELP</TT> and
the currently selected drive is <TT>C:</TT>.


<TT> <TT><A HREF="#cd">CD</A></TT> </TT><BR>

Displays <TT>C:\FREEDOS\HELP</TT>


<H4>Example: 3</H4>

The command sequence, provided the first two worked successfully:<BR>

<TT> <TT><A HREF="#cd">CD</A></TT> \FREEDOS\HELP</TT><BR>

<TT> <TT><A HREF="#cd">CD</A></TT> ..</TT><BR>

<TT> <TT><A HREF="#cd">CD</A></TT> -</TT><BR>

changes first into the directory <TT>\FREEDOS\HTLP</TT>, then into
its parent directory, which is <TT>\FREECOM</TT>. And finally
<TT><TT><A HREF="#cd">CD</A></TT> -</TT> changes back to <TT>\FREEDOS\HELP</TT>, because this
was the previous directory before previous <TT><TT><A HREF="#cd">CD</A></TT></TT>-like command.
<P>Because <TT><TT><A HREF="#cd">CD</A></TT> -</TT> saves the previous directory, too, any
subsequent:

<TT> <TT><A HREF="#cd">CD</A></TT> -</TT><BR>
will switch between these two directories; until another directory is
changed to.
<P><HR>
<H2><A NAME="cdd">CDD - Changes the current working directory</H2>
See also: <A HREF="#cd">CD</A>, <A HREF="#chdir">CHDIR</A>, <A HREF="#dir">DIR</A>, <A HREF="#md">MD</A>, <A HREF="#mkdir">MKDIR</A>, <A HREF="#pushd">PUSHD</A>, <A HREF="#rd">RD</A>, <A HREF="#rmdir">RMDIR</A><BR>
Requirements: CMD_CDD<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>CDD</TT> <BR>

<LI>
 <TT>CDD</TT>  <B>[</B>  <I>drive</I>  <TT>':'</TT>  <B>]</B>  <I>path</I> <BR>

<LI>
 <TT>CDD</TT>  <TT>'-'</TT> <BR>

</OL>

The behaviour of <TT><TT><A HREF="#cdd">CDD</A></TT></TT> is similiar to the <TT><TT><A HREF="#cd">CD</A></TT></TT>
command, but it always changes both the currently selected drive and
the current directory, thus, it changes the current working directory.

<P>For further details please see the <TT><TT><A HREF="#cd">CD</A></TT></TT> command.
<P><HR>
<H2><A NAME="chdir">CHDIR - Change current directory of a drive</H2>
This command is 100% compatible to <A HREF="#cd">CD</A>, please see there
<P><HR>
<H2><A NAME="cls">CLS - Clear screen</H2>
See also: <A HREF="#echo">ECHO</A>, <A HREF="#type">TYPE</A><BR>
Requirements: CMD_CLS<BR>

<H3>Synopsis</H3>

 <TT>CLS</TT> <BR>


Clears the screen and resets the character colours to
white on black.
<P><HR>
<H2><A NAME="copy">COPY - Copy one or more files to another location</H2>
See also: <A HREF="#del">DEL</A>, <A HREF="#ren">REN</A><BR>
Requirements: CMD_COPY<BR>

<H3>Synopsis</H3>


<OL>
<LI>
 <TT>COPY</TT>  <B>[{</B>  <I>option</I>  <B>}]</B>  <I>source</I>  <B>[{</B>  <I>option</I>  <B>}]</B>  <I>target</I>  <B>[{</B>  <I>option</I>  <B>}]</B> <BR>

</OL>

Copies the source file into the target file. See also: \REF{wildcards}


<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.

<UL>
<LI><TT><B>/A</B></TT> see below
<LI><TT><B>/B</B></TT>: Specifies the mode, in which the file is copied,
	<TT><B>/A</B></TT> forces ASCII
	and <TT><B>/B</B></TT> forces binary mode.
	<P>These options do alter the mode of the file immediately
	preceeding them and all following ones, until changed again.
	<P>In binary mode the file is copied and nothing is changed at all.
	<P>In ASCII mode <TT><A HREF="#copy">COPY</A></TT> takes special care about linefeeds / newline
	characters and the end-of-line character.
	<UL>
	<LI>On read, the newline characters, which are a sequence of two
	different bytes in DOS, are transformed into a single character, as
	known from Unix-style systems. On write, this single character is
	transformed into the two-byte sequence.
	<BR>So, if both files are copied with different modes, newline
	characters are transformed into either way.
	<LI>If the end-of-file character is found on read, the remaining
	contents of the file is ignored. On write, such character is appended
	after the last character has been written.
	</UL>
	By default, files are copied in binary mode, whereas devices, e.g.
	<TT>CON:<TT>, are copied in ASCII mode, but no end-of-file is appended.
</UL>


<H3>Arguments</H3>

<UL>
<LI><TT><I>source</I></TT>: The source file.
	<BR>If more than one source file is specified, the target must be
	a directory.

<LI><TT><I>target</I></TT>: The target of the <TT><TT><A HREF="#copy">COPY</A></TT><TT> process.
	<BR>If target is a directory, the destination file is placed into this
	directory, but with the same filename as the source file.
	<BR>If exactly one source is specified, but no target, target defaults
	to just <TT>.</TT>, which represant the current directory.

</UL>
<P><HR>
<H2><A NAME="ctty">CTTY - Change TTY (console)</H2>
Requirements: CMD_CTTY<BR>

<H3>Synopsis</H3>

 <TT>CTTY</TT>  <I>device</I> <BR>


With this command the console device can be changed. A console device performs
all basic input and output operations. This change is more complete
than <A HREF="#_appendix_redirection">IO-redirections</A>, because they might
not catch all output, for instance the error messages. See example 3 below.
<BR>Because the console is a bidirectional virtual device, meaning it
is to perform input <STRONG>and</STRONG> output, the specified
<TT><I>device</I></TT> must not a unidirectional device, such as <TT>PRN</TT>.
<P>To specify a second argument on the command line of FreeCOM has the
same effect.
<P><STRONG>Attention</STRONG>: This command is to effect the whole system,
not only FreeCOM itself; so the effect of <TT><A HREF="#ctty">CTTY</A></TT> does not only depend on the
implementation status of FreeCOM, but on the DOS kernel, too.
<P>Also, some programs access the screen or keyboard directly, rather than
using the DOS functions; these programs are <STRONG>not</STRONG> effected
by <TT><A HREF="#ctty">CTTY</A></TT>.


<H3>Examples</H3>


<H4>Example: 1</H4>



<TT> <TT><A HREF="#ctty">CTTY</A></TT> aux</TT><BR>

Changes the console to the <TT><I>AUX:</I></TT> device, which is usually the
first serial communication port <TT>COM1:</TT>. If this line is connected
to a terminal or a terminal emulator, the system can be controlled from the
terminal by now.


<H4>Example: 2</H4>



<TT> <TT><A HREF="#ctty">CTTY</A></TT> nul</TT><BR>
any command sequence<BR>

<TT> <TT><A HREF="#ctty">CTTY</A></TT> con</TT><BR>

The first command discards any output. If a program attempts any input
operation, it gets none. Some programs may not handle such situation
correctly.
<BR>So, any output, even error messages, are discarded during the command
sequence.
<BR>The second command changes the console back to the screen/keyboard pair.
<BR>To display a string onto screen or read from keybord the usual
<A HREF="#_appendix_redirection">I/O-redirections</A> may be used, for instance:
<UL>
<LI>

<TT> <TT><A HREF="#echo">ECHO</A></TT> This line appears on the screen &gt;CON</TT><BR>
<LI>

<TT> <TT><A HREF="#pause">PAUSE</A></TT> &lt;CON</TT><BR>
This <TT><A HREF="#pause">PAUSE</A></TT> command will get its input even within the
&quot;<TT><TT><A HREF="#ctty">CTTY</A></TT> nul</TT>&quot; environment.
</UL>
<P><HR>
<H2><A NAME="date">DATE - Display or set current date</H2>
See also: <A HREF="#time">TIME</A><BR>
Requirements: CMD_DATE<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>DATE</TT>  <B>[</B>  <B>/D</B>  <B>]</B> <BR>

<LI>
 <TT>DATE</TT>  <B>[</B>  <B>/D</B>  <B>]</B>  <I>date</I> <BR>

</OL>

The first variant displays the current system date, then enters a loop
prompting the user for a new date. The loop terminates, if the user
entered a valid new date or just pressed the <TT>ENTER</TT> key.

<P>The second variant does not display the current date and tries to
change the date to the specified <TT><I>date</I></TT>. On success the
command terminates, otherwise enters the loop explained above.

<P>The individual portions of a date may be separated by at least:
dots <TT>.</TT>, forward slashes <TT>/</TT> or dashes <TT>-</TT>.
Other nationally used characters may be supported, too.
<BR><TT><A HREF="#date">DATE</A></TT> will support partial formats:
<UL>
<LI>A <EM>single numnber</EM>: specifies the day only.
<LI><EM>Two numbers</EM>: specifies the day and the month in the order
used by the national date format, which is MM/DD for American and Japanese
and DD/MM for European format.
<LI><EM>Three numbers</EM>: specifies a full date including day, month and
year in the order suitable for the national date format, which is:
<UL>
<LI>MM/DD/[CC]YY: for American,
<LI>DD/MM/[CC]YY: for European and
<LI>[CC]YY/MM/DD: for Japanese format.
</UL>
If the year portion is less than 100, the century is assumed to be 1900, if
it is greater or equal than 80; otherwise the century is 2000.
<P><EM>Note</EM>: Some European countries introduced the so-called
business date in 1996 or so, which is the same as the Japanese format;
it makes sorting of literal dates a lot easier. If FreeCOM will or will not
support it, will depend on the NLS used by DOS.
</UL>

<BR>Symbolical names of monthes are not support (yet).


<H3>Options</H3>


All options must precced any argument.

<P><TT><B>/D</B></TT> prevents from prompting the user.
<OL>
<LI>In variant 1, the date is displayed only.
<LI>In variant 2, the date is tried to be changed, but the loop is not
entered on failure.
</OL>


<H3>Examples</H3>


<H4>Example: 1</H4>



<TT> <TT><A HREF="#date">DATE</A></TT> /D</TT><BR>

Just display the current system date.


<H4>Example: 3</H4>


<TT> <TT><A HREF="#date">DATE</A></TT> 2/1/00</TT><BR>

Sets the current date to 1st February of 2000.
<P><HR>
<H2><A NAME="del">DEL - Delete files</H2>
See also: <A HREF="#dir">DIR</A><BR>
Requirements: CMD_DELETE<BR>

<H3>Synopsis</H3>

 <TT>DEL</TT>  <B>[{</B>  <I>options</I>  |  <I>pattern</I>  <B>}]</B> <BR>


Deletes files, if <TT><I>pattern</I></TT> matches a directory, all files within
this directory are deleted.
<P>When all files are to be deleted, a warning prompt is issued.


<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.


<UL>
<LI><TT><B>/P</B></TT>: Prompts the user before delete a file.
</UL>


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#del">DEL</A></TT> FILE1.EXT FILE2.EXT</TT><BR>
Deletes the files <TT>FILE1.EXT</TT> and <TT>FILE2.EXT</TT>.


<H4>Example: 2</H4>


<TT> <TT><A HREF="#del">DEL</A></TT> /P *.bak</TT><BR>
Deletes all files with extension <TT>BAK</TT>, but prompts the
user for each single file before deleting it.


<H4>Example: 3</H4>


<TT> <TT><A HREF="#del">DEL</A></TT>.</TT><BR>
Deletes all files within the current directory.
<P><HR>
<H2><A NAME="dir">DIR - Displays the contents of the directory</H2>
See also: <A HREF="#chdir">CHDIR</A>, <A HREF="#mkdir">MKDIR</A>, <A HREF="#rmdir">RMDIR</A><BR>
Requirements: CMD_DIR<BR>

<H3>Synopsis</H3>

 <TT>DIR</TT>  <B>[{</B>  <I>options</I>  |  <I>pattern</I>  <B>}]</B> <BR>


<P><TT><TT><A HREF="#dir">DIR</A></TT></TT> displays the contents of direcories and/or
the attributes of files, whatever the <TT><I>pattern</I></TT> specifies.
If no <TT><I>pattern</I></TT> is specified on command line, the current
working directory is displayed. The actual information displayed
depends on the specified options and is explained below.
<P>A <TT><I>pattern</I></TT> may contain <A HREF="#_appendix_wildcards">wildcards</A>,
which are expanded against both files and directories. To specify a
directory is essentially equal to write: <TT>directory\*.*<TT>.
<P>Unlike options patterns are performed in sequence, that means that
if two patterns are specified, first all entries matching the first one,
then all entries matching the second one are displayed;
<FONT SIZE=-1>instead of to display the matching entries intermixed</FONT>.


<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.

<UL>
<LI><TT><B>/A</B></TT>: (All) Wildcards are matched against System and Hidden
files, too.
<LI><TT><B>/B</B></TT>: (Bare) Displays the lines with the information of
files and directories only. The ones displaying the volume label,
the serial number, totals etc. are suppressed. In combination with
<TT><B>/S</B></TT> the absolute path of the files is displayed.
<LI><TT><B>/L</B></TT>: (Lower-case) Filenames are displayed in lower-case
letters rather than capitol ones.
<LI><TT><B>/P</B></TT>: (Page) Page the output -- pause the display after
	issuing one screen-full.
<LI><TT><B>/S</B></TT>: (Subdirectories) Recursively display directories.
<LI><TT><B>/W</B></TT>: (Wide) Displays five filenames per line and suppress
the information about the file size, date etc.
<LI><TT><B>/Y</B></TT>: (Year) Displays a 4-digit year, rather than just two
	digits.
</UL>


<H3>Examples</H3>


<H4>Example: 1</H4>



<TT> <TT><A HREF="#dir">DIR</A></TT></TT><BR>
Displays the contents of the current directory, but ignore System and
Hidden files. The output may look like this:

<PRE>
!!todo!!
</PRE>


<H4>Example: 2</H4>



<TT> <TT><A HREF="#dir">DIR</A></TT> a* bb* *.txt</TT><BR>
First displays all files, that begin with the letter <TT>A</TT>; then
all files, that begin with two letters <TT>B</TT>, are displayed and
at last all files with the extension <TT>TXT</TT>.


<H4>Example: 3</H4>



<TT> <TT><A HREF="#dir">DIR</A></TT> /w a* b*</TT><BR>

<TT> <TT><A HREF="#dir">DIR</A></TT> a* /w b*</TT><BR>

<TT> <TT><A HREF="#dir">DIR</A></TT> a* b* /w</TT><BR>
Because the position of options is not significant,
all these examples behave the same way and display the matching files
in <EM>wide</EM> or also called <EM>short</EM> form, which may look
like this:

<PRE>
!!todo!!
</PRE>


<H4>Example: 4</H4>



<TT> <TT><A HREF="#dir">DIR</A></TT> /as ..</TT><BR>

<TT> <TT><A HREF="#dir">DIR</A></TT> .. /a/s</TT><BR>

<TT> <TT><A HREF="#dir">DIR</A></TT> /s .. /a</TT><BR>
Because <TT><TT><A HREF="#dir">DIR</A></TT></TT> processes all options globally and single-character
options may be joined together, all the above examples behave the same way
and recursively display all files beginning from the current directory's
parent directory including all System and Hidden files.
<P><HR>
<H2><A NAME="dirs">DIRS - Display the directory stack</H2>
See also: <A HREF="#cd">CD</A>, <A HREF="#chdir">CHDIR</A>, <A HREF="#popd">POPD</A>, <A HREF="#pushd">PUSHD</A><BR>
Requirements: CMD_DIRS<BR>

<H3>Synopsis</H3>

 <TT>DIRS</TT> <BR>


Displays all directories stacked with the <TT><A HREF="#pushd">PUSHD</A></TT> command.
<P><HR>
<H2><A NAME="echo">ECHO - Displays a string onto screen</H2>
See also: <A HREF="#type">TYPE</A><BR>
Requirements: CMD_ECHO<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>ECHO</TT>  <B>[</B>  <TT>ON</TT>  |  <TT>OFF</TT>  <B>]</B> <BR>

<LI>
 <TT>ECHO</TT>  &laquo;string&raquo; <BR>

<LI>
 <TT>ECHO.</TT> <BR>

</OL>

When executing a batch script each line is displayed to the console
before executing it by default. The first variant of <TT><A HREF="#echo">ECHO</A></TT> enables or
disables this behaviour. To disable echoing the commands is equal to
prefix each line of a batch script with the Ad-symbol <TT>@</TT>.
<BR>If <TT><A HREF="#echo">ECHO</A></TT> is invoked with no argument at all, the current echo status
is displayed.
<BR>When entered on an interactive command line the echo status controls
whether or not the <TT><A HREF="#prompt">PROMPT</A></TT> string is displayed.

<P>The second variant displays the specified <EBNF><<string>></EBNF>.
<BR>Note: Because of variant 1 <EBNF><<string>></EBNF> may not expand
to the single words <TT>ON</TT> or <TT>OFF</TT> without another
character.

<P>The third variant displays an empty line. No space must be
placed between the dot and <TT><A HREF="#echo">ECHO</A></TT>.


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#echo">ECHO</A></TT></TT><BR>

Displays the current echo status, e.g. responding:
<PRE><TT><A HREF="#echo">ECHO</A></TT> is on</PRE>


<H4>Example: 2</H4>


<TT> @<TT><A HREF="#echo">ECHO</A></TT> OFF</TT><BR>

Disables the echo status. Because the Ad-sign <TT>@</TT> disables the
echo status right for this line, this command disable echoing all the
next lines of a batch script and is not echoed to the console itself.
It is, therefore, best placed in the first line of a batch script.


<H4>Example: 3</H4>


<TT> <TT><A HREF="#echo">ECHO</A></TT> Just a text</TT><BR>

Displays <TT>Just a text</TT>
<P><HR>
<H2><A NAME="erase">ERASE - Delete files</H2>
This command is 100% compatible to <A HREF="#del">DEL</A>, please see there
<P><HR>
<H2><A NAME="exit">EXIT - Terminate shell</H2>

<H3>Synopsis</H3>

 <TT>EXIT</TT> <BR>


Terminates the currently running shell, unless it had been started with
the <TT><B>/P</B></TT> option.
<P><HR>
<H2><A NAME="for">FOR - Repeat a command</H2>
Requirements: CMD_FOR<BR>

<H3>Synopsis</H3>

 <TT>FOR</TT>  <TT>'%'</TT>  <I>letter</I>  <TT>IN</TT>  <TT>'('</TT>  <B>{</B>  <I>word</I>  |  <I>pattern</I>  <B>}</B>  <TT>')'</TT>  <TT>DO</TT>  &lt;&lt;any  <I>command&gt;&gt;</I> <BR>


Executes <EBNF><<any command>></EBNF> for several values assigned to
the variable <TT><I>letter</I></TT>. The values are read strictly left to right
from the <TT><I>word</I></TT>s and <TT><I>pattern</I></TT>s enclosed in
parenthises; where <TT><I>pattern</I></TT>s are words containing
wildcards and are replaced by all matching filenames.
<P>Any occurence of a percent sign <TT>%</TT> and the specified letter
is replaced by the current value of the <TT><A HREF="#for">FOR</A></TT> loop.


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#for">FOR</A></TT> %z IN (*.*) DO copy %a a:</TT><BR>

Performs a <TT><TT><A HREF="#copy">COPY</A></TT> xyz A:</TT> command for each file in the current
directory. Its behaviour is equal to <TT><TT><A HREF="#copy">COPY</A></TT> *.* A:</TT>


<H4>Example: 2</H4>


<TT> <TT><A HREF="#for">FOR</A></TT> %z IN (a?b*.TXT) DO <TT><A HREF="#call">CALL</A></TT> batch arg %z</TT><BR>

Executes the batch script <TT>batch.bat</TT> for each file matching
the pattern <TT>A?B*.TXT</TT> located in the current directory. Within the
script, the automatic variable <TT><I>%1</I></TT> always expands to the constant
argument <TT><I>arg</I></TT>, whereas <TT><I>%2</I></TT> expands to the filename
of the current loop.


<H4>Example: 3</H4>


<TT> <TT><A HREF="#for">FOR</A></TT> %a IN (1 2 3 4 5) DO <TT><A HREF="#echo">ECHO</A></TT> %a</TT><BR>

Is equal to the command sequence:<BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 1</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 2</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 3</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 4</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 5</TT><BR>

Because these words do <EM>not</EM> contain no wildcards, they are <EM>not</EM>
matched as filenames.


<H4>Example: 4</H4>


<TT> <TT><A HREF="#for">FOR</A></TT> %g IN (1 2 3*) DO <TT><A HREF="#echo">ECHO</A></TT> %g</TT><BR>

Performs the commands:<BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 1</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 2</TT><BR>

and the <TT><A HREF="#echo">ECHO</A></TT> command for each file in the current directory, that has no
extension and which name starts with the digit three.
<P><HR>
<H2><A NAME="goto">GOTO - Goto label</H2>
Requirements: CMD_GOTO<BR>

<H3>Synopsis</H3>

 <TT>GOTO</TT>  <B>[</B>  <TT>':'</TT>  <B>]</B>  <I>label</I> <BR>


Normally all commands of a batch script are executed in the sequence
in which they are appear with the script. <TT><A HREF="#goto">GOTO</A></TT> controls the command flow
by unconditionally jumping to the specified <TT><I>label</I></TT>; the commands following that label
will be executed then. A label is written as a colon in the first
column of a line and the name of the label immediately behind. If FreeCOM
hits a label in the normal flow, it is ignored completely, even any redirection
characters are ignored.

<P>The <TT><I>label</I></TT> must be located in the same script file as the
<TT><A HREF="#goto">GOTO</A></TT> itself, if it appears more than once, the first occurance takes
precedence.

<P>Conditional jumps can be contructed with help of the <TT><A HREF="#if">IF</A></TT> command, see
example 2.



<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#goto">GOTO</A></TT> ende</TT><BR>

Jumps the to label <TT>:ende</TT>


<H4>Example: 2</H4>


<TT> <TT><A HREF="#if">IF</A></TT> "%1"=="" <TT><A HREF="#goto">GOTO</A></TT> emptyCommandLine</TT><BR>

Jumps to label <TT>:emptyCommandLine</TT>, if no argument had been
passed to the batch script.
For instance:
<PRE>@<TT><A HREF="#echo">ECHO</A></TT> OFF
<TT><A HREF="#if">IF</A></TT> "%1"=="" <TT><A HREF="#goto">GOTO</A></TT> error
<TT><A HREF="#rem">REM</A></TT> do something sane here
<TT><A HREF="#goto">GOTO</A></TT> ende

:error
<TT><A HREF="#echo">ECHO</A></TT> You must pass an argument to me!

:ende
</PRE>
<P><HR>
<H2><A NAME="if">IF - Conditional execution of a command</H2>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>IF</TT>  <TT>EXIST</TT>  <I>file</I>  <I>command</I> <BR>

<LI>
 <TT>IF</TT>  <TT>ERRORLEVEL</TT>  <I>number</I>  <I>command</I> <BR>

<LI>
 <TT>IF</TT>  <I>string</I>  <TT>'=='</TT>  <I>word</I>  <I>command</I> <BR>

<LI>
 <TT>IF</TT>  <I>quoted-string</I>  <TT>'=='</TT>  <I>quoted-string</I>  <I>command</I> <BR>

</OL>



<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="loadfix">LOADFIX - Load an external program above the first 64KB memory</H2>
See also: <A HREF="#call">CALL</A>, <A HREF="#loadhigh">LOADHIGH</A><BR>

<H3>Synopsis</H3>

 <TT>LOADFIX</TT>  <I>program</I>  <B>[{</B>  <I>argument</I>  <B>}]</B> <BR>


Loads and executes an exepacked program, that would abort execution
with the error message "Packed file corrupt" otherwise.


<H4>Example: </H4>


<TT> <TT><A HREF="#loadfix">LOADFIX</A></TT> program.exe</TT><BR>
<P><HR>
<H2><A NAME="loadhigh">LOADHIGH - Load an external program into high memory</H2>
See also: <A HREF="#call">CALL</A>, <A HREF="#loadfix">LOADFIX</A><BR>

<H3>Synopsis</H3>

 <TT>LOADHIGH</TT>  <B>[{</B>  <I>option</I>  <B>}]</B>  <I>program</I>  <B>[{</B>  <I>argument</I>  <B>}]</B> <BR>


Loads and executes an external program in high memory, also called UMB.
This command is used to load TSRs, such mouse drivers, into the upper
memory to conserve the conventional memory for programs.


<H4>Example: </H4>


<TT> <TT><A HREF="#loadhigh">LOADHIGH</A></TT> lmouse.com</TT><BR>
<P><HR>
<H2><A NAME="md">MD - make directory</H2>
See also: <A HREF="#chdir">CHDIR</A>, <A HREF="#mkdir">MKDIR</A>, <A HREF="#rmdir">RMDIR</A><BR>
Requirements: CMD_MKDIR<BR>

<H3>Synopsis</H3>

 <TT>MD</TT>  <I>path</I> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="memory">MEMORY - Display the internally used memory</H2>
Requirements: CMD_MEMORY<BR>

<H3>Synopsis</H3>

 <TT>MEMORY</TT> <BR>


<P>


Displays the useage of internal memory of FreeCOM.


<H3>Examples</H3>


<TT> <TT><A HREF="#memory">MEMORY</A></TT></TT><BR>

may display this:
<PRE>
Environment segment    : max  1200 bytes; free     8 bytes
Context segment        : max  2304 bytes; free  2252 bytes
        Aliases        : limit  1024 bytes, current     5 bytes,     0 items
        History        : limit   256 bytes, current    34 bytes,     2 items
        Directory stack: limit   256 bytes, current     5 bytes,     0 items
        Last dir cache : used      0 bytes,     0 items
        Swapinfo       : used      0 bytes,     0 items
Heap                   : free 482080 bytes
</PRE>
<UL>
<LI>The <TT>Environment segment</TT> is the storage area, the environment
variables are storred in. It may be changed passing the <TT><B>/E</B></TT>
option to FreeCOM.
<LI>FreeCOM stores several internal information into the
<TT>Context segment</TT>; the aliases - modified by the <TT><A HREF="#alias">ALIAS</A></TT> command -,
the history - displayed using the HISTORY command, accessed by pressing
the cursor Up/Down keys on command line -, the directory stack - displayed
with the <TT><A HREF="#dirs">DIRS</A></TT> command and accessed using the <TT><A HREF="#pushd">PUSHD</A></TT> and <TT><A HREF="#popd">POPD</A></TT> commands -,
the last directory - accessed with the <TT><TT><A HREF="#cd">CD</A></TT> -</TT> command -, and,
finally, some internal command used by the low-level swap interface of
FreeCOM.
<LI>The <TT>heap</TT> is the storage area FreeCOM can allocated
memory from itself. This value is useful for FreeCOM developers
mostly.
</UL>
<UL>
<LI><TT>max</TT> specifies the maximum amount of bytes allocatable
within this storage area.
<LI><TT>free</TT> specifies the unused bytes within this storage area.
<LI><TT>limit</TT> specifies the maximum amount of bytes allocatable
for the particular information within the area.
<LI><TT>current</TT> specifies the amount of bytes currently allocated
for the particular information.
<LI><TT>items</TT> specifies the number of items storred
for the particular information, e.g. how many directories have been
pushed onto the stack using <TT><A HREF="#pushd">PUSHD</A></TT>.
</UL>
<P><HR>
<H2><A NAME="mkdir">MKDIR - Make directory</H2>
This command is 100% compatible to <A HREF="#md">MD</A>, please see there
<P><HR>
<H2><A NAME="path">PATH - Display or set the search path</H2>
Requirements: CMD_PATH<BR>

<H3>Synopsis</H3>

 <TT>PATH</TT>  <B>[</B>  <TT>'='</TT>  <B>]</B>  <B>{</B>  <I>path</I>  <B>:</B>  <TT>';'</TT>  <B>}</B> <BR>

 <TT>PATH</TT> <BR>



<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="pause">PAUSE - Pauses batch file execution</H2>
Requirements: CMD_PAUSE<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>PAUSE</TT> <BR>

<LI>
 <TT>PAUSE</TT>  &laquo;string&raquo; <BR>

</OL>


<P>Pauses the batch file execution until a key is pressed.
<P><TT><TT><A HREF="#pause">PAUSE</A></TT></TT> prompts the user with the specified string or,
if none is specifed, &quot;<TT>Press any key to proceed</TT>&quot;


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#pause">PAUSE</A></TT></TT><BR>
Just pauses the execution.


<H4>Example: 2</H4>


<TT> <TT><A HREF="#pause">PAUSE</A></TT> Execution paused, press any key to proceed ...</TT><BR>
Pauses execution displaying this string.


<H4>Example: 3</H4>


<TT> <TT><A HREF="#pause">PAUSE</A></TT> >nul</TT><BR>
Pauses execution, but does not display any prompt.
<P><HR>
<H2><A NAME="popd">POPD - Change back to the last pushed directory</H2>
See also: <A HREF="#cd">CD</A>, <A HREF="#cdd">CDD</A>, <A HREF="#dirs">DIRS</A>, <A HREF="#popd">POPD</A><BR>
Requirements: CMD_CDD,CMD_POPD<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>POPD</TT> <BR>

<LI>
 <TT>POPD</TT>  <TT>'*'</TT> <BR>

</OL>



<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="prompt">PROMPT - Display or set the shell prompt</H2>
Requirements: CMD_PROMPT<BR>

<H3>Synopsis</H3>

 <TT>PROMPT</TT> <BR>

 <TT>PROMPT</TT>  <B>[</B>  <TT>'='</TT>  <B>]</B>  <I>prompt</I> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="pushd">PUSHD - Push the current working directory onto the directory stack</H2>
See also: <A HREF="#cd">CD</A>, <A HREF="#cdd">CDD</A>, <A HREF="#dirs">DIRS</A>, <A HREF="#popd">POPD</A><BR>
Requirements: CMD_CDD,CMD_PUSHD<BR>

<H3>Synopsis</H3>

 <TT>PUSHD</TT>  <I>directory</I> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="rd">RD - Remove directory</H2>
See also: <A HREF="#cd">CD</A>, <A HREF="#md">MD</A><BR>
Requirements: CMD_RKDIR<BR>

<H3>Synopsis</H3>

 <TT>RD</TT>  <I>path</I> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="rem">REM - Marks comments or remarks in batchfiles</H2>
Requirements: CMD_REM<BR>

<H3>Synopsis</H3>

 <TT>REM</TT>  &laquo;string&raquo; <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="ren">REN - Rename files</H2>
See also: <A HREF="#rename">RENAME</A><BR>
Requirements: CMD_RENAME<BR>

<H3>Synopsis</H3>

 <TT>REN</TT>  <I>source</I>  <I>destination</I> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="rename">RENAME - Rename files</H2>
This command is 100% compatible to <A HREF="#ren">REN</A>, please see there
<P><HR>
<H2><A NAME="rmdir">RMDIR - Remove directory</H2>
This command is 100% compatible to <A HREF="#rd">RD</A>, please see there
<P><HR>
<H2><A NAME="set">SET - Display or set environment variables</H2>
Requirements: CMD_SET<BR>

<H3>Synopsis</H3>

 <TT>SET</TT> <BR>

 <TT>SET</TT>  <I>variable</I>  <TT>'='</TT>  &laquo;string&raquo; <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="shift">SHIFT - Shift the arguments of a batch script</H2>
Requirements: CMD_SHIFT<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>SHIFT</TT> <BR>

<LI>
 <TT>SHIFT</TT>  <TT>DOWN</TT> <BR>

</OL>

<P>

Shifts the arguments of a batch script one position up (first
variant) or down (second variant).

<P>Within a batch script the automatic variables %0 through %9
are replaced by the script name and the first nine arguments.
This can be imagined as a window to ten arguments of the script.
<TT><A HREF="#shift">SHIFT</A></TT> will allow to move this window of ten arguments towards its
end (up) or its start (down).

<P>After <TT><A HREF="#shift">SHIFT</A></TT> has been executed, the former %0 is hidden and inaccessable,
%1 became %0, %2 became %1 a.s.o, %9 became %8 and the formerly hidden
tenth argument became %9.
<BR><TT><TT><A HREF="#shift">SHIFT</A></TT> DOWN</TT> reverses one <TT><A HREF="#shift">SHIFT</A></TT> command.

<P><TT><A HREF="#shift">SHIFT</A></TT> can be called as many times as wanted, <TT><TT><A HREF="#shift">SHIFT</A></TT> DOWN</TT>
won't allow to underflow the very first argument.


<H3>Examples</H3>


<H4>Example: 1</H4>


If the batch script B.BAT:<BR>

<TT> @<TT><A HREF="#echo">ECHO</A></TT> OFF</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 0: %0</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 1: %1</TT><BR>

<TT> <TT><A HREF="#echo">ECHO</A></TT> 2: %2</TT><BR>
had been executed using:<BR>

<TT> B.BAT 1 2 3 4</TT><BR>
it displays:
<PRE>B.BAT
1
2</PRE>
<BR>If a <TT><A HREF="#shift">SHIFT</A></TT> command had been inserted as second line, the
same call displays:
<PRE>1
2
3</PRE>
<P><HR>
<H2><A NAME="time">TIME - Display or set current time</H2>
See also: <A HREF="#date">DATE</A><BR>
Requirements: CMD_TIME<BR>

<H3>Synopsis</H3>

<OL>
<LI>
 <TT>TIME</TT>  <B>[</B>  <B>/T</B>  <B>]</B> <BR>

<LI>
 <TT>TIME</TT>  <B>[</B>  <B>/T</B>  <B>]</B>  <I>time</I> <BR>

</OL>

Variant 1 displays the current time, then enters a loop prompting the
user to enter a new time. The loops terminates when a valid time had
entered or the user just pressed the <TT>ENTER</TT> key.

<P>Variant 2 does not display the current time, but tries to change the
current time to the specified <TT><I>time</I></TT>, on failure the loop as
explained above is entered.

<P>The individual portions of a time may be sperated by at least:
dots <TT>.</TT>, colons <TT>:</TT> and forward slashes <TT>/</TT>. Other
nationally used characters may be supported, too.
If a certain number of portions are specified:
<OL>
<LI>error,
<LI>hour:minute; seconds and hundreds default to zero,
<LI>hour:minute:seconds; hundreds defaults to zero,
<LI>hour:minute:seconds.hundreds;
<LI>more than 4 portions result in an error.
</OL>
Separated by no, one or more whitespaces the am/pm modifiers may follow
optionally. If present they alter the given time as follows:
<UL>
<LI>AM: if hour is equal to 12, it becomes 0 (midnight).
<LI>PM: f hour is greater than 12, it is incremented by 12.
</UL>


<H3>Options</H3>


All options must preceed any arguments.


<P><TT><B>/T</B></TT>: prevents from prompting the user.
<OL>
<LI>In variant 1, the time is displayed only.
<LI>In variant 2, the time is tried to be changed, but the loop is not
entered on failure.
</OL>


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#time">TIME</A></TT> /T</TT><BR>

Just displays the current time.



<H4>Example: 2</H4>


<TT> <TT><A HREF="#time">TIME</A></TT> 18:2</TT><BR>

Sets the current system time to 6:02 PM.
<P><HR>
<H2><A NAME="truename">TRUENAME - Display the true name of a file</H2>
Requirements: CMD_TRUENAME<BR>

<H3>Synopsis</H3>

 <TT>TRUENAME</TT>  <I>path</I> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="type">TYPE - Display the contents of files</H2>
See also: <A HREF="#dir">DIR</A>, <A HREF="#echo">ECHO</A><BR>
Requirements: CMD_TYPE<BR>

<H3>Synopsis</H3>

 <TT>TYPE</TT>  <B>{</B>  <I>pattern</I>  <B>}</B> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="ver">VER - Display the version information about FreeCOM and DOS</H2>
Requirements: CMD_VER<BR>

<H3>Synopsis</H3>

 <TT>VER</TT>  <B>[{</B>  <I>option</I>  <B>}]</B> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="verify">VERIFY - Display or set verify level</H2>
Requirements: CMD_VERIFY<BR>

<H3>Synopsis</H3>

 <TT>VERIFY</TT>  <B>[</B>  <TT>ON</TT>  |  <TT>OFF</TT>  <B>]</B> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="vol">VOL - Display the volume label of a drive</H2>
See also: <A HREF="#dir">DIR</A><BR>

<H3>Synopsis</H3>

 <TT>VOL</TT>  <B>[</B>  <I>drive</I>  <B>]</B> <BR>




<H3>Options</H3>

Unless stated otherwise all options of this command do follow the
<A HREF="#_appendix_options">standard rules for options</A>.



<H3>Examples</H3>


<H4>Example: 1</H4>


<P><HR>
<H2><A NAME="which">WHICH - Search and display the executable file of specified commands</H2>
Requirements: CMD_WHICH<BR>

<H3>Synopsis</H3>

 <TT>WHICH</TT>  <B>[{</B>  <I>command</I>  <B>}]</B> <BR>

<P>Searches for the specified command(s) the same way as if it would
be specified on command line as command itself. If an executable
file is found, its path is displayed in this format:<BR>
 <I>command</I>  &laquo;tab&raquo;  <I>path</I> <BR>

<BR>The 
 &laquo;tab&raquo; 
stands for the tabulator character (ASCII 9).
<BR>If the command is not found only the
 <I>command</I> 
part, but neither a
 <I>path</I> 
nor the
 &laquo;tab&raquo; 
is displayed.
<P>Internal commands, installable commands and aliases are not found.


<H3>Examples</H3>


<H4>Example: 1</H4>


<TT> <TT><A HREF="#which">WHICH</A></TT> which</TT><BR>

Returns a file or nothing, because <TT><A HREF="#which">WHICH</A></TT> is an internal command.


<H4>Example: 2</H4>


<TT> <TT><A HREF="#which">WHICH</A></TT> command</TT><BR>
Could display for instance:
<TT><PRE>
command	C:\COMMAND.COM
</PRE></TT>
<P>Please note that <TT>command</TT> is the string &quot;command&quot;
and no placeholder.
<P><HR>
<H2><A NAME="_appendix">Appendix</A></H2>
<H3><A NAME="_appendix_currdir">Current Directory</A></H3>

The current directory is the default directory of a drive.

<P>DOS stores a default directory for each drive. When a path is
specified with a drive specification only, such as <TT>D:</TT>,
it is completed with this default directory of that drive to
construct the <A HREF="#_appendix_abspath">absolute path</A> to be used.

<H3><A NAME="_appendix_cwd">Current Working Direcory</A></H3>

In opposite to the current directory the current <EM>working</EM>
directory is the <A HREF="#_appendix_abspath">absolute path</A> constructed
out of the <A HREF="#chgdrive">currently selected drive</A> and <A
HREF="cd">current directory</A> of that drive.

<H3><A NAME="_appendix_abspath">Path Specification</A></H3>

In DOS an absolute path is constructed out of several components:
<OL>
<LI>drive,
<LI>directory,
<LI>filename, and
<LI>file extension.
</OL>
like this: <TT>D:\DIR1\DIR2\FILENAME.EXT</TT>.

<P>The drive is a single letter from <TT>A</TT> through <TT>Z</TT>
followed by a colon <TT>:</TT>.

<P>The remaining part of a path consists of similiar components
delimited by a single backslash <TT>\</TT>. The last component
is also called filename. Each of these components may be formed of
a name, up to eight characters long, and an extension, up to
three characters long. Both parts are delimited by a single dot
<TT>.</TT>. Although the extension may be absent, the filename
must have at least one character.
<BR>Note: The term <EM>filename</EM> is not limited to <EM>files</EM>
in the usual sense, but may apply to any name visible in a directory,
such as subdirectories and volume labels, as well.

<P>To ease the way to enter a path the user may specify a relative path,
rather than an absolute one. In such path one or more components may
be missing:

<UL>
<LI>If no drive is specified, what means that no colon is specified, the
path is prefixed by the <A HREF="#chgdrive">currently selected
drive</A>.

<LI>If the directory is not prefixed by the backslash or no directory
is specified at all, the <A HREF="#_appendix_currdir">current directory</A>
of the drive is inserted right behind the colon.

<LI>Some programs may append an absent extension to the very last
filename component.

</UL>

<P>Examples, assume the current directories of
<TABLE BORDER=1>
<TR>
	<TD><B>Drive</B></TD>
	<TD><B>Current Directory</B></TD>
</TR>
<TR>
	<TD>C:</TD>
	<TD><TT>\FREEDOS\HELP</TT></TD>
</TR>
<TR>
	<TD>D:</TD>
	<TD><TT>\TEMP\TEXT</TT></TD>
</TR>
</TABLE>
The currently selected drive is <TT>C:</TT>.

<OL>
<LI><TT>C:\</TT>
<BR>The root directory of drive <TT>C:</TT>.

<LI><TT>.</TT>
<BR>The current working directory, ergo: <TT>C:\FREEDOS\HELP</TT>.

<LI><TT>..</TT>
<BR>The parent directory, ergo: <TT>C:\FREEDOS</TT>.

<LI><TT>D:</TT>
<BR>The current directory of drive <TT>D:</TT>, ergo: <TT>D:\TEMP</TT>.

<LI><TT>D:.</TT>
<BR>The current directory of drive <TT>D:</TT>, ergo: <TT>D:\TEMP</TT>.

<LI><TT>D:..</TT>
<BR>The parent directory of drive <TT>D:</TT>, ergo: <TT>D:\</TT>.

<LI><TT>..\BIN</TT>
<BR>Because there is neither a drive nor a leading backslash, both the
currently selected drive and the current directory of that drive
is inserted before the given path, ergo: <TT>C:\FREEDOS\HELP\..\BIN</TT>.
<BR>The embedded component <TT>..</TT> has the same meaning as when
specified alone: <EM>parent directory</EM>, though, here in the context
of the directory <TT>C:\FREEDOS\HELP\</TT>. That means that the
final absolute path is: <TT>C:\FREEDOS\BIN</TT>.

</OL>

<P>Path specifications that do not conform to above mentioned
format lead to various different behaviour of the various programs,
because there is no standard to scan, parse and interprete such
patterns.
Problems include:
<UL>
<LI>multiple backslashes,
<LI>multiple dots,
<LI>multiple colons, or a colon at a position unequal to two,
<LI>The current directory <TT>.</TT> or parent directory <TT>..</TT>
special directories in the context of a root directory, such as
<TT>C:\.</TT>, <TT>C:\..</TT>, or <TT>C:\TEMP\..\..</TT>.
</UL>

<P>Note: The special directories <TT>.</TT> and <TT>..</TT> are no
phantom directories or virtual entries, but standard entries of
every directory except the root directories. These entries help
crash recovery tools, such as <TT>CHKDSK</TT> or <TT>SCANDISK</TT>,
to find errors within the directory structure and restore it to
a valid file tree. Therefore a common assumption that a tripple dot
<TT>...</TT> directory means <EM>parent-of-parent</EM> is incorrect,
though, might be supported by certain programs.

<H3><A NAME="_appendix_options">Standard Rules for Options</A></H3>

Options are prefixed by one forward slash &quot;<TT>/</TT>&quot;,
the following character identifies the option and is called
option character, for instance: <TT><B>/A</B></TT>

<P>Some commands do accept long option names, where a complete word
identifies the option rather than a single character, e.g. <TT><B>/MSG</B></TT>.

<P>Some option may be used in conjunction with an argument. The argument
is appended to the option with one colon &quot;<TT>:</TT>&quot; or
one equal sign &quot;<TT>=</TT>&quot;, for instance: <TT><B>/A:hr</B></TT>
or <TT><B>/P=fdexec.bat</B></TT>.

<P>Multiple options <EM>without</EM> argument maybe merged together
as a single option with or without embedded slashes, e.g. <TT><B>/WS</B></TT>
or <TT><B>/W/S</B></TT>, instead of <TT><B>/W /S</B></TT>.
<BR>However, because some commands do accept long option names, the
way with embedded slashes is more secure and is recommended therefore.
<BR>An option with argument may be the last one of such merged options.

<P>Options without arguments enable or disable certain features. Therefore,
those options are sometimes called <EM>boolean</EM> options or flags.
<BR>Boolean options may be optionally prefixed by a plus &quot;<TT>+</TT>&quot;
or minus &quot;<TT>-</TT>&quot; sign. So, the boolean option <TT><B>O</B></TT>
can be written in three ways:
<OL>
<LI><TT><B>/+O</B></TT>: The option is enabled.
<LI><TT><B>/-O</B></TT>: The option is disabled.
<LI><TT><B>/O</B></TT>: (<FONT SIZE=-1>neither plus nor minus sign</FONT>)
The option is toggled or flipped; this means if the option is
enabled currently, it is disabled; but if it is disabled currently,
it is enabled.
</OL>
<BR>Without user invention a boolean option is disabled by default, so
both <TT><B>/+O</B></TT> and <TT><B>/O</B></TT> behave the same most
of the time. However, some commands allow the user to change the default
settings of certain options, e.g. <A HREF="#copy"><TT><A HREF="#copy">COPY</A></TT></A> and
<A HREF="#dir"><TT><A HREF="#dir">DIR</A></TT></A>.

</BODY>
