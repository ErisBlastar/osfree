/*==============================================================================
 * FILE:          CSR.grammar
 * OVERVIEW:      Documents the grammar for the Procedure Abstraction Language
 *                specification files (.pal), as at 6 Dec 1999.
 * NOTE:          This file is not used directly, it merely documents the
 *                grammar in a more readable form than csrparser.y.  
 *
 * Copyright (C) 1999, The University of Queensland, BT group
 *============================================================================*/

The standard EBNF metasymbols are used: 
{sequences}
[optional constructs]
(alternative | choices)
zero_or_more *
one_or_more +

/*==============================================================================
 * This is the start symbol.
 *============================================================================*/
PALSpec ::= register_names 
            caller_prologue_section callee_prologue_section
            callee_epilogue_section [caller_epilogue_section] 
            frame_section local_section parameter_section 
            return_section [parent_section]

/*==============================================================================
 * This part defines constructs used by the different parts of a PAT/PAL spec.
 *============================================================================*/

operands ::= name { "," name } *

constructor ::= name { '(' operands ')' }

constructor_list ::= constructor  
      | constructor ';' constructor_list

exp ::= 
        "(" exp ")"
      | exp "+" exp
      | exp "-" exp
      | exp "*" exp
      | exp "/" exp
      | reg_id
      | number
      | name

afp_exp ::= 
        "%afp +" exp 
      | "%afp -" exp

reg_name ::= name | reg_id

/*==============================================================================
 * This part of the grammar is for declaring symbolic register names.
 *============================================================================*/

register_names ::= "NAMES" { name '=' number } + 

/*==============================================================================
 * This part of the grammar is for declaring prologues and epilogues.
 *============================================================================*/

caller_prologue_section ::= "CALLER_PROLOGUE" prologue_epilogue_decl +

callee_prologue_section ::= "CALLEE_PROLOGUE" prologue_epilogue_decl +

callee_epilogue_section ::= "CALLEE_EPILOGUE" prologue_epilogue_decl +

caller_epilogue_section ::= "CALLER_EPILOGUE" prologue_epilogue_decl +

prologue_epilogue_decl ::= constructor_list 

/*==============================================================================
 * This part of the grammar is for specifying the frame abstraction.
 *============================================================================*/

frame_section ::= "FRAME ABSTRACTION" init_decl frame_decl +

init_decl ::= "INIT" reg_name 

frame_decl ::= name + '{' reg_name "->" afp_exp '}'  

/*==============================================================================
 * This part of the grammar is for specifying the valid locations for 
 * local variables.
 *============================================================================*/

local_section ::= "LOCALS" local_decl + 

local_decl ::= names '{' exp '}' 

/*==============================================================================
 * This part of the grammar is for specifying the valid locations for
 * parameter passing.
 *============================================================================*/

parameter_section ::= "PARAMETERS" param_decl +

param_decl ::= names   
      '{' "AGGREGATE ->" "m[" afp_exp ']'
          "REGISTERS ->" reg_name + 
          "STACK -> BASE = [" afp_exp ']' "OFFSET =" number '}' 

/*==============================================================================
 * This part of the grammar is for specifying the valid locations for
 * returning values from a call.
 *============================================================================*/

return_section ::= "RETURNS" return_decl +

return_decl ::= names 
      '{' "INTEGER IN " reg_name 
          "ADDRESS IN" reg_name
          "FLOAT IN" reg_name
          "DOUBLE IN" reg_name '}'

/*==============================================================================
 * This part of the grammar is for specifying the valid locations 
 * accessible in the parent's stack frame.
 *============================================================================*/

parent_section ::= "PARENT STACK" parent_decl 

parent_decl ::= name + '{' afp_exp "TO" afp_exp "STEP" number '}'

==============================================================
This section describes the syntax of the tokens used above. It uses lex type
notation rather than EBNF.

names  ::= ( name | "CALLER" ) + 
name   ::= [A-Z][A-Z0-9_]*[A-Z0-9]
number ::= -?[0-9]*
reg_id ::= "%"[A-Za-z][A-Za-z0-9]*
