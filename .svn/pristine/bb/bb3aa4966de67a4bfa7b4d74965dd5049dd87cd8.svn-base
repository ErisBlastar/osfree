Copyright (c) 1989-1999,2000 Ralf Brown
--------!---FLAGS----------------------------
The use of -> instead of = signifies that the indicated register or register
pair contains a pointer to the specified item, rather than the item itself.
Register pairs (such as AX:BX) indicate that the item is split across the
registers, with the high-order half in the first register.

One or more letters may follow the interrupt number; they have the following
meanings:  U - undocumented function, u - partially documented function,
P - available only in protected mode, R - available only in real or V86 mode,
C - callout or callback (usually hooked rather than called),
O - obsolete (no longer present in current versions)
--------!---CATEGORIES-----------------------
The ninth column of the divider line preceding an entry usually contains a
classification code (the entry has not been classified if that character is
a dash).  The codes currently in use are:
        A - applications, a - access software (screen readers, etc),
        B - BIOS, b - vendor-specific BIOS extensions,
        C - CPU-generated, c - caches/spoolers,
        D - DOS kernel, d - disk I/O enhancements,
        E - DOS extenders, e - electronic mail, F - FAX,
        f - file manipulation, G - debuggers/debugging tools, g - games,
        H - hardware, h - vendor-specific hardware,
        I - IBM workstation/terminal emulators, i - system info/monitoring,
        J - Japanese, j - joke programs,
        K - keyboard enhancers, k - file/disk compression,
        l - shells/command interpreters,
        M - mouse/pointing device, m - memory management,
        N - network, n - non-traditional input devices,
        O - other operating systems,
        P - printer enhancements, p - power management,
        Q - DESQview/TopView and Quarterdeck programs,
        R - remote control/file access, r - runtime support,
        S - serial I/O, s - sound/speech,
        T - DOS-based task switchers/multitaskers, t - TSR libraries
        U - resident utilities, u - emulators,
        V - video, v - virus/antivirus,
        W - MS Windows,
        X - expansion bus BIOSes, x - non-volatile config storage
        y - security, * - reserved (and not otherwise classified)
--------G-00---------------------------------
INT 00 - Zenith - ROM DEBUGGER
Desc:   invokes the ROM Debugger when at the BIOS level; equivalent to
          pressing Ctrl-Alt-Ins on booting.
Note:   since DOS revectors INT 00, it is necessary to restore this vector to
          its original ROM BIOS value in order to invoke the debugger once DOS
          loads
SeeAlso: INT 03"Columbia"
--------H-02---------------------------------
INT 02 C - external hardware - NON-MASKABLE INTERRUPT
Desc:   generated by the CPU when the input to the NMI pin is asserted
Notes:  return address points to start of interrupted instruction on 80286+
        on the 80286+, further NMIs are disabled until the next IRET
          instruction, but one additional NMI is remembered by the hardware
          and will be serviced after the IRET instruction reenables NMIs
        maskable interrupts may interrupt the NMI handler if interrupts are
          enabled
        although the Intel documentation states that this interrupt is
          typically used for power-failure procedures, it has many other uses
          on IBM-compatible machines:
                Memory parity error: all except Jr, CONV, and some machines
                                  without memory parity
                Breakout switch on hardware debuggers
                Coprocessor interrupt: all except Jr and CONV
                Keyboard interrupt: Jr, CONV
                I/O channel check: CONV, PS50+
                Disk-controller power-on request: CONV
                System suspend: CONV
                Real-time clock: CONV
                System watch-dog timer, time-out interrupt: PS50+
                DMA timer time-out interrupt: PS50+
                Low battery: HP 95LX
                Module pulled: HP 95LX
--------m-02----SI0714-----------------------
INT 02 U - STB RAPIDMAP.SYS - ???
        SI = 0714h
        ES:DI -> ???
Return: ???
SeeAlso: INT 67/AX=6100h"STB",PORT 00E1h"STB"
--------G-03---------------------------------
INT 03 - Columbia PCs (desktop,VP portables) - ROM DEBUGGER
Desc:   invokes the ROM Debugger if INT 03 has not been revectored; equivalent
          to pressing Esc on booting.
SeeAlso: INT 00"Zenith",INT 03"Realia"
--------G-03---------------------------------
INT 03 - Realia COBOL - DEBUGGER SUPPORT
Note:   Realia COBOL checks for a signature eight bytes prior to the interrupt
          handler when it starts up
BUG:    if the offset of the INT 03 vector is less than 8, the compiler and
          all executables generated by it will crash the system
SeeAlso: INT 03"Columbia"
--------G-03---------------------------------
INT 03 U - Watcom WVIDEO, Watcom WD - OUTPUT DEBUGGING MESSAGE
        STACK:  DWORD   selector
                DWORD   offset of ASCIZ message to display
Notes:  the INT 03h instruction which invokes the debugger must be followed by
          a JMP SHORT and the signature string "WVIDEO"
        to check whether this interface is available, define a public byte
          variable named ___WD_Present, which the debugger will set to 01h
          before running the program
SeeAlso: AX=0910h
--------U-03---------------------------------
INT 03 - DTown Utilities - POP UP
Program: DTown Software Development's DTown Utilities contains various tools
          which are useful to programmers, such as a memory viewer and
          disassembler
Note:   DTU pops up on INT 03 (if not hooked by a debugger) to allow the
          user to inspect memory or code when the machine crashes; various
          memory managers will invoke INT 03 when displaying a CPU exception
          error message (either automatically or when the user presses a
          particular key)
SeeAlso: INT 2D/AL=20h"DTown"
--------G-030000-----------------------------
INT 03 - Soft-ICE - BACK DOOR COMMANDS - GET Soft-ICE VERSION
        AX = 0000h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
Return: SI = BCD version (0280h = v2.80)
SeeAlso: INT 03/AX=0910h
--------G-0301-------------------------------
INT 03 - Soft-ICE - BACK DOOR COMMANDS - ???
        AH = 01h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
Return: ???
SeeAlso: AX=0000h,AX=090Bh,INT 03/AH=10h
--------G-030900-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 0900h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:BX -> ???
        CX = ???
        DX = ???
Return: ???
SeeAlso: AX=0000h,AH=01h,AX=0902h,AX=0914h
--------G-030902-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - POPUP & START A DEBUG SESSION
        AX = 0902h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:BX -> initial register values (see #00001)
Return: registers as specified in initial register values table
Note:   This function is called by LDR.EXE in loading a program to
          be debugged. After executing the function, Soft-ICE pops up its
          debugging window and you may start debugging your program.
Return: ???
SeeAlso: AX=0000h,AX=090Ah,AX=0910h,AX=0914h

Format of Soft-ICE initial register values:
Offset  Size    Description     (Table 00001)
 00h    WORD    initial value of SP
 02h    WORD    initial value of SS
 04h    WORD    initial value of IP
 06h    WORD    initial value of CS
 08h    WORD    initial value of DS and ES
 0Ah    WORD    ???
 0Ch    WORD    ???
 0Eh    WORD    ???
 10h    WORD    initial value of AX
 12h    WORD    ??? (defaults to 000AH ???)
 14h    WORD    ??? (defaults to 0001H ???)
 16h    WORD    ??? (defaults to 0100H ???)
--------G-030903-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 0903h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:BX -> ???
        CX = ???
        DX = ???
Return: ???
SeeAlso: AX=0000h,AX=0902h,AX=0907h,AX=0914h
--------G-030907-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 0907h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:BX -> ???
        CX = ???
        DX = ???
Return: ???
SeeAlso: AX=0000h,AX=0903h,AX=090Ah,AX=0914h
--------G-03090A-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 090Ah
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:BX -> ???
        CX = ???
        DX = ???
Return: ???
SeeAlso: AX=0000h,AX=0907h,AX=090Bh,AX=0914h
--------G-03090B-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 090Bh
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:BX -> ???
        CX = ???
        DX = ???
Return: ???
SeeAlso: AX=0000h,AX=090Ah,AX=0910h,AX=0914h
--------G-030910-----------------------------
INT 03 - Soft-ICE - BACK DOOR COMMANDS - DISPLAY STRING IN Soft-ICE WINDOW
        AX = 0910h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:DX -> ASCIZ string to display (max 100 bytes, 0Dh OK)
Program: Soft-ICE is a debugger by Nu-Mega Technologies, Inc.
SeeAlso: INT 03"WVIDEO"
--------G-030911-----------------------------
INT 03 - Soft-ICE - BACK DOOR COMMANDS - EXECUTE Soft-ICE COMMAND
        AX = 0911h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:DX -> ASCIZ command string (max 100 bytes, 0Dh OK)
Return: nothing
SeeAlso: AX=0912h,AX=0913h
--------G-030912-----------------------------
INT 03 - Soft-ICE - BACK DOOR COMMANDS - GET BREAKPOINT INFORMATION
        AX = 0912h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
Return: BH = entry number of last breakpoint set
        BL = type of last breakpoint set (see #00002)
        DH = entry number of last breakpoint to be triggered
        DL = type of last triggered breakpoint (see #00002)
Program: Soft-ICE is a debugger by Nu-Mega Technologies, Inc.
SeeAlso: AX=0911h,AX=0913h,AX=0914h

(Table 00002)
Values for Soft-ICE breakpoint type:
 00h    BPM (breakpoint register types)
 01h    I/O
 02h    INTerrupt
 03h    BPX (INT 03-style breakpoint)
 04h    reserved
 05h    range
--------G-030913-----------------------------
INT 03 - Soft-ICE v2.5x - BACK DOOR COMMANDS - SET Soft-ICE BREAKPOINT
        AX = 0913h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:DX -> breakpoint structure (see #00003)
Return: AX = status
            00h successful
                BX = breakpoint number
            03h breakpoint table full
            06h memory limit error
            07h I/O limit error
            09h range limit error
            16h duplicate breakpoint
SeeAlso: AX=0911h,AX=0912h,AX=0914h

Format of Soft-ICE breakpoint structure:
Offset  Size    Description     (Table 00003)
 00h    BYTE    breakpoint type (see #00004)
 01h    DWORD   breakpoint address 1
                (lower range limit for memory BPs,
                interrupt number for interrupt BPs,
                address of BP for execution BPs,
                I/O address (only word) for I/O BPs)
 05h    DWORD   breakpoint address 2
                (upper range limit for memory BPs,
                optional value to check for for interrupt BPs,
                overlay number (0 = root) for execution BPs)
 09h    DWORD   breakpoint address 3
 0Dh    BYTE    breakpoint mode 1 (see #00005)
                (for interrupt BPs = register to check
                    00h  no value checking
                    01h  check AL
                    02h  check AH
                    03h  check AX)
 0Eh    BYTE    breakpoint mode 2 (see #00005)
 0Fh    BYTE    breakpoint size (00h byte, 01h word, 03h dword)
 10h    BYTE    breakpoint pass count before program stop
 11h    BYTE    breakpoint state
Note:   all unused fields should contain zeros

(Table 00004)
Values for Soft-ICE breakpoint type:
 00h    memory location
 01h    memory range
 03h    I/O
 04h    interrupt
 05h    execution break

(Table 00005)
Values for Soft-ICE breakpoint mode:
 01h    read
 02h    write
 04h    execution
--------G-030914-----------------------------
INT 03 - Soft-ICE v2.5x - BACK DOOR COMMANDS - REMOVE Soft-ICE BREAKPOINT
        AX = 0914h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        BX = breakpoint number (returned by AX=0913h)
Return: BX = ???
Program: Soft-ICE is a debugger by Nu-Mega Technologies, Inc.
SeeAlso: AX=0912h,AX=0913h
--------G-030918-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 0918h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        DS:BX -> ???
        CX = ???
        DX = ???
Return: ???
SeeAlso: INT 03/AX=0000h,INT 03/AX=0910h,INT 03/AX=0914h,INT 03/AH=10h
--------G-0310-------------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AH = 10h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
Return: ???
SeeAlso: INT 03/AX=0000h,INT 03/AX=0910h,INT 03/AH=01h,INT 03/AH=11h
--------G-0311-------------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AH = 11h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
Return: none???
SeeAlso: INT 03/AX=0000h,INT 03/AX=0910h,INT 03/AH=10h,INT 03/AX=130Ch
--------G-03130C-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 130Ch
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        BX = ???
        CX = ???
        DX = ???
Return: AX = ??? (1300h)
SeeAlso: INT 03/AX=0000h,INT 03/AX=0910h,INT 03/AH=11h,INT 03/AX=130Eh
--------G-03130E-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 130Eh
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        BX = ???
        CX = ???
        DX = ???
Return: AX = ??? (1300h)
SeeAlso: INT 03/AX=0000h,INT 03/AX=0910h,INT 03/AX=130Ch,INT 03/AX=1313h
--------G-031313-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 1313h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
        BX = ???
        CX = ???
        DX = ???
Return: AX = ??? (1300h)
SeeAlso: INT 03/AX=0000h,INT 03/AX=0910h,INT 03/AX=130Eh
--------G-030900-----------------------------
INT 03 - Soft-ICE v2.80 - BACK DOOR COMMANDS - ???
        AX = 0900h
        SI = magic value 4647h ('FG')
        DI = magic value 4A4Dh ('JM')
Return: none???
SeeAlso: INT 03/AX=0000h,INT 03/AX=0910h,INT 03/AH=10h,INT 03/AH=12h
--------P-05454A-----------------------------
INT 05 U - PSPS v2.01 - EJECT PAGE
        AX = 454Ah ('EJ')
Program: PSPS is shareware PostScript PrintScreen utility by A.N.D.
          Technologies
Note:   sends a ^D to the current printer
SeeAlso: AX=4E57h,AX=5053h,AX=554Eh
--------P-054E57-----------------------------
INT 05 U - PSPS v2.01 - SET PARAMETERS
        AX = 4E57h ('NW')
        ES:SI -> 11-byte buffer containing new settings
Return: buffer filled
SeeAlso: AX=454Ah,AX=5053h,INT 17/AH=63h
--------P-055053-----------------------------
INT 05 U - PSPS v2.01 - GET PARAMETERS
        AX = 5053h ('PS')
        ES:SI -> 11-byte buffer for settings
Return: buffer filled
SeeAlso: AX=4E57h,AX=554Eh,INT 17/AH=64h
--------P-05554E-----------------------------
INT 05 U - PSPS v2.01 - UNINSTALL
        AX = 554Eh ('UN')
Program: PSPS is shareware PostScript PrintScreen utility by A.N.D.
          Technologies
SeeAlso: AX=454Ah,AX=4E57h,INT 17/AH=62h
--------b-06---------------------------------
INT 06 C - HP 95LX - SLEEP/WAKEUP
Desc:   this interrupt is called just before going into light or deep
          (shutdown) sleep and just after returning from light or deep sleep
SeeAlso: INT 0B"HP 95LX",INT 15/AX=4DD4h,INT 15/AH=4Eh
--------V-06---------------------------------
INT 06 U - no-name clone - GRAPHICS CHARACTER TABLE (NOT A VECTOR!)
Desc:   points at graphics data for characters 00h-7Fh of the current font
SeeAlso: INT 43"EGA",INT 44"VIDEO"
--------H-08---------------------------------
INT 08 C - IRQ0 - SYSTEM TIMER
Desc:   generated 18.2 times per second by channel 0 of the 8254 system timer,
          this interrupt is used to keep the time-of-day clock updated
Notes:  programs which need to be invoked regularly should use INT 1C unless
          they need to reprogram the timer while still keeping the time-of-day
          clock running at the proper rate
        default handler is at F000h:FEA5h in IBM PC and 100%-compatible BIOSes
        may be masked by setting bit 0 on I/O port 21h
SeeAlso: INT 1C,INT 4A"SYSTEM",INT 50"DESQview",INT 58"DoubleDOS",INT 70"IRQ8"
SeeAlso: INT 78"GO32",INT D8"Screen Thief",MEM 0040h:0040h,MEM 0040h:006Ch
--------H-09---------------------------------
INT 09 C - IRQ1 - KEYBOARD DATA READY
Desc:   this interrupt is generated when data is received from the keyboard.
          This is normally a scan code (from either a keypress *or* a key
          release), but may also be an ACK or NAK of a command on AT-class
          keyboards.
Notes:  this IRQ may be masked by setting bit 1 on I/O port 21h
        if the BIOS supports an enhanced (101/102-key) keyboard, it calls
          INT 15/AH=4Fh after reading the scan code (see #00006) from the
          keyboard and before further processing; all further processing uses
          the scan code returned from INT 15/AH=4Fh
        the default interrupt handler is at F000h:E987h in 100%-compatible
          BIOSes
        the interrupt handler performs the following actions for certain
          special keystrokes:
            Ctrl-Break   clear keyboard buffer, place word 0000h in buffer,
                         invoke INT 1B, and set flag at 0040h:0071h
            SysReq       invoke INT 15/AH=85h (SysReq is often labeled SysRq)
            Ctrl-Numlock place system in a tight wait loop until next INT 09
            Ctrl-Alt-Del jump to BIOS startup code (either F000h:FFF0h or the
                           destination of the jump at that address)
            Shift-PrtSc  invoke INT 05
            Ctrl-Alt-Plus (HP Vectra) enable keyclick
            Ctrl-Alt-Plus (many clones) set clock speed to high
            Ctrl-Alt-Minus (HP Vectra) reduce keyclick volume
            Ctrl-Alt-Minus (many clones) set clock speed to low
            Ctrl-Alt-SysReq (HP Vectra) generate hard reset
            Ctrl-Alt-S  (many clones) run BIOS setup program
            Ctrl-Alt-Esc (many clones) run BIOS setup program
            Ctrl-Alt-Ins (many clones) run BIOS setup program
            Ctrl-Alt-LeftShift-GrayMinus (some clones) turn off system cache
            Ctrl-Alt-LeftShift-GrayPlus (some clones) turn on system cache
        DR DOS hooks this interrupt to control the cursor shape (underscore/
          half block) for overwrite/insert mode
        DR Multiuser DOS hooks this interrupt for cursor shape control and to
          control whether Ctrl-Alt-Del reboots the current session or the
          entire system
SeeAlso: INT 05"PRINT SCREEN",INT 0B"HP 95LX",INT 15/AH=4Fh,INT 15/AH=85h
SeeAlso: INT 16/AH=00h,INT 16/AH=10h,INT 1B,INT 2F/AX=A901h,INT 4A/AH=00h"TI"
SeeAlso: INT 51"DESQview",INT 59"DoubleDOS",INT 79"GO32"

(Table 00006)
Values for keyboard make/break (scan) code:
 01h    Esc              31h    N
 02h    1 !              32h    M
 03h    2 @              33h    , <              63h    F16
 04h    3 #              34h    . >              64h    F17
 05h    4 $              35h    / ?              65h    F18
 06h    5 %              36h    Right Shift      66h    F19
 07h    6 ^              37h    Grey*            67h    F20
 08h    7 &              38h    Alt              68h    F21 (Fn) [*]
 09h    8 *              39h    SpaceBar         69h    F22
 0Ah    9 (              3Ah    CapsLock         6Ah    F23
 0Bh    0 )              3Bh    F1               6Bh    F24
 0Ch    - _              3Ch    F2               6Ch    --
 0Dh    = +              3Dh    F3               6Dh    EraseEOF
 0Eh    Backspace        3Eh    F4
 0Fh    Tab              3Fh    F5               6Fh    Copy/Play
 10h    Q                40h    F6
 11h    W                41h    F7
 12h    E                42h    F8               72h    CrSel
 13h    R                43h    F9               73h    <delta> [*]
 14h    T                44h    F10              74h    ExSel
 15h    Y                45h    NumLock          75h    --
 16h    U                46h    ScrollLock       76h    Clear
 17h    I                47h    Home             77h    [Note2] Joyst But1
 18h    O                48h    UpArrow          78h    [Note2] Joyst But2
 19h    P                49h    PgUp             79h    [Note2] Joyst Right
 1Ah    [ {              4Ah    Grey-            7Ah    [Note2] Joyst Left
 1Bh    ] }              4Bh    LeftArrow        7Bh    [Note2] Joyst Up
 1Ch    Enter            4Ch    Keypad 5         7Ch    [Note2] Joyst Down
 1Dh    Ctrl             4Dh    RightArrow       7Dh    [Note2] right mouse
 1Eh    A                4Eh    Grey+            7Eh    [Note2] left mouse
 1Fh    S                4Fh    End
 20h    D                50h    DownArrow
 21h    F                51h    PgDn
 22h    G                52h    Ins
 23h    H                53h    Del
 24h    J                54h    SysReq          ---non-key codes---
 25h    K                55h    [Note1] F11      00h    kbd buffer full
 26h    L                56h    left \| (102-key)
 27h    ; :              57h    F11              AAh    self-test complete
 28h    ' "              58h    F12              E0h    prefix code
 29h    ` ~              59h    [Note1] F15      E1h    prefix code
 2Ah    Left Shift       5Ah    PA1              EEh    ECHO
 2Bh    \ |              5Bh    F13 (LWin)       F0h    prefix code (key break)
 2Ch    Z                5Ch    F14 (RWin)       FAh    ACK
 2Dh    X                5Dh    F15 (Menu)       FCh    diag failure (MF-kbd)
 2Eh    C                                        FDh    diag failure (AT-kbd)
 2Fh    V                                        FEh    RESEND
 30h    B                                        FFh    kbd error/buffer full
Notes:  scan codes 56h-E1h are only available on the extended (101/102-key)
          keyboard and Host Connected (122-key) keyboard; scan codes 5Bh-5Dh
          are only available on the 122-key keyboard and the Microsoft Natural
          Keyboard; scan codes 5Eh-76h are only available on the 122-key
          keyboard
        in the default configuration, break codes are the make scan codes with
          the high bit set; make codes 60h,61h,70h, etc. are not available
          because the corresponding break codes conflict with prefix codes
          (code 2Ah is available because the self-test result code AAh is only
          sent on keyboard initialization).  An alternate keyboard
          configuration can be enabled on AT and later systems with enhanced
          keyboards, in which break codes are the same as make codes, but
          prefixed with an F0h scan code
        prefix code E0h indicates that the following make/break code is for a
          "gray" duplicate to a key which existed on the original PC keyboard;
          prefix code E1h indicates that the following make code has no
          corresponding break code (currently only the Pause key generates no
          break code)
        the Microsoft Natural Keyboard sends make codes 5Bh, 5Ch, and 5Dh
          (all with an E0h prefix) for the Left Windows, Right Windows, and
          Menu keys on the bottom row
        the European "Cherry G81-3000 SAx/04" keyboard contains contacts for
          four additional keys, which can be made available by a user
          modification; the three new keys located directly below the cursor
          pad's Delete, End, and PgDn keys send make codes 66h-68h (F19-F21);
          the fourth new key, named <delta>, sends make code 73h
        the SysReq key is often labeled SysRq
        the "Accord" ergonomic keyboard with optional touchpad (no other
          identification visible on keyboard or in owner's booklet) has an
          additional key above the Grey- key marked with a left-pointing
          triangle and labeled "Fn" in the owner's booklet which returns
          scan codes E0h 68h on make and E0h E8h on break
        the "Preh Commander AT" keyboard with additional F11-F22 keys treats
          F11-F20 as Shift-F1..Shift-F10 and F21/F22 as Ctrl-F1/Ctrl-F2; the
          Eagle PC-2 keyboard with F11-F24 keys treated those additional keys
          in the same way
        [Note1] the "Cherry G80-0777" keyboard has additional F11-F15 keys
          which generate make codes 55h-59h; some other extended keyboards
          generate codes 55h and 56h for F11 and F12, which cannot be managed
          by standard DOS keyboard drivers
        [Note2] the Schneider/Amstrad PC1512 PC keyboards contain extra keys,
          a mouse, and a digital joystick, which are handled like extra keys.
          The joystick's motion scancodes are converted into standard arrow
          keys by the BIOS, and the joystick and mouse button scan codes are
          converted to FFFFh codes in the BIOS keyboard buffer
          (see CMOS 15h"AMSTRAD").
          In addition to the keys listed in the table above, there are
            Del-> (delete forward)      70h
            Enter                       74h
SeeAlso: #00602 at INT 16/AX=6F07h,#03214 at INT 4A/AH=05h
--------*-09---------------------------------
INT 09 P - internal hardware - RESERVED BY Intel (80486)
Note:   this exception has been moved to INT 0D
SeeAlso: INT 09"CPU",INT 0D
--------H-0A---------------------------------
INT 0A C - IRQ2 - LPT2 (PC), VERTICAL RETRACE INTERRUPT (EGA,VGA)
Notes:  the TOPS and PCnet adapters use this interrupt request line by default
        DOS 3.2 revectors IRQ2 to a stack-switching routine; DOS 3.3+ does so
          unless STACKS=0 has been set in CONFIG.SYS.  MS/PC-DOS 3.3+ use the
          IBM Interrupt Sharing Protocol (see #02568) when hooking this IRQ
        on ATs and above, the physical data line for IRQ2 is labeled IRQ9 and
          connects to the slave 8259.  The BIOS redirects the interrupt for
          IRQ9 back here.
        under DESQview, only the INT 15h vector and BASIC segment address (the
          word at 0000h:0510h) may be assumed to be valid for the handler's
          process
        many VGA boards do not implement the vertical retrace interrupt,
          including the IBM VGA Adapter where the traces are either cut or
          removed
SeeAlso: INT 52"DESQview",INT 5A"DoubleDOS",INT 71,INT 7A"GO32"
--------H-0A---------------------------------
INT 0A C - IRQ2 - Tandy 1000-series HARD DISK
Notes:  this interrupt may be masked by setting bit 2 on I/O port 21h
        the Tandy 1000, 1000A, and 1000HD use IRQ2 for the hard disk; the
          1000EX, HX, RLX, RLX-HD, RLX-B, RLX-HD-B use IRQ5 instead; the
          1000RL, RL-HD, SL, SL/2, TL, TL/2, and TL/3 are jumper-selectable
          for either IRQ2 or IRQ5 (default IRQ5); the 1000SX and TX are
          DIP-switch selectable for IRQ2 or IRQ5 (default IRQ2); the RSX and
          RSX-HD use IRQ14.  Tandy systems which use IRQ2 for the hard disk
          interrupt use IRQ5 for vertical retrace.
SeeAlso: INT 52"DESQview",INT 5A"DoubleDOS",INT 71
--------H-0A---------------------------------
INT 0A - IRQ2 - ROLAND MPU MIDI INTERFACE
Note:   newer Roland cards and MIDI interfaces by other manufacturers use
          a jumper-selectable IRQ, but software and hardware generally defaults
          to IRQ2
SeeAlso: INT 52"DESQview",INT 5A"DoubleDOS",INT 71,INT 7A"GO32"
--------H-0B---------------------------------
INT 0B C - IRQ3 - SERIAL COMMUNICATIONS (COM2)
Desc:   automatically asserted by the UART when COM2 needs attention, if the
          UART has been programmed to generate interrupts
Notes:  the TOPS and PCnet adapters use this interrupt request line as an
          alternate
        on PS/2s, COM2 through COM8 share this interrupt; on many PC's, COM4
          shares this interrupt
        may be masked by setting bit 3 on I/O port 21h
        DOS 3.3+ revectors IRQ3 to a stack-switching routine unless STACKS=0
          has been set in CONFIG.SYS.  MS/PC-DOS use the IBM Interrupt Sharing
          Protocol (see #02568) when hooking this IRQ
SeeAlso: INT 0C"COM1",INT 53"DESQview",INT 5B"DoubleDOS",INT 7B"GO32"
--------h-0B---------------------------------
INT 0B - HP 95LX - LOW-LEVEL KEYBOARD HANDLER
Desc:   this is the lowest-level keyboard handler on an HP 95LX palmtop
Note:   debounces key, places the keycode in I/O register 60h, and calls INT 09
SeeAlso: INT 09,INT 0D"HP 95LX",INT 15/AX=4DD4h
--------H-0C---------------------------------
INT 0C C - IRQ4 - SERIAL COMMUNICATIONS (COM1)
Desc:   automatically asserted by the UART when COM1 needs attention, if the
          UART has been programmed to generate interrupts
BUG:    this vector is modified but not restored by Direct Access v4.0, and
          may be left dangling by other programs written with the same version
          of compiled BASIC
Notes:  on many PC's, COM3 shares this interrupt
        may be masked by setting bit 4 on I/O port 21h
        DOS 3.3+ revectors IRQ4 to a stack-switching routine unless STACKS=0
          has been set in CONFIG.SYS.  MS/PC-DOS use the IBM Interrupt Sharing
          Protocol (see #02568) when hooking this IRQ
SeeAlso: INT 0B"COM2",INT 54"DESQview",INT 5C"DoubleDOS",INT 7C"GO32"
--------I-0C---------------------------------
INT 0C - IBM SYSTEM 36/38 WORKSTATION EMULATION - API POINTER
Desc:   the IBM System 36/38 emulator may be invoked through a private API,
          whose entry point address (see #00007) is offset 100h in the segment
          pointed at by this vector

(Table 00007)
Call the System 36/38 emulator API entry point with:
        AH = function
            03h update screen
            05h select next session
                AL = session number (00h-03h)
                Return: AL = session type code
                            00h not active
                            01h display session
                            02h printer session
                            FEh invalid session number
                        DS = requested session's data segment (0 if not active)
                            (see #00008)
Return: ???

Format of System 36/38 emulator's data area:
Offset  Size    Description     (Table 00008)
13Eh    BYTE    bit flags for status line indicators turned on since this byte
                last zerod
13Fh    BYTE    bit flags for status line indicators turned off since this
                byte last set to FFh
140h    WORD    offset of EBCDIC to ASCII translation
146h    WORD    offset of EBCDIC screen buffer
148h    WORD    offset of EC (engineering change) level signature
150h    BYTE    "KEYI"
151h    BYTE    5250 key scan code to be sent to remote
15Bh    BYTE    "SYSAV"
15Dh    BYTE    5250 cursor column
15Eh    BYTE    5250 cursor row
167h    BYTE    "DVCTAD"
178h    BYTE    "FLAGS"
184h    BYTE    "SESSNOAD"
193h    BYTE    "STNAD"
198h    BYTE    "NSDS"
Note:   offsets are from the interrupt handler's segment
--------H-0D---------------------------------
INT 0D C - IRQ5 - FIXED DISK (PC,XT), LPT2 (AT), reserved (PS/2)
Notes:  under DESQview, only the INT 15h vector and BASIC segment address (the
          word at 0000h:0510h) may be assumed to be valid for the handler's
          process
        DOS 3.3+ revectors IRQ5 to a stack-switching routine unless STACKS=0
          has been set in CONFIG.SYS.  MS/PC-DOS use the IBM Interrupt Sharing
          Protocol (see #02568) when hooking this IRQ
        the Tandy 1000, 1000A, and 1000HD use IRQ2 for the hard disk; the
          1000EX, HX, RLX, RLX-HD, RLX-B, RLX-HD-B use IRQ5 instead; the
          1000RL, RL-HD, SL, SL/2, TL, TL/2, and TL/3 are jumper-selectable
          for either IRQ2 or IRQ5 (default IRQ5); the 1000SX and TX are
          DIP-switch selectable for IRQ2 or IRQ5 (default IRQ2); the RSX and
          RSX-HD use IRQ14.  Tandy systems which use IRQ2 for the hard disk
          interrupt use IRQ5 for vertical retrace.
        may be masked by setting bit 5 on I/O port 21h
SeeAlso: INT 0E"IRQ6",INT 0F"IRQ7",INT 55"DESQview",INT 5D"DoubleDOS"
SeeAlso: INT 7D"GO32"
--------H-0D---------------------------------
INT 0D C - IRQ5 - Tandy 1000 60 Hz RAM REFRESH
Desc:   used to ensure that the dynamic RAM retains its contents in earlier
          1000-series models; later models use normal DMA for RAM refresh
          (some early models have no DMA unless it is added via an expansion
          card)
SeeAlso: INT 55
--------h-0D---------------------------------
INT 0D - HP 95LX - INFRARED INTERRUPT
Desc:   this interrupt is used to perform communications over the infrared
          data link
SeeAlso: INT 0B"HP 95LX",INT 0E"HP 95LX",INT 15/AX=4DD4h
--------H-0E---------------------------------
INT 0E C - IRQ6 - DISKETTE CONTROLLER
Desc:   this interrupt is generated by the floppy disk controller on
          completion of an operation
Notes:  default handler is at F000h:EF57h in IBM PC and 100%-compatible BIOSes
        may be masked by setting bit 6 on I/O port 21h
        DOS 3.3+ revectors IRQ6 to a stack-switching routine unless STACKS=0
          has been set in CONFIG.SYS.  MS/PC-DOS use the IBM Interrupt Sharing
          Protocol (see #02568) when hooking this IRQ
SeeAlso: INT 0D"IRQ5",INT 56"DESQview",INT 5E"DoubleDOS",INT 7E"GO32"
--------h-0E---------------------------------
INT 0E C - HP 95LX - EXTERNAL CARD INTERRUPT
SeeAlso: INT 0D"HP 95LX",INT 0F"HP 95LX",INT 15/AX=4DD4h
--------H-0F---------------------------------
INT 0F C - IRQ7 - PARALLEL PRINTER
Desc:   this interrupt is generated by the LPT1 printer adapter when the
          printer becomes ready
Notes:  most printer adapters do not reliably generate this interrupt
        the 8259 interrupt controller generates an interrupt corresponding to
          IRQ7 when an error condition occurs
SeeAlso: INT 0D"IRQ5",INT 57"DESQview",INT 5F"DoubleDOS",INT 7F"GO32"
SeeAlso: MEM 0040h:006Bh
--------h-0F---------------------------------
INT 0F C - HP 95LX - REAL-TIME CLOCK
SeeAlso: INT 0E"HP 95LX",INT 15/AX=4DD4h,INT 70"IRQ8"
