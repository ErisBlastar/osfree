%{
#define YYSTYPE char *

char * fileheader;
char * imagesize;
char * imageaddress;

%}

%token IDENT DEFINITION FORMAT END ADDRESS FILEHEADER IMAGESIZE IMAGEADDRESS 
%token SIZE ARRAY DIGIT LB RB PLUS MINUS MUL DIV

%%

spec: formatdefinition defin_seq loading_info;

formatdefinition: DEFINITION FORMAT parts_list END FORMAT {printf("parts: %s\n",$3);}
	;

parts_list: ident 
	| parts_list ident  { $$=strcat(strcat($1, " "),$2);}
	;

defin_seq: defin 
	| defin_seq defin
	;

defin	:  DEFINITION ident ADDRESS expression scope_def END ident {printf("part %s at %s\n", $2, $4);}
                ; 
	
loading_info:  info
	| loading_info info
	;

info	: FILEHEADER ident {  fileheader=strdup($2); }
	| IMAGESIZE expression { imagesize=strdup($2); }
	| IMAGEADDRESS expression  { imageaddress=strdup($2); }
	;

scope_def: type_exp
	| ident type_exp
	| scope_def ident type_exp
	;

type_exp	:  SIZE expression 
	|  ARRAY expression scope_def END ident
	;

expression:  DIGIT
	| ident
	| expression PLUS expression {$$=strcat($1, "+");}
	| expression MINUS expression {$$=strcat($1, "-");}
	| expression MUL expression {$$=strcat($1, "*");}
	| expression DIV expression{$$=strcat($1, "/");}
	| LB expression RB 
	;

ident: IDENT;

%%

void
yyerror( char *s )             /* called for yacc syntax error */
{
  fprintf(stderr, " %s", s);
}


void main(int argc, char *argv[]) 
{ 
  extern FILE *yyin; 
  yyin=fopen(argv[1], "r"); 
  printf("Parsing file %s...\n", argv[1]);
  yyparse(); 
  fclose(yyin); 

printf("/* This file is generated by the BFF generator using the grammar in \"%s\" */ \n", argv[1]);
printf("\n");
printf("#ifndef _LOAD_H_\n");
printf("#define _LOAD_H_ \n");
printf("\n");
printf("#ifdef __MSDOS__\n");
printf(" #define INT int\n");
printf(" #define LONG unsigned long\n");
printf("#else\n");
printf(" #define INT short int\n");
printf(" #define LONG unsigned int\n");
printf("#endif __MSDOS__ \n");
printf("\n");
printf("typedef unsigned char byte;\n");
printf("typedef short int16; \n");
printf("\n");
printf("#define LH(p) ((int16)((byte*)(p))[0]+((int16)((byte*)(p))[1]<<8))  \n");
printf("\n");
printf("typedef struct {\n");
printf(" byte h_sigLo;\n");
printf(" byte h_sigHi;\n");
printf(" INT h_lastPageSize;\n");
printf(" INT h_numPages;\n");
printf(" INT h_numReloc;\n");
printf(" INT h_numParaHeader;\n");
printf(" INT h_minAlloc;\n");
printf(" INT h_maxAlloc;\n");
printf(" INT h_initSS;\n");
printf(" INT h_initSP;\n");
printf(" INT h_checkSum;\n");
printf(" INT h_initIP;\n");
printf(" INT h_initCS;\n");
printf(" INT h_relcTabOffset;\n");
printf(" INT h_overlayNum;\n");
printf("} headerT; \n");
printf("\n");
printf("typedef struct {\n");
printf(" %sT *%s;\n", fileheader, fileheader);
printf(" byte* section;\n");
printf(" char* filename;\n");
printf(" LONG imagesize;\n");
printf(" byte* image;\n");
printf("} BFF; \n");
printf("\n");
printf("extern BFF* aBFF; \n");
printf("\n");
printf("LoadImage(char* filename);  \n");
printf("\n");
printf("#endif _LOAD_H_ \n");

printf("/* This file is generated by the BFF generator using the grammar in '%s' */ \n", argv[1]);
printf("\n");
printf("#include <stdio.h>\n");
printf("#include <string.h>\n");
printf("#include \"loader.h\"  \n");
printf("\n");
printf("BFF *aBFF;  \n");
printf("\n");
printf("\n");
printf("LoadImage(char* filename) {\n");
printf(" FILE *fp;\n");
printf(" LONG imageaddress; \n");
printf("\n");
printf(" if ((fp=fopen(filename, \"rb\"))==NULL) { \n");
printf("   printf(\"cannot open file \");\n");
printf("   return 0;\n");
printf(" }\n");
printf(" aBFF = (BFF *)malloc(sizeof(BFF));\n");
printf(" aBFF->%s = (%sT *)malloc(sizeof(%sT));\n", fileheader, fileheader, fileheader);
printf(" if (fread(aBFF->%s, sizeof(%sT), 1, fp) != 1) {\n", fileheader, fileheader);
printf("   printf(\"cannot read file \");\n");
printf("   return 0;\n");
printf(" }\n");
printf(" aBFF->imagesize = %s\n;", imagesize);
//LH(&aBFF->header->h_numPages) * 512 -  \n");
//printf("       LH(&aBFF->header->h_numParaHeader) * 16 - (512 -  \n");
//printf("       LH(&aBFF->header->h_lastPageSize)); \n");
printf("\n");
printf(" aBFF->image = (byte *)malloc(aBFF->imagesize);\n");
printf(" fseek(fp, %s\n", imageaddress);
//(Int)LH(&aBFF->header->h_numParaHeader) * 16, SEEK_SET);\n");
printf(" if (fread(aBFF->image, (size_t)aBFF->imagesize, 1, fp))!=1) {\n");
printf("   printf(\"error reading image \");\n");
printf("   return 0;\n");
printf(" }\n");
printf(" imageaddress = %s\n", imageaddress);
//LH(&aBFF->header->h_numParaHeader) * 16; \n");
printf("\n");
printf(" aBFF->section = aBFF->image + LH(&aBFF->header->h_initIP) + 16 - imageaddress;\n");
printf("\n");
printf(" aBFF->filename = (char*)malloc(sizeof(char)*(strlen(filename)+1));\n");
printf(" strcpy(aBFF->filename, filename);\n");
printf(" fclose(fp); \n");
printf("\n");
printf("} /* LoadImage */ \n");

} 
