The FreePM Project Coding Standards Draft

1. Programming Language
Project language is C++ with "human face".
i.e. don't use non-portable constructions and features

1.1. Coding in pure C
is acceptable, but it is recommened to use C++ as C compiler, i.e. give
file name extension as .cpp instead of .c
1.1.1 Don't use C++ reserved words as C-variable names.
      i.e don't use "int class, operator, public, this;" etc.
Bad examples from Squid src:
    peer *this;
    for (this = Config.peers; this; this = next)

1.1.2. Don't use nested sruct and enums, for example  use

enum gopherCONVERSION {
       NORMAL,
       [...]
       HTML_CSO_PAGE
    };

typedef struct gopher_ds {
    StoreEntry *entry;
    gopherCONVERSION conversion;
[...]
    int HTML_header_added;
} GopherStateData;

     instead of

typedef struct gopher_ds {
    enum {
        NORMAL,
        [...]
        HTML_CSO_PAGE
    } conversion;
    int HTML_header_added;
   [...]
} GopherStateData;


1.1.3  Always use prorer type or as minimum type cast
   i.e instead of

static void peerCountMcastPeersDone(void *data)
{    ps_state *psstate = data;

  write code for

static void peerCountMcastPeersDone(ps_state *psstate)

  or as minimum use type cast

static void peerCountMcastPeersDone(void *data)
{    ps_state *psstate = (ps_state *)data;


1.1.4 Don't use  assignment in logical expression. (Both C and C++)
      i.e. instead of
       if ((e = http->entry))
      use
       e = http->entry;
       if (e)


1.2  Don't use C++ templates, don't use STL
1.3  Don't use C++ exceptions
1.4  Don't declare variables inside for() i.e.
     use
         int i;
         for ( i = 0; i < 10; i++ )
     instead of
      for ( int i = 0; i < 10; i++ )

1.5. Don't use nested classes
            instead of

           class PublicLibClass {
           ...
           private:
             class PrivateLibClass { ... } m_object;
           };

         you can try the following:

           class PrivateLibClass; // fwd decl
           class PublicLibClass {
           ...
           private:
            class PrivateLibClass *m_pObject;
           };



2. Doc & Comment Language
English and Russian


3. Coding style recomended

3.0 Braces abd blocks
  {
     {
     }
  }
  braces of the same level shold be at same position
3.1 if format
 if(var1 & var2)
      var =

3.2 for format
 for(i=0; i < n; i++)
 {
     for(j=0; j < m; j++)
     {
     }
 }

3.3 Spaces
   Don't write
     x=y+z;
     for(i=0;i<n;i++)
   instead of
     x = y + z;
     for(i = 0; i < n; i++)

4.Naming conventions

use _ for FreePM internal fuctions and variables

use F_  prefix for FreePM analogs of PM's  filenames, declarations,
        functions and variables, (if need). i.e. add F_ for all WinXXX  and GpiXX
        functions
use Fs_ prefix for server-specific filenames, declarations etc.
use Fc_ prefix for client-specific filenames, declarations etc.
use Fcs_ prefix for client-side-server- specific filenames, declarations etc.

5. Portability

5.1 Use as possible standard C library functions instead of DosXXX
5.2 Place as possible DosXXX and other system-dependable code to separate files
5.3 Have in mind possibilities of running client and/or server side
    on different platform in future

6. Compatibility
Make function calls and public structures compatible to PM as close as possible

7. Coding as simple as possible.
   No optimization at first steps, exept if it is algorithm used.
