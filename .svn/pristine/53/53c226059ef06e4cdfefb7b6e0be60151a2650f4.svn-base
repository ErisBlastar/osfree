{\rtf1\ansi\ansicpg1252\uc1 \deff1\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f53\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}
{\f71\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}StarBats;}{\f84\froman\fcharset2\fprq2{\*\panose 00000000000000000000}ZapfDingbats BT;}{\f91\froman\fcharset238\fprq2 Times New Roman CE;}{\f92\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f94\froman\fcharset161\fprq2 Times New Roman Greek;}{\f95\froman\fcharset162\fprq2 Times New Roman Tur;}{\f96\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f97\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f98\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f99\fswiss\fcharset238\fprq2 Arial CE;}{\f100\fswiss\fcharset204\fprq2 Arial Cyr;}{\f102\fswiss\fcharset161\fprq2 Arial Greek;}{\f103\fswiss\fcharset162\fprq2 Arial Tur;}
{\f104\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f105\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f106\fswiss\fcharset186\fprq2 Arial Baltic;}{\f107\fmodern\fcharset238\fprq1 Courier New CE;}{\f108\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f110\fmodern\fcharset161\fprq1 Courier New Greek;}{\f111\fmodern\fcharset162\fprq1 Courier New Tur;}{\f112\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f113\fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f114\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f515\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f516\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f518\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f519\fswiss\fcharset162\fprq2 Arial Narrow Tur;}
{\f522\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \snext0 Normal;}{\s1\ql \li0\ri0\sb360\sa240\keepn\nowidctlpar\faauto\rin0\lin0\itap0 \b\f1\fs32\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 1;}{
\s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 2;}{\s3\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar
\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\rin0\lin0\itap0 \b\f1\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 3;}{\s4\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw5\brsp20\brdrcf1 
\tqr\tx9072\faauto\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 4;}{\s5\ql \li0\ri0\sa120\keepn\nowidctlpar\faauto\rin0\lin0\itap0 \b\i\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 
\sbasedon0 \snext0 heading 5;}{\s6\ql \li0\ri0\sb240\sa60\nowidctlpar\faauto\rin0\lin0\itap0 \i\f1\fs22\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 6;}{\s7\ql \li0\ri0\sb240\sa60\nowidctlpar\faauto\rin0\lin0\itap0 
\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 7;}{\s8\ql \li0\ri0\sb240\sa60\nowidctlpar\faauto\rin0\lin0\itap0 \i\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 8;}{
\s9\ql \li0\ri0\sb240\sa60\nowidctlpar\faauto\rin0\lin0\itap0 \i\f1\fs18\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext15 Standard;}{\s16\ql \fi-284\li284\ri0\sa120\nowidctlpar\tx284\faauto\rin0\lin284\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext16 \sautoupd 
List Bullet;}{\s17\ql \li284\ri0\sa120\nowidctlpar\faauto\rin0\lin284\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext17 List Continue;}{\s18\ql \fi-284\li284\ri0\sa120\nowidctlpar\faauto\rin0\lin284\itap0 
\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext18 List Number;}{\s19\ql \fi-284\li568\ri0\sa120\nowidctlpar\faauto\rin0\lin568\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 \sautoupd 
List Bullet 2;}{\s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 Hypertext Anchor;}{\s21\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 
\f1\fs20\cf13\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext21 Synonyms;}{\s22\ql \fi-284\li284\ri0\sa120\nowidctlpar\tx284\faauto\rin0\lin284\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon18 \snext22 
List Manual;}{\s23\ql \fi-284\li568\ri0\sa120\nowidctlpar\faauto\rin0\lin568\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext23 List Number 2;}{\s24\ql \li566\ri0\sa120\nowidctlpar\faauto\rin0\lin566\itap0 
\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext24 List Continue 2;}{\s25\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\cf11\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext25 
Definition Term;}{\s26\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\cf11\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon25 \snext26 Definition Definition;}{\s27\ql \fi-283\li283\ri0\sa120\nowidctlpar\faauto\rin0\lin283\itap0 
\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext27 Tip;}{\s28\ql \fi-283\li283\ri0\sa120\nowidctlpar\faauto\rin0\lin283\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon27 \snext28 Note;}{
\s29\ql \fi-283\li283\ri0\sa120\nowidctlpar\faauto\rin0\lin283\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon28 \snext29 Important;}{\s30\ql \fi-284\li568\ri0\sa120\nowidctlpar\tx284\tx568\faauto\rin0\lin568\itap0 
\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon23 \snext30 List Manual 2;}{\s31\ql \li0\ri0\nowidctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon15 \snext31 
footer;}{\s32\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \i\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext32 Comment;}{\s33\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 
\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext33 annotation text;}{\s34\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \i\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext34 Body Text;}{\*\cs35 
\additive \f3\fs24 RTF_Num 6 1;}{\*\cs36 \additive \f84 RTF_Num 6 12;}{\*\cs37 \additive \f84 RTF_Num 6 11;}{\*\cs38 \additive \fs24 \sbasedon10 endnote reference;}{\*\cs39 \additive \b\f2\fs20 \sbasedon10 Key Name;}{\*\cs40 \additive \b\fs20 \sbasedon10 
App Text;}{\*\cs41 \additive \scaps\f53\fs20\cf13 \sbasedon10 Graphic Link;}{\*\cs42 \additive \fs16 \sbasedon10 annotation reference;}{\*\cs43 \additive \f71\fs18 Bullet Symbols;}{\s44\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\i\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext44 Body Text 2;}}{\*\listtable{\list\listtemplateid2106392198\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li643\jclisttab\tx643 }{\listname ;}\listid-129}{\list\listtemplateid-18992118\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li643\jclisttab\tx643 }{\listname ;}\listid-125}{\list\listtemplateid754108214\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid-120}
{\list\listtemplateid-2124277178\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid-119}}{\*\listoverridetable{\listoverride\listid-119\listoverridecount0\ls1}{\listoverride\listid-120\listoverridecount0\ls2}{\listoverride\listid-125\listoverridecount0\ls3}{\listoverride\listid-129
\listoverridecount0\ls4}{\listoverride\listid-119\listoverridecount0\ls5}{\listoverride\listid-120\listoverridecount0\ls6}{\listoverride\listid-125\listoverridecount0\ls7}{\listoverride\listid-129\listoverridecount0\ls8}{\listoverride\listid-119
\listoverridecount0\ls9}{\listoverride\listid-120\listoverridecount0\ls10}{\listoverride\listid-125\listoverridecount0\ls11}{\listoverride\listid-129\listoverridecount0\ls12}{\listoverride\listid-119\listoverridecount0\ls13}{\listoverride\listid-120
\listoverridecount0\ls14}{\listoverride\listid-125\listoverridecount0\ls15}{\listoverride\listid-129\listoverridecount0\ls16}{\listoverride\listid-119\listoverridecount0\ls17}{\listoverride\listid-120\listoverridecount0\ls18}{\listoverride\listid-125
\listoverridecount0\ls19}{\listoverride\listid-129\listoverridecount0\ls20}{\listoverride\listid-119\listoverridecount0\ls21}{\listoverride\listid-120\listoverridecount0\ls22}{\listoverride\listid-125\listoverridecount0\ls23}{\listoverride\listid-129
\listoverridecount0\ls24}}{\info{\author Mark Hessling}{\operator Mark Hessling}{\creatim\yr2001\mo8\dy27\hr7\min16}{\revtim\yr2001\mo9\dy27\hr14\min50}{\version35}{\edmins253}{\nofpages18}{\nofwords2897}{\nofchars16514}
{\*\company QCOM Australia Pty. Ltd.}{\nofcharsws0}{\vern8269}}\paperw11907\paperh16840\margl567\margr7371\margt567\margb1256 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120
\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl \fet0\sectd \sbknone\linex0\sectdefaultcl {\footer \pard\plain \s31\qc \li0\ri0\nowidctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 
\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field{\*\fldinst {\fs20 \\page\\* alphabetic}}{\fldrslt {\fs20 o}}}{\fs20 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s32\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 
\i\f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Author: Mark Hessling 
\par Date: 27-8-2001
\par Version: 3.0
\par }\pard\plain \s1\ql \li0\ri0\sb360\sa240\keepn\nowidctlpar\faauto\outlinelevel0\rin0\lin0\itap0 \b\f1\fs32\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Regina Rexx
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Regina Rexx
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {0100intro
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\cs41\scaps\f53\cf13 ARCHIVE=recrexx NAME=rexx48
\par }{This document is a quick reference guide to Regina Rexx. It contains a short description of Rexx keyword instructions and Builtin Functions.
\par It also contains some information on running Regina Rexx on the EPOC32 platform.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Regina Rexx on EPOC32
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {0500invoking
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {On the EPOC32 platform, Rexx programs can be invoked 3 ways. 
\par From }{\b RexxStart}{
\par Tap the }{\i Command Line}{ button. This presents you with a file selection dialog where you choose the Rexx program file to be execute
d. When you exit this dialog, another dialog box is presented that allows you to set the trace switch, override the selected filename and specify arguments to the Rexx program.  Once this dialog is completed, tap the Run button to run the program as speci
fied. 
\par From }{\b System}{
\par Any file with the Regina icon (.rexx and .rex extensions) can be tapped twice, and the program will be executed. No arguments can be passed with this method.
\par From }{\b Shell5+}{
\par }\pard\plain \s33\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {At the Shell5+ prompt, type 
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b rexx}{ programname arguments. eg.:
\par C:\\documents> rexx c:\\mydir\\a.rexx arg1
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Rexx Keyword Instructions
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1000instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {The following sections describe the Rexx keyword instructions supplied with Regina.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ADDRESS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1010instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ADDRESS}{ env [expr]
\par }{\b ADDRESS}{ (var) [expr]
\par }{\b ADDRESS VALUE}{ var [expr]
\par }{\b ADDRESS}{ env expr }{\b WITH}{ resources
\par Pass a command to an external environment for execution. 
\par }{\i env}{ defines the environment to which the command is passed.
\par }{\i expr}{ is the command to be executed.
\par }{\i var}{ is a variable whose value is the external environment. Note that }{\i ADDRESS (var) expr}{ syntax is not ANSI compliant.
\par }{\i resources}{ defines where the input/output/error for or from the command passed to the external environment is sourced and can be one or more of:
\par }{\b INPUT}{ input_redir
\par }{\b OUTPUT}{ output_redir
\par }{\b ERROR}{ output_redir
\par Where }{\i input_redir}{ is one of:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b NORMAL
\par STREAM}{ stream
\par }{\b STEM}{ stem.
\par }{\b FIFO
\par LIFO
\par }\pard \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 {and }{\i output_redir}{ is one of:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b NORMAL
\par STREAM}{ [}{\b APPEND}{|}{\b REPLACE}{] stream
\par }{\b STEM}{ [}{\b APPEND}{|}{\b REPLACE}{] stem.
\par }{\b FIFO
\par LIFO
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ARG
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1020instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ARG [template]}{
\par Parses the argument string at the current procedural level using the }{\i template}{. Performed in upper-case mode. Equivalent to PARSE UPPER ARG [template]
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CALL
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1030instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CALL}{ routine [param,param...]]
\par }{\b CALL}{ }{\b ON|OFF}{ condition [}{\b NAME}{ label]
\par The first form invokes a subroutine; either internal built-in or external.
\par The second form catches the named }{\i condition}{, and invokes the named }{\i label}{ as a subroutine.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DO/END
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1040instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DO}{ [repetitor] [conditional]
\par \tab [clauses]
\par  }{\b END}{ [symbol]
\par }{\b repetitor:=}{ symbol = expr [}{\b TO}{ expr] [}{\b BY}{ expr] [}{\b FOR}{ expr] | expr | }{\b FOREVER}{
\par }{\b conditional:=}{ }{\b WHILE}{ expr | }{\b UNTIL}{ expr
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 DO}{/}{\f2 END}{ instruction is the instruction used for looping and grouping several statements into one block.  This is a multi-clause instruction.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DROP
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1050instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DROP}{ symbol [symbol ...]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 DROP}{ instruction makes the named }{\i variable}{s uninitialized, i.e. the same state that they had at the startup of the program.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {EXIT
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1060instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b EXIT}{ [expr]
\par Terminates the program and optionally returns the value of }{\i expr}{ to the caller.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {IF/THEN/ELSE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1070instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b IF}{ expr }{\b THEN}{ statement1 [}{\b ELSE}{ statement2]
\par Resolves }{\i expr}{ to a boolean (0 or 1) and executes }{\i statement1}{ if 1 or }{\i statement2}{ if 0.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {INTERPRET
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1080instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b INTERPRET}{ exp
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {This instruction is used to dynamically build and execute REXX instructions during run-time.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ITERATE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1090instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ITERATE}{ [symbol]
\par Iterates the control variable of the innermost loop construct or the loop construct identified by }{\i symbol}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {LEAVE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1100instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b LEAVE}{ [symbol]
\par Terminates the innermost loop construct or the loop construct identified by }{\i symbol}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {NOP
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1110instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b NOP}{
\par Does nothing.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {NUMERIC
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1120instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b NUMERIC DIGITS}{ expr
\par }{\b NUMERIC FORM SCIENTIFIC | ENGINEERING | VALUE}{ expr
\par }{\b NUMERIC FUZZ }{expr
\par Change the behaviour of arithmetic representations.}{\b 
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {OPTIONS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1130instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b OPTIONS}{ option...
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 OPTIONS}{
 instruction is used to set various interpreter-specific options. Its typical uses are to select certain Rexx dialects, enable optimizations (e.g. time versus memory considerations), etc.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {PARSE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1140instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b PARSE [UPPER] ARG|LINEIN|SOURCE|VERSION }{template}{\b 
\par PARSE VALUE }{expr }{\b WITH }{var\'85}{\b 
\par PARSE VAR }{var template
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 PARSE}{ instruction takes one or more source strings, and then parses them using the }{\i template}{
 for directions. The process of parsing is one where parts of a source string are extracted and stored in variables. Exactly which parts, is determined by the patterns.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {PROCEDURE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1150instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b PROCEDURE [EXPOSE}{ symbol \'85]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 PROCEDURE}{ instruction is used by Rexx subroutines in order to control how variables are shared among routines.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {PULL
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1160instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b PULL}{ [template]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {This statement takes a line from the top of the stack and parses it into the variables in the }{\i template}{
. It will also translate the contents of the line to uppercase. It is equivalent to PARSE UPPER PULL.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {PUSH
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1170instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b PUSH}{ [expr]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 PUSH}{ instruction will add a string to the stack. The string added will either be the result of the }{\i expr}{, or the nullstring if }{\i expr}{ is not specified.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {QUEUE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1180instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b QUEUE}{ [expr]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 QUEUE}{ instruction is identical to the }{\f2 PUSH}{ instruction, except for the position in the stack where the new line is inserted. While the }{\f2 PUSH}{
 puts the line on the "top" of the stack, the }{\f2 QUEUE}{ instruction inserts it at the bottom of the stack (FIFO).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RETURN
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1190instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RETURN}{ [expr]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {This instruction is used to terminate the current procedure level, and return control to a level above. 
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SELECT/WHEN/OTHERWISE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1200instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SELECT ; }{whenpart}{\b  [}{whenpart}{\b  \'85] [OTHERWISE [;] [}{statement}{\b  \'85]] END;
\par }{\i whenpart}{\b  : WHEN }{expr}{\b  [;] THEN [;] }{statement}{\b  
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {This instruction is used for general purpose, nested }{\f2 IF}{ structures.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SIGNAL
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1210instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SIGNAL }{string}{\b |}{symbol}{\b 
\par SIGNAL VALUE }{expr}{\b 
\par SIGNAL ON|OFF }{condition}{\b  [NAME }{string}{\b |}{symbol}{\b ]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 SIGNAL}{ instruction is used for two purposes: (a) to transfer control to a named label in the program, and (b) to set up a named condition trap.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {TRACE
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1220instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b TRACE [}{number}{\b |A|S|C|E|F|I|L|N|O|R|S| VALUE }{expr}{\b ]
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {The }{\f2 TRACE}{
 instruction is used to set a tracing mode. Depending on the current mode, various levels of debugging information is displayed for the programmer. Also interactive tracing is allowed, where the user can re-execute clauses, change values of variables, or 
in general, execute REXX code interactively between the statements of the REXX script.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {UPPER
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1230instructions
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b UPPER}{ symbol ...
\par Uppercases the specified variables. This command is NOT part of the ANSI Standard.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Operators
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {1200operators
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {This section lists valid Rexx operators.
\par }{\b Arithmetic
\par +}{\tab Addition
\par }{\b -}{\tab Subtraction
\par }{\b *}{\tab Multiply
\par }{\b **}{\tab Power
\par }{\b /}{\tab Divide
\par }{\b %}{\tab Integer divide
\par }{\b //}{\tab Remainder divide
\par }{\b Comparative (Non-strict)
\par =}{\tab Equals (ignores leading/trailing spaces)
\par }{\b Comparative (Strict)
\par ==}{\tab Exact equality
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Built-in Functions
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2000functions
\par }\pard\plain \s21\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\cf13\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {Synonyms for the topic
\par }\pard\plain \ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {This following sections list all built-in function supplied with Regina. 
\par Functions marked with }{\b ANSI}{ are defined by the 1996 ANSI Standard. 
\par Functions marked with }{\b SAA}{ are defined in IBM's SAA standard and are common to most Rexx interpreters.
\par Functions marked with }{\b CMS}{ were originally available VM/CMS, but are not included in the ANSI standard.
\par Functions marked with }{\b OS/2}{ were provided on OS/2, but are not included in the ANSI standard.
\par Functions marked with }{\b Regina}{ are extensions provided by Regina.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ABBREV\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2010functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ABBREV(long,short[,length])
\par }{Returns \lquote 1' or \lquote 0', depending on whether }{\i short}{ is an abbreviation of }{\i long}{, or at least }{\i length}{ characters.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ABS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2020functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ABS(number)
\par }{Returns the absolute value of }{\i number}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ADDRESS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2030functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ADDRESS()
\par }{Returns the name of the current environment.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ARG\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2040functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ARG([argno[,option]])
\par }{Without parameters, it returns the number of parameters. If only }{\i argno}{ is specified, it must be a number, and that parameter is returned. 
\par }{\i option}{ can be }{\b E}{, }{\b N}{ or }{\b O}{, and then either \lquote 0' or \lquote 1' is returned, depending on whether the numbered parameter existed or was omitted. The option }{\b N}{ is the same as not specifying an option.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {B2X\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2050functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b B2X(binstring)
\par }{Converts the bin-string }{\i binstring}{ to a hex-string.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {BEEP\tab OS/2
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2051functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b BEEP(freq[,dur])
\par }{Plays a sound at the specified }{\i freq}{ for }{\i dur}{ milliseconds on the system's sound output device.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {BITAND\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2060functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b BITAND(string1[,[string2][,padchar]])
\par }{Returns a string which is the bitwise AND of its two first parameters.
\par The shorter string is padded with }{\i padchar}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {BITOR\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2070functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b BITOR(string1[,[string2][,padchar]])
\par }{Like BITAND() but uses logical OR.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {BITXOR\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2080functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b BITXOR(string1[,[string2][,padchar]])
\par }{Like BITAND() but uses logical XOR.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {BUFTYPE\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2081functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b BUFTYPE()
\par }{Displays the contents of CMS buffers. Deprecated: use RXQUEUE().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {C2D\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2090functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b C2D(string[,length])
\par }{Converts the character string }{\i string}{ to a decimal number. }{\i length }{specifies the number of characters in }{\i string}{ to convert.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {C2X\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2100functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b C2X(string)
\par }{Converts the character string }{\i string}{ to a hex-string.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CD\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2101functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CD(directory)
\par }{Changes the current directory. Deprecated: use DIRECTORY().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CENTER\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2110functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CENTER(string,length[,padchar])}{
\par Centers }{\i string}{ in a string of }{\i length}{ characters, using }{\i padchar}{ for padding, if necessary.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CENTRE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2111functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CENTRE(string,length[,padchar])}{
\par Centres }{\i string}{ in a string of }{\i length}{ characters, using }{\i padchar}{ for padding, if necessary
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CHARIN\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2120functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CHARIN([streamid][,[start][,length]])
\par }{Read }{\i length}{ (default is 1) characters from an input stream (default is the standard input stream), optionally starting at position }{\i start}{ (default is the current read position).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CHANGESTR\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2130functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CHANGESTR(string1,string,string2)
\par }{Changes all occurrences of }{\i string1}{ in the string }{\i string}{ to }{\i string2}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CHAROUT\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2140functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CHAROUT([streamid][,[string][,start]])
\par }{Writes }{\i stream}{ to an output stream (default is the standard output stream), starting at position }{\i start}{ (default is the current write position).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CHARS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2150functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CHARS([streamid])
\par }{Returns the number of characters left in the input stream (default is the standard input stream).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CHDIR\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2151functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CHDIR(directory)
\par }{Changes the current directory. Deprecated: use DIRECTORY()
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {COMPARE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2160functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b COMPARE(string1,string2[,padchar])
\par }{Returns \lquote 0' or \lquote 1', depending on whether the two strings are equal.
\par The shorter string is padded with }{\i padchar}{, or space if }{\i padchar}{ is omitted.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CONDITION\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2170functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CONDITION([option])
\par }{Performs various operations on streams, see other documentation.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {COPIES\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2180functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b COPIES(string,copies)
\par }{Returns copies }{\i copies}{ of the string }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {COUNTSTR\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2190functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b COUNTSTR(string1,string)
\par }{Returns the number of occurrences of }{\i string1}{ in the string }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {CRYPT\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2191functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b CRYPT(string,salt)}{
\par Returns }{\i string}{, encrypted using basic Unix crypt() function.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DATATYPE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2200functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DATATYPE(string[,option])
\par }{Returns the datatype of }{\i string}{: 
\par \lquote }{\b NUM}{\lquote  if it is a number, 
\par \lquote }{\b LIT}{\lquote  if it is as valid literal that does not have a variable value, 
\par \lquote }{\b VAR}{\lquote  if it is a variable, and 
\par \lquote }{\b BAD}{\lquote  otherwise. 
\par If }{\i option}{ is specified, it must be one of these four, and then \lquote 0' or \lquote 1' is returned, depending on whether }{\i string}{ is of the named type.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DATE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2210functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DATE([option-out,[date,[option-in]]])
\par }{Returns the date, in various formats, which can be }{\b B}{ase, }{\b C}{entury, }{\b D}{ays, }{\b E}{uropean, }{\b M}{onth, }{\b N}{ormal, }{\b O}{rdered, }{\b S}{tandard, }{\b U}{SA, Unix}{\b T}{ime, or }{\b W}{eekday.
\par Can also be used to convert a date }{\i date}{ from one format }{\i option-in}{ to another; }{\i option-out}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DELSTR\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2220functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DELSTR(string,start[,length])
\par }{Deletes the substring of }{\i string}{ starting at position }{\i start}{ and having a length of }{\i length}{ (default is the rest of the string).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DELWORD\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2230functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DELWORD(string,start[,length])
\par }{Deletes }{\i length}{ words (default is the rest of the string) from }{\i string}{, starting at word number }{\i start.}{
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DESBUF\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2231functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DESBUF()
\par }{Destroys the contents of all CMS buffers.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DIGITS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2240functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DIGITS()
\par }{Returns the current setting of NUMERIC DIGITS.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DIRECTORY\tab OS/2
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2241functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DIRECTORY([directory])
\par }{Returns the current working directory and optionally changes to }{\i directory}{ before returning.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {D2C\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2250functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b D2C(integer[,length])
\par }{Converts the decimal number }{\i integer}{ to a character string of length }{\i length}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {D2X\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2260functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b D2X(integer[,length])
\par }{Converts the decimal number }{\i integer}{ to a hex-string of length }{\i length}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {DROPBUF\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2261functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b DROPBUG(bufnum)}{
\par Drops the contents of the CMS buffer with number; }{\i bufnum}{. Deprecated: use RXQUEUE().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {ERRORTEXT\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2270functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b ERRORTEXT(errno)
\par }{Returns the error text associated with error number }{\i errno}{. }{\i errno}{ can specify a sub-error number in the format }{\i n.n}{. eg. 40.1
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {FIND\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2271functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b FIND(string,phrase)}{
\par Returns the word position of the start of }{\i phrase}{ in }{\i string}{. Deprecated: see WORDPOS().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {FORK\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2272functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b FORK()}{
\par Creates a new process. Only works on Unix platforms.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {FORM\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2280functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b FORM()
\par }{Returns the current setting of NUMERIC FORM.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {FORMAT\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2290functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b FORMAT(number[,[before][,[after][,[expp][,[expt]]]]])}{
\par Formats }{\i number}{ into a string having }{\i before}{ digits before and }{\i after}{ digits after the decimal point. The }{\i expp}{ and }{\i expt}{ governs how and when to use exponential form.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {FUZZ\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2300functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b FUZZ()}{
\par Returns the current setting of NUMERIC FUZZ.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {GETENV\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2301functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b GETENV(var)}{
\par Returns the value of the environment variable; }{\i var}{. Deprecated: use VALUE().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {GETPID\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2302functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b GETPID()}{
\par Returns the process-id of the current process.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {GETTID\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2303functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b GETTID()}{
\par Returns the thread-id of the current thread.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {INDEX\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2304functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b INDEX(haystack,needle[,start])}{
\par Seeks for first occurrence of }{\i needle}{ in }{\i haystack}{, optionally starting at position; }{\i start}{. Deprecated: use POS().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {INSERT\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2310functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b INSERT(string1,string2[,position[,length[,padchar]]])}{
\par Inserts }{\i string1}{ into }{\i string2}{ at position }{\i position}{ and with a length of }{\i length}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {JUSTIFY\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2311functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b JUSTIFY(string,length[,pad])}{
\par Formats blank-delimited words in }{\i string}{, by adding }{\i pad}{ characters between words to justify to both margins. That is, to width }{\i length.}{
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {LASTPOS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2320functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b LASTPOS(needle,haystack[,start])}{
\par Seeks for }{\i needle}{ in }{\i haystack}{, from the end towards the start.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {LEFT\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2330functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b LEFT(string,length[,padchar])}{
\par Returns the }{\i length}{ leftmost characters in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {LENGTH\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2340functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b LENGTH(string)}{
\par Returns the number of characters in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {LINEIN\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2350functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b LINEIN([streamid][,[line][,count]])}{
\par Reads a line from an input stream (default is the standard input stream), optionally starting at }{\i line}{. If }{\i count}{ is zero, no reading is performed (only repositioning).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {LINEOUT\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2360functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b LINEOUT([streamid][,[string][,line]])}{
\par Writes the line }{\i string}{ to an output stream (default is the standard output stream, optionally starting at }{\i line}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {LINES\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2370functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b LINES([streamid][,option])}{
\par Returns the number of complete lines left in an input stream. If }{\i option}{ is \lquote }{\b N\rquote }{, then this returns either \lquote 0\rquote  or \lquote 1\rquote . If }{\i option}{ is '}{\b C'}{, the actual number of lines left will be returned.

\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {MAKEBUF\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2371functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b MAKEBUF()}{
\par Makes a new CMS buffer and returns the buffer number. Deprecated: use RXQUEUE().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {MAX\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2380functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b MAX(number1[,number2]...)}{
\par Returns the maximum of its parameters.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {MIN\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2390functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b MIN(number[,number]...)}{
\par Returns the minimum of its parameters.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {OVERLAY\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2400functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b OVERLAY(string1,string2[,[start][,[length][,padchar]]])}{
\par Overwrites }{\i string2}{ with contents of }{\i string1}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {POPEN\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2401functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b POPEN(command,stem)}{
\par Runs an external }{\i command}{ and pipes the output into the named }{\i stem}{ Deprecated: use ADDRESS }{\i command}{ WITH OUTPUT STEM }{\i stem}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {POS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2410functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b POS(needle,haystack[,start])}{
\par Seeks for first occurrence of }{\i needle}{ in }{\i haystack}{, optionally starting at position; }{\i start}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {QUEUED\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2420functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b QUEUED()}{
\par Returns the number of lines in the external data queue (stack).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RANDOM\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2430functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RANDOM(max)
\par RANDOM([min][,[max][,seed]])
\par }{Returns a random number in the range }{\i min}{ to }{\i max}{ (defaults are 0 and 100000).
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {REVERSE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2440functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b REVERSE(string)}{
\par Reverses the order of the characters in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RIGHT\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2450functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RIGHT(string,length[,padchar])}{
\par Returns the }{\i length}{ rightmost characters in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RXFUNCADD\tab SAA
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2460functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RXFUNCADD(external,library,internal)}{
\par Loads an external function called; }{\i internal}{ residing in the }{\i library}{ shared library. }{\i external}{ is the name of the function as known to the interpreter.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RXFUNCDROP\tab SAA
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2461functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RXFUNCDROP(external)}{
\par Drops the reference to the }{\i external}{ function loaded.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RXFUNCERRMSG\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2462functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RXFUNCERRMSG()}{
\par Returns any error string associated with a failure of RXFUNCADD().
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RXFUNCQUERY\tab SAA
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2463functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RXFUNCQUERY(external)}{
\par Returns \lquote 0\rquote  if the }{\i external}{ function is already registered; \lquote 1\rquote  if it hasn't been registered.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {RXQUEUE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2465functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b RXQUEUE(command[,queue])}{
\par Manipulate the specified }{\i queue}{ name (or }{\b SESSION}{ queue if not supplied. Command can be }{\b C}{reate, }{\b D}{elete, }{\b G}{et or }{\b S}{et.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SIGN\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2470functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SIGN(number)}{
\par Returns \lquote -1', \lquote 0', or \lquote 1' depending on the sign of }{\i number}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SLEEP\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2471functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SLEEP(seconds)}{
\par Cause the process to suspend for }{\i seconds}{ seconds.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SOURCELINE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2480functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SOURCELINE([lineno])}{
\par Returns the number of lines in the source for the current script, or the line specified by }{\i lineno}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SPACE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2490functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SPACE(string[,[length][,padchar]])}{
\par Transform any sequence of spaces in }{\i string}{ into exactly }{\i length}{ spaces, and strips off leading and trailing spaces.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {STATE\tab CMS
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2491functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b STATE(streamid)}{
\par Returns \lquote 0\rquote  if the }{\i streamid}{ exists, or '1' if it doesn't. Deprecated: use STREAM(streamid,'C','QUERY EXISTS').
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {STREAM\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2500functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b STREAM(streamid[,option[,command]])}{
\par Returns infomation about a stream, valid options are }{\b C}{ommand, }{\b D}{escription, and }{\b S}{tate. See other documentation for more information.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {STRIP\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2510functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b STRIP(string[,[option][,char]])}{
\par Strips leading and trailing }{\i char}{s off }{\i string}{. }{\i option}{ can be }{\b L}{eading, }{\b T}{railing, or }{\b B}{oth.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SUBSTR\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2520functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SUBSTR(string,start[,[length][,padchar]])}{
\par Returns the substring of }{\i string}{ starting at }{\i start}{ and having length }{\i length}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SUBWORD\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2530functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SUBWORD(string,start[,length])}{
\par Returns a subsequence of }{\i length}{ words from }{\i string}{ starting at }{\i start}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {SYMBOL\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2540functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b SYMBOL(name)}{
\par Test whether }{\i name}{ is a symbol, variable, or literal.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {TIME\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2550functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b TIME([option-out,[time,[option-in]]])}{
\par Returns the time, options are }{\b C}{ivil, }{\b E}{lapsed, }{\b H}{ours, }{\b L}{ong, }{\b M}{inutes, }{\b N}{ormal, }{\b R}{eset, Unix}{\b T}{ime, and }{\b S}{econds.
\par Can also be used to convert a time }{\i time}{ from one format }{\i option-in }{to another; }{\i option-out}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {TRACE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2560functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b TRACE([setting])}{
\par Returns the current trace setting, and optionally sets a new one.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {TRANSLATE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2570functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b TRANSLATE(string[,[tableout][,[tablein][,padchar]]])}{
\par Translates characters in }{\i string}{ from }{\i tablein}{ to }{\i tableout}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {TRUNC\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2580functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b TRUNC(number[,length])}{
\par Truncates }{\i number}{ to }{\i length }{decimals.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {UNAME\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2581functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b UNAME([option])}{
\par Returns information about the current machine and operating system. }{\i option}{ can be }{\b A}{ll (default), }{\b S}{ystem, }{\b N}{odename, }{\b R}{evision, }{\b V}{ersion, or }{\b M}{achine.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {UNIXERROR\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2582functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b UNIXERROR(errno)}{
\par Returns the string associated with Unix error; }{\i errno}{. Deprecated: use ERRORTEXT( 100+}{\i errno}{)
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {USERID\tab Regina
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2583functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b USERID()}{
\par Returns the current user identification string. This is NOT a secure method of identifying the current user!
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {VALUE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2590functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b VALUE(symbol[,[value],[pool]])}{
\par Returns the value of }{\i symbol}{, optionally setting it to }{\i value }{afterwards.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {VERIFY\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2600functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b VERIFY(string,ref[,[option][,start]])}{
\par Verifies that }{\i strings}{ consists of characters from }{\i ref}{, and returns the first character that does not match. }{\i option}{ can be }{\b M}{atch or
\par }{\b N}{omatch.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {WORD\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2610functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b WORD(string,wordno)}{
\par Returns word number }{\i wordno}{ in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {WORDINDEX\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2620functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b WORDINDEX(string,wordno)}{
\par Returns the character position of }{\i wordno}{ in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {WORDLENGTH\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2630functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b WORDLENGTH(string,wordno)}{
\par Returns the length of word number }{\i wordno}{ in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {WORDPOS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2640functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {WORDPOS(phrase,string[,start])
\par Returns the word position of the start of }{\i phrase}{ in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {WORDS\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2650functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b WORDS(string)}{
\par Returns the number of words in }{\i string}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {XRANGE\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2660functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b XRANGE([start][,end])}{
\par Returns in alphabetic order all the characters in the character set from the character }{\i start}{ to the character }{\i end}{.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {X2B\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2670functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b X2B(hexstring)}{
\par Converts the hex-string }{\i hexstring}{ to a bin-string.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {X2C\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2680functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b\lang1033\langfe1033\langnp1033 X2C(hexstring)
\par }{Converts the hex-string }{\i hexstring}{ to a character string.
\par }\pard\plain \s2\ql \li0\ri0\sb120\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20\brdrcf1 \tqr\tx9072\faauto\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {X2D\tab ANSI
\par }\pard\plain \s20\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\ul\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {2690functions
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f1\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b X2D(hexstring[,length])}{
\par Converts the }{\i length}{ rightmost characters
\par of the hex-string }{\i hexstring}{ to a decimal number.
\par }}