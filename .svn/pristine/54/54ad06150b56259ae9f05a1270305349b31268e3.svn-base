#define YY_CHAR char
#line 1 "/usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "rtl/sslscanner.l"
#define INITIAL 0
/*==============================================================================
 * FILE:          sslscanner.l
 * OVERVIEW:      Defines a scanner to parse the tokens of a Semantic
 *                Specification Language specification.
 *
 * (C) 1997-2001 The University of Queensland, BT group
 *============================================================================*/
/* 
 * Shane Sendall (original C version) Dec 1997
 * Doug Simon (C++ version) Jan 1998
 * 10 Feb 98, David - removed repeated #include that's already in rtl.h, 
 *                    due to conflict of <typeinfo> and <cmath>, code using 
 *                    the 'pow' function is replaced.
 * 8 Apr 98, David - added MODRM to the parser.
 * 28 Apr 98, David - added Flag RTLS to parser.
 * 23 Jun 98, Mike - Changes for semantic strings
 * 9 July 98, Mike - added TEMP token, else temp registers not distinguished
 *                   from PARMs, which they are not
 * 04 Nov 98, Mike - added ADDR token, for LEA instruction
 * 12 Dec 98, Shawn - completed additions of the float operators.
 * 12 Jan 99, Ian - Added new tokens "->", "COVERS" and "SHARES" for register
 *                  descriptors
 * 04 Mar 99 - Mike: Added CONV_FUNC (fsize, itof, ftoi), FPUSH, FPOP
 * 09 Mar 99 - Mike: Added TRANSCEND(), fround, floating point constants
 * 10 Mar 99 - Mike: SQRTs -> sqrt
 * 30 Mar 99, David - added InfiniteStack, @DEFINITION tokens.
 * 09 Jul 99 - Doug: Modified to remove need for *_base files
 * 19 Jan 00 - Mike: Added INTEGER and FLOAT keywords (for @REGISTER section);
 *              old FLOAT -> FLOATNUM
 * 31 Jan 01 - Mike: Removed @DEFINITION and Infinitestack tokens (UQDBT only)
 * 11 Feb 01 - Nathan: Added @OPERAND, changed PARM to allow uppercase letters
 * 15 Feb 01 - Nathan: Added support for explicit fetch-execute cycle
 * 05 Mar 01 - Simon: added lowercase 'integer' 'float' 'endianness' 'big'
 *              'little'
 * 05 Mar 01 - Simon: removed @REGISTERS @CONSTANTS @OPERANDS, added OPERAND
 * 05 Mar 01 - Simon: replaced "[alpha_num]\[IDX\]" with NAME_LOOKUP and
                introduced the more general NAME token and NAME_CALL
 * 05 Mar 01 - Simon: removed the necessity for an '_' for instruction names
 * 05 Mar 01 - Simon: replaced INSTRNAME with NAME
 * 20 Mar 01 - Mike: tmp's can have upper case letters now
 */
#define YY_SSLScanner_FLEX_SCANNER
#line 53 "rtl/sslscanner.l"
#include "sslscanner.h"
#include "include/sslscanner.h"
#line 67 "rtl/sslscanner.l"
#line 196 "/usr/local/lib/flexskel.cc"

#define yy___stderr YY_SSLScanner_ERRFILE
#define yy___text YY_SSLScanner_TEXT
#define yy___leng YY_SSLScanner_LENG
#define yy___in YY_SSLScanner_IN
#define yy___out YY_SSLScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_SSLScanner_INIT_BUFFER( YY_SSLScanner_CURRENT_BUFFER, yy___in ); \
		YY_SSLScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_SSLScanner_DEBUG != 0
#define yy___flex_debug YY_SSLScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_SSLScanner_ECHO
#define yy___input YY_SSLScanner_INPUT
#define yy___fatal_error YY_SSLScanner_FATAL_ERROR
#define yy___wrap YY_SSLScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_SSLScanner_IFILE  *yy_input_file;

    YY_SSLScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_SSLScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_SSLScanner_DEBUG != 0
int YY_SSLScanner_DEBUG_FLAG=YY_SSLScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_SSLScanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_SSLScanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_SSLScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_SSLScanner_CHAR *yy___text;
int yy___leng;

YY_SSLScanner_IFILE  *yy___in = (YY_SSLScanner_IFILE  *) 0;
YY_SSLScanner_OFILE *yy___out = (YY_SSLScanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_SSLScanner_CHAR *yy_c_buf_p = (YY_SSLScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_SSLScanner_CHAR c, YY_SSLScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_SSLScanner_ECHO_NOCODE
void YY_SSLScanner_CLASS::yy___echo()
{YY_SSLScanner_ECHO_CODE
}
#endif
#ifndef YY_SSLScanner_INPUT_NOCODE
int  YY_SSLScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_SSLScanner_INPUT_CODE
}
#endif
#ifndef YY_SSLScanner_FATAL_ERROR_NOCODE
void YY_SSLScanner_CLASS::yy___fatal_error(char *msg)
{YY_SSLScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_SSLScanner_WRAP_NOCODE
int  YY_SSLScanner_CLASS::yy___wrap()
{YY_SSLScanner_WRAP_CODE
}
#endif
void YY_SSLScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_SSLScanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_SSLScanner_DEBUG != 0
 YY_SSLScanner_DEBUG_FLAG=YY_SSLScanner_DEBUG_INIT;
#endif
}

YY_SSLScanner_CLASS::YY_SSLScanner_CLASS(YY_SSLScanner_CONSTRUCTOR_PARAM) YY_SSLScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_SSLScanner_CONSTRUCTOR_CODE;
}
YY_SSLScanner_CLASS::~YY_SSLScanner_CLASS() 
{YY_SSLScanner_DESTRUCTOR_CODE;
 if(YY_SSLScanner_CURRENT_BUFFER)
  YY_SSLScanner_DELETE_BUFFER(YY_SSLScanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 119
typedef int yy_state_type;
static const short int yy_acclist[456] =
    {   0,
      119,  116,  118,  114,  116,  118,  117,  118,   71,  116,
      118,  105,  116,  118,  116,  118,16499,  109,  116,  118,
       42,  116,  118,   38,  116,  118,   43,  116,  118,   48,
      116,  118,   49,  116,  118,  116,  118,   44,  116,  118,
      111,  116,  118,  111,  116,  118,  111,  116,  118,   70,
      116,  118,  108,  116,  118,   21,  116,  118,   19,  116,
      118,   22,  116,  118,   72,  116,  118,  102,  116,  118,
      102,  116,  118,  102,  116,  118,  102,  116,  118,  102,
      116,  118,  102,  116,  118,  102,  116,  118,  102,  116,
      118,  102,  116,  118,  107,  116,  118,  106,  116,  118,

       40,  116,  118,   98,  116,  118,  102,  116,  118,  102,
      116,  118,  102,  116,  118,  102,  116,  118,  102,  116,
      118,  102,  116,  118,  102,  116,  118,  102,  116,  118,
      102,  116,  118,  102,  116,  118,  102,  116,  118,  102,
      116,  118,  102,  116,  118,  102,  116,  118,  102,  116,
      118,   36,  116,  118,   64,  116,  118,  114,  117,16499,
     8307,   47,   99,   39,   45,   50,   58,  111,  111,   66,
       61,   69,  103,   46,   55,   67,   34,   23,   25,   65,
       24,   33,   26,  100,  102,  101,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,   41,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,   97,  101,   17,  102,   96,
      101,   31,  102,   32,  102,  102,  102,  102,  102,  102,
      102,  102,  102,   37,   20,   99,   16,   51,   52,   59,
       60,   62,   63,  103,   56,   57,  110,  112,   68,   27,
       28,   35,    8,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,   18,  102,  102,    9,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,   29,  102,   30,  102,  102,  102,  102,
      102,   95,  102,  102,  102,  102,   54,   53,  113,  102,

      102,   14,  102,  102,  102,   84,  102,  102,  102,  102,
      102,  102,  104,  102,  102,   87,  100,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   86,  100,  102,   88,  100,   95,  102,  102,  102,
      102,  102,  102,  102,    3,  102,   85,  102,  102,  102,
      102,  102,   73,  100,  102,  102,  102,  102,    4,  102,
      102,  102,   76,  100,  102,   75,  100,  102,  102,   90,
      100,   91,  100,  102,   94,  100,  102,  102,  102,   12,
      102,  102,  102,  102,   10,  102,  102,   13,  102,  102,
      102,  102,  102,  102,   74,  100,  102,   11,  102,   92,

      100,   81,  100,  102,  102,  102,   80,  100,  102,  102,
        1,  102,    5,  102,   89,  100,  102,  102,  102,   77,
      100,    2,  102,   79,  100,   78,  100,  102,  102,  102,
      102,  102,   93,  100,  102,  102,   15,  102,  102,  102,
      102,    6,  102,  102,    7,  102,  102,  102,  102,   82,
      100,  102,  102,   83,  100
    } ;

static const short int yy_accept[320] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   18,
       21,   24,   27,   30,   33,   36,   38,   41,   44,   47,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   83,   86,   89,   92,   95,   98,  101,  104,  107,
      110,  113,  116,  119,  122,  125,  128,  131,  134,  137,
      140,  143,  146,  149,  152,  155,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  175,  176,  176,  176,  176,  176,
      177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
      187,  188,  189,  190,  191,  192,  193,  194,  195,  196,

      197,  198,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  218,  220,  222,  224,  226,  227,  228,  229,  230,
      231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
      240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      249,  250,  251,  252,  253,  255,  256,  257,  258,  259,
      260,  261,  262,  263,  264,  265,  266,  266,  267,  269,
      270,  272,  273,  274,  275,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  286,  288,  289,  290,  291,  292,
      294,  295,  296,  297,  298,  299,  300,  301,  302,  304,

      305,  306,  308,  309,  310,  311,  312,  313,  314,  314,
      315,  316,  318,  319,  320,  321,  322,  323,  324,  325,
      326,  327,  328,  329,  330,  331,  332,  334,  335,  337,
      339,  340,  341,  342,  343,  344,  345,  347,  349,  350,
      351,  352,  353,  355,  356,  357,  358,  359,  361,  362,
      363,  365,  366,  368,  369,  370,  372,  374,  375,  377,
      378,  379,  380,  382,  383,  384,  385,  387,  388,  390,
      391,  392,  393,  394,  395,  397,  398,  400,  402,  404,
      405,  406,  407,  409,  410,  411,  413,  415,  417,  418,
      419,  420,  422,  424,  426,  428,  429,  430,  431,  432,

      433,  435,  436,  437,  439,  440,  441,  442,  444,  445,
      447,  448,  449,  450,  452,  453,  454,  456,  456
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       10,   12,   13,   10,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   10,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   36,   37,   36,   38,   39,   40,
       36,   41,   42,   43,   44,   45,   36,   46,   36,   36,
       47,    1,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   36,   58,   36,   36,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   36,   36,   69,
       36,   70,   10,   71,   10,   72,    1
    } ;

static const YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    1,    1,
        5,    1,    1,    1,    6,    1,    7,    7,    7,    7,
        1,    1,    1,    1,    1,    1,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    5,    1,    1,    5,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1
    } ;

static const short int yy_base[330] =
    {   0,
        0,    0,  332,  895,  325,    0,  895,  895,  322,  895,
      312,  237,   69,  229,   57,  263,   74,   75,   81,   90,
       59,  895,   61,  252,   79,  895,   68,   86,   80,  101,
       95,  103,  105,  106,  109,  895,  895,  106,    0,  107,
      112,  113,  126,  127,  117,  138,  140,  120,  144,  147,
      146,  160,  154,  166,  183,  199,  206,    0,  197,  895,
      895,    0,  895,  895,  209,  126,  115,  199,  218,  895,
      170,  895,    0,  895,  177,  225,  229,  185,  171,  895,
      895,  121,  895,  895,  118,  139,  895,  895,  221,  895,
      229,  228,  239,  240,  241,  242,  252,  254,  255,  243,

      253,    0,  895,  256,  259,  260,  268,  261,  272,  281,
      282,  284,  283,  293,  294,  299,  300,  301,  306,  309,
      895,  311,  895,  312,  315,  313,  322,  323,  324,  331,
      332,  333,  339,  895,  895,    0,  895,   99,  895,  108,
      895,  895,  895,  895,    0,  895,  895,  372,  384,  388,
      895,  895,  895,  895,  346,  387,  384,  385,  370,  398,
      399,  409,  410,  411,  412,  419,  140,  415,  416,  418,
      422,  424,  425,  426,  429,  427,  432,  439,  441,  450,
      456,  444,  476,  457,  459,  466,  470,  478,  479,  481,
      482,  485,  487,  895,  895,  518,  503,  522,  504,  505,

      511,  508,  513,  509,  516,  530,  537,  895,  131,  519,
      548,  895,  550,  551,  553,  556,  554,  559,  560,  561,
      562,  563,  565,  569,  570,  572,  895,  577,  895,  578,
      579,  580,  581,  602,  582,  619,  620,  622,  623,  624,
      626,  632,  895,  628,  631,  634,  635,  636,  637,  640,
      895,  641,  895,  645,  646,  895,  895,  647,  895,  650,
      651,  652,  654,  665,  661,  674,  657,  694,  666,  679,
      695,  699,  700,  703,  895,  706,  709,  895,  895,  711,
      712,  714,  895,  717,  718,  716,  719,  895,  720,  721,
      722,  895,  723,  895,  895,  725,  741,  762,  727,  734,

      895,  743,  751,  766,  771,  773,  774,  775,  776,  778,
      783,  784,  790,  895,  785,  791,  895,  895,  851,  859,
      865,  868,  872,  126,  874,  877,   73,  882,  886
    } ;

static const short int yy_def[330] =
    {   0,
      318,    1,  318,  318,  318,  319,  318,  318,  320,  318,
      321,  318,  318,  318,  318,  322,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  318,  318,  318,  324,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  318,  318,  318,  319,  320,  318,
      318,  325,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  326,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  323,  318,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,

      323,  327,  318,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      318,  323,  318,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  318,  318,  325,  318,  318,  318,  318,
      318,  318,  318,  318,  326,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  328,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  329,
      323,  323,  323,  318,  318,  318,  323,  323,  323,  323,

      323,  323,  323,  323,  323,  323,  323,  318,  328,  323,
      323,  318,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  318,  323,  318,  329,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  318,  323,  323,  323,  323,  323,  323,  323,
      318,  323,  318,  323,  323,  318,  318,  323,  318,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  318,  323,  323,  318,  318,  323,
      323,  323,  318,  323,  323,  323,  323,  318,  323,  323,
      323,  318,  323,  318,  318,  323,  323,  323,  323,  323,

      318,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  318,  323,  323,  318,    0,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318
    } ;

static const short int yy_nxt[968] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    8,
        8,   13,   14,   15,   16,   17,   18,   19,   20,   19,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   27,
       30,   31,   27,   27,   32,   27,   33,   27,   34,   27,
       27,   35,   27,   27,   27,   27,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   27,   46,   47,   48,
       27,   49,   27,   27,   50,   51,   52,   53,   27,   54,
       55,   56,   64,   68,   68,   69,   68,   74,   88,   79,
      167,   70,   80,   81,   82,   65,   65,   65,   65,   76,
       88,   68,   68,   68,   68,   76,   88,   68,   68,   68,

       68,   78,   85,   86,   76,   88,   68,   68,   68,   68,
      102,   88,   71,   88,   90,   88,   88,   88,   92,   88,
       91,   94,   88,   88,   66,   95,   90,   88,   83,   75,
       88,   96,   90,  104,   97,  208,   88,   88,   93,   99,
       98,   90,  101,   77,  208,  100,   87,   90,   88,   90,
       88,   90,   90,   90,   88,   90,   88,   88,   90,   90,
      105,  195,  194,   90,   88,  154,  121,  106,  141,  108,
       88,  107,   90,   90,  109,  113,   88,  103,  142,  138,
      110,  114,  115,  116,   90,  153,   90,  111,  152,  139,
       90,  140,   90,  123,  151,  112,  150,  119,  117,   60,

       90,  120,  126,  127,  118,  124,   90,   57,  122,  128,
      129,  125,   90,   76,  132,   68,   68,   68,   68,  130,
      137,  133,  135,  143,  131,   65,   65,   65,   65,   78,
      146,   88,   76,  144,   68,   68,   68,   68,   88,   88,
      147,  148,  148,  148,  148,  149,  149,  149,  149,   88,
       88,   88,   88,   88,  134,  149,  149,  149,  149,  149,
      149,  155,   88,   88,   88,   88,   88,   90,  157,   88,
       88,   88,  156,  165,   90,   90,   84,   72,   88,  166,
      160,  158,   88,  159,   67,   90,   90,   90,   90,   90,
      161,   88,   88,   88,   88,  162,  163,  164,   90,   90,

       90,   90,   90,   88,   88,   90,   90,   90,   63,   88,
       88,   88,  168,  169,   90,   61,   88,  171,   90,   88,
      170,   88,   88,   88,   60,   88,   57,   90,   90,   90,
       90,  318,   88,   88,   88,  174,  173,  172,  175,   90,
       90,   88,   88,   88,  176,   90,   90,   90,  318,   88,
      318,  178,   90,  318,  177,   90,   88,   90,   90,   90,
      179,   90,  181,  318,  184,  183,  180,  185,   90,   90,
       90,  318,  182,  186,  318,  318,  318,   90,   90,   90,
       88,  318,  187,  318,  189,   90,  192,  188,  148,  148,
      148,  148,   90,  190,   88,   88,  193,   88,  200,  191,

      149,  149,  149,  149,  196,  196,  196,  196,   88,   88,
      149,  149,  149,  149,  149,  149,   90,  197,  198,   88,
       88,   88,   88,  318,  201,   88,   88,  199,   88,   88,
       90,   90,   88,   90,  212,   88,   88,   88,  202,   88,
      204,  318,   88,  318,   90,   90,  318,  318,  318,   88,
      203,   88,  206,  205,   88,   90,   90,   90,   90,  207,
       88,   90,   90,  318,   90,   90,   88,   88,   90,   88,
       90,   90,   90,   90,  318,   90,   88,  216,   90,  210,
      227,  215,  213,  214,  211,   90,   88,   90,   88,  229,
       90,   88,   88,  223,  224,   88,   90,   88,  219,  217,

      318,  318,   90,   90,  220,   90,  318,  318,  218,  318,
      222,  221,   90,   88,   88,   88,   90,  318,   88,   88,
      226,   88,   90,   88,   90,   90,   88,   90,   90,  243,
      225,   90,   88,   90,  196,  196,  196,  196,  236,  232,
       88,  239,  231,  234,  228,  233,  238,   88,  235,   90,
       90,   90,  240,  237,   90,   90,  241,   90,   88,   90,
       88,   88,   90,   88,   88,   90,   88,  242,   90,   88,
      251,   88,  253,   88,  318,   88,   90,  318,  318,  256,
      257,  255,   88,   90,  318,  318,  318,  259,   88,   88,
       88,   88,   88,  318,   90,  318,   90,   90,  244,   90,

       90,  246,   90,  318,  318,   90,   90,   90,   90,   90,
      245,   90,   88,  250,  249,   90,   90,  252,   90,  264,
      247,  254,  248,   90,   90,   90,   90,   90,   90,   88,
       88,  260,   88,   88,   88,  261,   88,  318,   88,  262,
      258,   88,   88,  263,   88,   88,   88,   88,   90,  265,
      275,   88,  318,  266,  267,   88,  278,  279,  318,  318,
       88,   88,  283,  268,   88,   90,   90,   88,   90,   90,
       90,   88,   90,  269,   90,   88,   88,   90,   90,  318,
       90,   90,   90,   90,   88,  271,   90,   90,  270,  288,
      274,   90,   90,   90,  272,  276,   90,   90,   90,  277,

       90,  273,  284,   90,   88,   88,  285,   90,  282,   88,
       88,   90,   90,  292,  286,  280,   88,  281,  318,   88,
       90,  294,  295,  287,   88,   90,   88,   88,   88,   88,
       88,   88,  301,   88,  318,   88,  318,   88,  318,  318,
       90,   90,  318,  318,   88,   90,   90,  297,  298,   90,
      289,   88,   90,   88,  291,   90,  318,   90,   90,  290,
       90,   88,   90,   90,   90,   90,   90,   90,   90,   90,
      293,   90,   88,   90,  296,  300,   88,  305,  299,  302,
       90,   88,  303,   88,   88,   88,   88,   90,   88,   90,
      304,  318,  308,   88,  314,   88,  318,   90,  307,  306,

       88,  317,  318,  318,  318,  318,  318,  318,   90,  318,
      318,  318,   90,  318,  318,  318,  318,   90,  318,   90,
       90,   90,   90,  318,   90,  318,  318,  309,  318,   90,
       90,   90,  311,  313,  318,  318,   90,   90,  310,  318,
      318,  312,  318,  318,  318,  318,  315,  318,  318,  318,
      316,   58,  318,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   62,  318,  318,
      318,  318,   62,   73,  318,   73,   89,  318,   89,   89,
      136,  136,  145,  145,  145,  209,  318,  318,  318,  209,
      230,  318,  230,  230,    3,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318
    } ;

static const short int yy_chk[968] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   13,   15,   15,   15,   15,   17,   27,   21,
      327,   15,   21,   23,   23,   13,   13,   13,   13,   18,
       29,   18,   18,   18,   18,   19,   28,   19,   19,   19,

       19,   20,   25,   25,   20,   31,   20,   20,   20,   20,
       38,   30,   15,   32,   27,   33,   34,   40,   29,   35,
       28,   31,   41,   42,   13,   31,   29,   45,   23,   17,
       48,   31,   28,  324,   31,  209,   43,   44,   30,   33,
       32,   31,   35,   18,  167,   34,   25,   30,   46,   32,
       47,   33,   34,   40,   49,   35,   51,   50,   41,   42,
       40,  140,  138,   45,   53,   86,   48,   40,   67,   41,
       52,   40,   43,   44,   42,   45,   54,   38,   67,   66,
       43,   45,   45,   45,   46,   85,   47,   44,   82,   66,
       49,   66,   51,   50,   79,   44,   78,   47,   46,   59,

       53,   47,   51,   51,   46,   50,   52,   57,   49,   51,
       52,   50,   54,   68,   53,   68,   68,   68,   68,   52,
       65,   54,   56,   71,   52,   65,   65,   65,   65,   69,
       75,   89,   69,   71,   69,   69,   69,   69,   92,   91,
       75,   76,   76,   76,   76,   77,   77,   77,   77,   93,
       94,   95,   96,  100,   55,   77,   77,   77,   77,   77,
       77,   91,   97,  101,   98,   99,  104,   89,   93,  105,
      106,  108,   92,  100,   92,   91,   24,   16,  107,  101,
       96,   94,  109,   95,   14,   93,   94,   95,   96,  100,
       97,  110,  111,  113,  112,   97,   98,   99,   97,  101,

       98,   99,  104,  114,  115,  105,  106,  108,   12,  116,
      117,  118,  105,  106,  107,   11,  119,  108,  109,  120,
      107,  122,  124,  126,    9,  125,    5,  110,  111,  113,
      112,    3,  127,  128,  129,  111,  110,  109,  112,  114,
      115,  130,  131,  132,  113,  116,  117,  118,    0,  133,
        0,  115,  119,    0,  114,  120,  155,  122,  124,  126,
      116,  125,  118,    0,  124,  120,  117,  125,  127,  128,
      129,    0,  119,  126,    0,    0,    0,  130,  131,  132,
      159,    0,  127,    0,  129,  133,  132,  128,  148,  148,
      148,  148,  155,  130,  157,  158,  133,  156,  159,  131,

      149,  149,  149,  149,  150,  150,  150,  150,  160,  161,
      149,  149,  149,  149,  149,  149,  159,  156,  157,  162,
      163,  164,  165,    0,  160,  168,  169,  158,  170,  166,
      157,  158,  171,  156,  172,  173,  174,  176,  161,  175,
      163,    0,  177,    0,  160,  161,    0,    0,    0,  178,
      162,  179,  165,  164,  182,  162,  163,  164,  165,  166,
      180,  168,  169,    0,  170,  166,  181,  184,  171,  185,
      172,  173,  174,  176,    0,  175,  186,  176,  177,  168,
      187,  175,  173,  174,  170,  178,  183,  179,  188,  189,
      182,  190,  191,  183,  183,  192,  180,  193,  179,  177,

        0,    0,  181,  184,  180,  185,    0,    0,  178,    0,
      182,  181,  186,  197,  199,  200,  187,    0,  202,  204,
      186,  201,  183,  203,  188,  189,  205,  190,  191,  210,
      183,  192,  198,  193,  196,  196,  196,  196,  200,  192,
      206,  204,  191,  197,  188,  193,  203,  207,  198,  197,
      199,  200,  205,  201,  202,  204,  206,  201,  211,  203,
      213,  214,  205,  215,  217,  210,  216,  207,  198,  218,
      219,  220,  221,  222,    0,  223,  206,    0,    0,  224,
      225,  223,  226,  207,    0,    0,    0,  228,  230,  231,
      232,  233,  235,    0,  211,    0,  213,  214,  211,  215,

      217,  214,  216,    0,    0,  218,  219,  220,  221,  222,
      213,  223,  234,  218,  217,  224,  225,  220,  226,  235,
      215,  222,  216,  228,  230,  231,  232,  233,  235,  236,
      237,  231,  238,  239,  240,  232,  241,    0,  244,  233,
      226,  245,  242,  234,  246,  247,  248,  249,  234,  236,
      250,  252,    0,  239,  240,  254,  255,  258,    0,    0,
      260,  261,  262,  241,  263,  236,  237,  267,  238,  239,
      240,  265,  241,  242,  244,  264,  269,  245,  242,    0,
      246,  247,  248,  249,  266,  245,  250,  252,  244,  270,
      249,  254,  255,  258,  246,  252,  260,  261,  262,  254,

      263,  247,  264,  267,  268,  271,  265,  265,  261,  272,
      273,  264,  269,  274,  266,  260,  276,  260,    0,  277,
      266,  280,  281,  268,  282,  270,  286,  284,  285,  287,
      289,  290,  291,  293,    0,  296,    0,  299,    0,    0,
      268,  271,    0,    0,  300,  272,  273,  284,  285,  274,
      271,  297,  276,  302,  273,  277,    0,  280,  281,  272,
      282,  303,  286,  284,  285,  287,  289,  290,  291,  293,
      276,  296,  298,  299,  282,  290,  304,  299,  289,  296,
      300,  305,  297,  306,  307,  308,  309,  297,  310,  302,
      298,    0,  303,  311,  312,  315,    0,  303,  302,  300,

      313,  316,    0,    0,    0,    0,    0,    0,  298,    0,
        0,    0,  304,    0,    0,    0,    0,  305,    0,  306,
      307,  308,  309,    0,  310,    0,    0,  305,    0,  311,
      312,  315,  307,  311,    0,    0,  313,  316,  306,    0,
        0,  309,    0,    0,    0,    0,  313,    0,    0,    0,
      315,  319,    0,  319,  319,  319,  319,  319,  319,  320,
      320,  320,  320,  320,  320,  320,  320,  321,    0,    0,
        0,    0,  321,  322,    0,  322,  323,    0,  323,  323,
      325,  325,  326,  326,  326,  328,    0,    0,    0,  328,
      329,    0,  329,  329,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_SSLScanner_DEBUG != 0
static const short int yy_rule_linenum[118] =
    {   0,
       69,   70,   71,   72,   73,   74,   75,   79,   80,   84,
       85,   89,   90,   91,   92,   94,   99,  100,  104,  105,
      106,  107,  108,  109,  110,  111,  112,  113,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  135,  136,  137,  138,  139,  140,  141,  142,  146,
      147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
      157,  158,  159,  163,  166,  169,  172,  175,  179,  182,
      185,  188,  191,  194,  195,  196,  197,  198,  199,  200,
      201,  206,  207,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  225,  230,  231,  232,  233,  237,

      242,  247,  251,  252,  256,  257,  258,  259,  260,  261,
      265,  270,  275,  287,  288,  289,  290
    } ;

#endif
static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static YY_CHAR *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_SSLScanner_LEX_DEFINED
YY_SSLScanner_LEX_RETURN YY_SSLScanner_LEX ( YY_SSLScanner_LEX_PARAM )
YY_SSLScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_SSLScanner_LEX_RETURN YY_SSLScanner_CLASS::YY_SSLScanner_LEX ( YY_SSLScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_SSLScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "/usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_SSLScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_SSLScanner_OFILE_DEFAULT;

	if ( YY_SSLScanner_CURRENT_BUFFER )
	    YY_SSLScanner_INIT_BUFFER( YY_SSLScanner_CURRENT_BUFFER, yy___in );
	else
	    YY_SSLScanner_CURRENT_BUFFER = YY_SSLScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_SSLScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 319 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_current_state != 318 );
#line 440 "/usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_current_state = *--yy_state_ptr;
	yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	for ( ; ; ) /* until we find what rule we matched */
	    {
	    if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		{
		yy_act = yy_acclist[yy_lp];
		if ( yy_act & YY_TRAILING_HEAD_MASK ||
		     yy_looking_for_trail_begin )
		    {
		    if ( yy_act == yy_looking_for_trail_begin )
			{
			yy_looking_for_trail_begin = 0;
			yy_act &= ~YY_TRAILING_HEAD_MASK;
			break;
			}
		    }
		else if ( yy_act & YY_TRAILING_MASK )
		    {
		    yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
		    yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
		    }
		else
		    {
		    yy_full_match = yy_cp;
		    yy_full_state = yy_state_ptr;
		    yy_full_lp = yy_lp;
		    break;
		    }
		++yy_lp;
		goto find_rule;
		}
	    --yy_cp;
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
	    }
#line 443 "/usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_SSLScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
case 1:
#line 70 "rtl/sslscanner.l"
case 2:
#line 70 "rtl/sslscanner.l"
{ return SSLParser::INTEGER; }
	YY_BREAK
case 3:
#line 72 "rtl/sslscanner.l"
case 4:
#line 72 "rtl/sslscanner.l"
{ return SSLParser::FLOAT; }
	YY_BREAK
case 5:
#line 73 "rtl/sslscanner.l"
{ return SSLParser::OPERAND; }
	YY_BREAK
case 6:
#line 75 "rtl/sslscanner.l"
case 7:
#line 75 "rtl/sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::ENDIANNESS;
             }
	YY_BREAK
case 8:
#line 80 "rtl/sslscanner.l"
case 9:
#line 80 "rtl/sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::BIG;
             }
	YY_BREAK
case 10:
#line 85 "rtl/sslscanner.l"
case 11:
#line 85 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::LITTLE;
             }
	YY_BREAK
case 12:
#line 89 "rtl/sslscanner.l"
{ return SSLParser::COVERS; }
	YY_BREAK
case 13:
#line 90 "rtl/sslscanner.l"
{ return SSLParser::SHARES; }
	YY_BREAK
case 14:
#line 91 "rtl/sslscanner.l"
{ return SSLParser::FAST; }
	YY_BREAK
case 15:
#line 92 "rtl/sslscanner.l"
{ return SSLParser::FETCHEXEC; }
	YY_BREAK
case 16:
#line 94 "rtl/sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::ASSIGNSIZE;
             }
	YY_BREAK
case 17:
#line 100 "rtl/sslscanner.l"
case 18:
#line 100 "rtl/sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::LOG_OP;
             }
	YY_BREAK
case 19:
#line 105 "rtl/sslscanner.l"
case 20:
#line 106 "rtl/sslscanner.l"
case 21:
#line 107 "rtl/sslscanner.l"
case 22:
#line 108 "rtl/sslscanner.l"
case 23:
#line 109 "rtl/sslscanner.l"
case 24:
#line 110 "rtl/sslscanner.l"
case 25:
#line 111 "rtl/sslscanner.l"
case 26:
#line 112 "rtl/sslscanner.l"
case 27:
#line 113 "rtl/sslscanner.l"
case 28:
#line 113 "rtl/sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::COND_OP;
             }
	YY_BREAK
case 29:
#line 119 "rtl/sslscanner.l"
case 30:
#line 120 "rtl/sslscanner.l"
case 31:
#line 121 "rtl/sslscanner.l"
case 32:
#line 122 "rtl/sslscanner.l"
case 33:
#line 123 "rtl/sslscanner.l"
case 34:
#line 124 "rtl/sslscanner.l"
case 35:
#line 125 "rtl/sslscanner.l"
case 36:
#line 126 "rtl/sslscanner.l"
case 37:
#line 127 "rtl/sslscanner.l"
case 38:
#line 128 "rtl/sslscanner.l"
case 39:
#line 129 "rtl/sslscanner.l"
case 40:
#line 130 "rtl/sslscanner.l"
case 41:
#line 130 "rtl/sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::BIT_OP;

      }
	YY_BREAK
case 42:
#line 136 "rtl/sslscanner.l"
case 43:
#line 137 "rtl/sslscanner.l"
case 44:
#line 138 "rtl/sslscanner.l"
case 45:
#line 139 "rtl/sslscanner.l"
case 46:
#line 140 "rtl/sslscanner.l"
case 47:
#line 141 "rtl/sslscanner.l"
case 48:
#line 142 "rtl/sslscanner.l"
case 49:
#line 142 "rtl/sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::ARITH_OP;
      }
	YY_BREAK
case 50:
#line 147 "rtl/sslscanner.l"
case 51:
#line 148 "rtl/sslscanner.l"
case 52:
#line 149 "rtl/sslscanner.l"
case 53:
#line 150 "rtl/sslscanner.l"
case 54:
#line 151 "rtl/sslscanner.l"
case 55:
#line 152 "rtl/sslscanner.l"
case 56:
#line 153 "rtl/sslscanner.l"
case 57:
#line 154 "rtl/sslscanner.l"
case 58:
#line 155 "rtl/sslscanner.l"
case 59:
#line 156 "rtl/sslscanner.l"
case 60:
#line 157 "rtl/sslscanner.l"
case 61:
#line 158 "rtl/sslscanner.l"
case 62:
#line 159 "rtl/sslscanner.l"
case 63:
#line 159 "rtl/sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::FARITH_OP;
      }
	YY_BREAK
case 64:
#line 163 "rtl/sslscanner.l"
{
        return SSLParser::NOT;
      }
	YY_BREAK
case 65:
#line 166 "rtl/sslscanner.l"
{
        return SSLParser::THEN;
      }
	YY_BREAK
case 66:
#line 169 "rtl/sslscanner.l"
{
        return SSLParser::INDEX;
       }
	YY_BREAK
case 67:
#line 172 "rtl/sslscanner.l"
{
        return SSLParser::EQUATE;
      }
	YY_BREAK
case 68:
#line 175 "rtl/sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::ASSIGN;
      }
	YY_BREAK
case 69:
#line 179 "rtl/sslscanner.l"
{
        return SSLParser::TO;
      }
	YY_BREAK
case 70:
#line 182 "rtl/sslscanner.l"
{
        return SSLParser::COLON;
      }
	YY_BREAK
case 71:
#line 185 "rtl/sslscanner.l"
{
        return SSLParser::S_E;
      }
	YY_BREAK
case 72:
#line 188 "rtl/sslscanner.l"
{
        return SSLParser::AT;
      }
	YY_BREAK
case 73:
#line 191 "rtl/sslscanner.l"
{
                return SSLParser::ADDR;
            }
	YY_BREAK
case 74:
#line 195 "rtl/sslscanner.l"
case 75:
#line 196 "rtl/sslscanner.l"
case 76:
#line 197 "rtl/sslscanner.l"
case 77:
#line 198 "rtl/sslscanner.l"
case 78:
#line 199 "rtl/sslscanner.l"
case 79:
#line 200 "rtl/sslscanner.l"
case 80:
#line 201 "rtl/sslscanner.l"
case 81:
#line 201 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::CONV_FUNC;
            }
	YY_BREAK
case 82:
#line 207 "rtl/sslscanner.l"
case 83:
#line 207 "rtl/sslscanner.l"
{
                return SSLParser::FLAGMACRO;
                }
	YY_BREAK
case 84:
#line 210 "rtl/sslscanner.l"
{   return SSLParser::FPOP; }
	YY_BREAK
case 85:
#line 211 "rtl/sslscanner.l"
{   return SSLParser::FPUSH; }
	YY_BREAK
case 86:
#line 213 "rtl/sslscanner.l"
case 87:
#line 214 "rtl/sslscanner.l"
case 88:
#line 215 "rtl/sslscanner.l"
case 89:
#line 216 "rtl/sslscanner.l"
case 90:
#line 217 "rtl/sslscanner.l"
case 91:
#line 218 "rtl/sslscanner.l"
case 92:
#line 219 "rtl/sslscanner.l"
case 93:
#line 220 "rtl/sslscanner.l"
case 94:
#line 220 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::TRANSCEND;
            }
	YY_BREAK
case 95:
#line 225 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::TEMP;
            }
	YY_BREAK
case 96:
#line 230 "rtl/sslscanner.l"
{   return SSLParser::REG_IDX; }
	YY_BREAK
case 97:
#line 231 "rtl/sslscanner.l"
{   return SSLParser::MEM_IDX; }
	YY_BREAK
case 98:
#line 232 "rtl/sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 99:
#line 233 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::REG_ID;
            }
	YY_BREAK
case 100:
#line 237 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::NAME_CALL;
            }
	YY_BREAK
case 101:
#line 242 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::NAME_LOOKUP;
            }
	YY_BREAK
case 102:
#line 247 "rtl/sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::NAME;
            }
	YY_BREAK
case 103:
#line 252 "rtl/sslscanner.l"
case 104:
#line 252 "rtl/sslscanner.l"
{
                    yylval.str = strdup(yytext);
                    return SSLParser::DECOR;
            }
	YY_BREAK
case 105:
#line 256 "rtl/sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 106:
#line 257 "rtl/sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 107:
#line 258 "rtl/sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 108:
#line 259 "rtl/sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 109:
#line 260 "rtl/sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 110:
#line 261 "rtl/sslscanner.l"
{
        yylval.dbl = atof(yytext);
        return SSLParser::FLOATNUM;
     }
	YY_BREAK
case 111:
#line 265 "rtl/sslscanner.l"
{
        yylval.num = strtol(yytext,0,10);
        return SSLParser::NUM;
     }
	YY_BREAK
case 112:
#line 270 "rtl/sslscanner.l"
{
        yylval.num = strtol(yytext,0,16);
        return SSLParser::NUM;
     }
	YY_BREAK
case 113:
#line 275 "rtl/sslscanner.l"
{
                    // a power of two
                    int sign = (yytext[0] == '-' ? -1 : 1);
                    char* start = yytext + (sign == -1 ? 4:3);

                        // David - changed to << for more efficient and 
                        // not depend on the <cmath> anymore.
                    yylval.num = 1 << (strtol(start,0,10) * sign);
                        // yylval.num = (int)pow(2,strtol(start,0,10)) * sign;
                    return SSLParser::NUM;
                }
	YY_BREAK
case 114:
#line 287 "rtl/sslscanner.l"
;
	YY_BREAK
case 115:
#line 288 "rtl/sslscanner.l"
;   /* comment */
	YY_BREAK
case 116:
#line 289 "rtl/sslscanner.l"
;
	YY_BREAK
case 117:
#line 290 "rtl/sslscanner.l"
{   // funky print-next-line-for-debug token
                    if (yyleng > MAX_LINE)
                    {
                        cerr << theLine + 1 << ": line too long.\n";
                        exit(1);
                    }
                    // saves the next line
                    strcpy(lineBuf, yytext+1);
                    theLine++;
                    // reparse from char 1
                    // give back all but the \n to rescan
                    yyless(1);

                    // echo the line if line tracing is turned on
                    if (traceLines)
                    cerr << lineBuf << endl;

                    // Quell a warning
                    yy_last_accepting_state = 0;
                    yy_last_accepting_cpos = 0;
                }
	YY_BREAK
case 118:
#line 311 "rtl/sslscanner.l"
ECHO;
	YY_BREAK
	    case YY_STATE_EOF(INITIAL):
		yyterminate();
#line 493 "/usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
#line 541 "/usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_SSLScanner_DEBUG != 0
#ifndef YY_SSLScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_SSLScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_SSLScanner_CHAR *dest = YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_SSLScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_SSLScanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_SSLScanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_SSLScanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_SSLScanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_SSLScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_SSLScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;
#line 717 "/usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 319 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
#line 721 "/usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_SSLScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 319 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 318);
#line 755 "/usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_SSLScanner_CHAR c, register YY_SSLScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_SSLScanner_CHAR c;
register YY_SSLScanner_CHAR *yy_bp;
#endif
#else
void YY_SSLScanner_CLASS::yyunput( YY_SSLScanner_CHAR c, YY_SSLScanner_CHAR *yy_bp )
#endif

    {
    register YY_SSLScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_SSLScanner_CHAR *dest =
	    &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[YY_SSLScanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_SSLScanner_CHAR *source =
	    &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_SSLScanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_SSLScanner_CLASS::input()
#endif
    {
    int c;
    YY_SSLScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_SSLScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_RESTART( YY_SSLScanner_IFILE  *input_file )
#else
void YY_SSLScanner_RESTART( input_file )
YY_SSLScanner_IFILE  *input_file;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_RESTART ( YY_SSLScanner_IFILE  *input_file )
#endif

    {
    YY_SSLScanner_INIT_BUFFER( YY_SSLScanner_CURRENT_BUFFER, input_file );
    YY_SSLScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_SSLScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_SSLScanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_SSLScanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_SSLScanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_SSLScanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_SSLScanner_CURRENT_BUFFER = new_buffer;
    YY_SSLScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_LOAD_BUFFER_STATE( void )
#else
void YY_SSLScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_SSLScanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_SSLScanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_SSLScanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_SSLScanner_CREATE_BUFFER( YY_SSLScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_SSLScanner_CREATE_BUFFER( file, size )
YY_SSLScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_SSLScanner_CLASS::YY_SSLScanner_CREATE_BUFFER( YY_SSLScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SSLScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_SSLScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SSLScanner_CREATE_BUFFER()" );

    YY_SSLScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_SSLScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_SSLScanner_CURRENT_BUFFER )
	YY_SSLScanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_SSLScanner_IFILE  *file )
#else
void YY_SSLScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_SSLScanner_IFILE  *file;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_SSLScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 311 "rtl/sslscanner.l"

