/*  execsrv RPC interface
 *
 *
 */
 
import <l4/env/env.h>
import <l4/os3/loader.h>
 
interface os2exec
{
  /*  open a given module
   */
  long open ([in,  string] char *fname,
             [in]  l4dm_dataspace_t img_ds,
             [in]  unsigned long flags,
             [in, out,
             ref,
             prealloc_client,
             prealloc_server,
             size_is(cbLoadError)] char **chLoadError,
             [in, out] unsigned long *cbLoadError,
             [out] unsigned long *hmod);

  /*  load a given module
   */
  long load ([in]  unsigned long hmod,
             [in, out,
             ref,
             prealloc_client,
             prealloc_server,
             size_is(cbLoadError)] char **chLoadError,
             [in, out] unsigned long *cbLoadError,
             [out] os2exec_module_t *s);

  /*  request the execsrv to share all
   *  dataspaces of a given module sections
   *  with our task
   */
  long share ([in]  unsigned long hmod);

  /*  get next imported module handle
   *  for a given module
   */
  long getimp ([in]  unsigned long hmod,
               [in,  out] int *index,
               [out] unsigned long *imp_hmod);

  /*  get next section for a given
   *  module
   */
  long getsect ([in]  unsigned long hmod,
                [in,  out] int *index,
                [out] l4exec_section_t *sect);

  /*  query module entry point address
   */
  long query_procaddr([in]  unsigned long hmod,
                      [in]  unsigned long ordinal,
                      [in, string]  char *modname,
                      [out] l4_addr_t *addr);

  long query_modhandle([in, string] char *pszModname,
                       [out] unsigned long *phmod);

  long query_modname([in]  unsigned long hmod,
                     [in]  unsigned long cbBuf,
                     [out, string,
                     prealloc_client,
                     prealloc_server] char **pBuf);

  /*  shared memory manupulation functions
   */

  /*  get free sharemem address for specified size
   */
  long alloc_sharemem([in] l4_uint32_t size,
                      [in, string] char *name,
                      [in] unsigned long rights,
                      [out] l4_addr_t *addr,
                      [out] l4_uint32_t *area);

  long map_dataspace([in]  l4_addr_t addr,
                     [in]  l4_uint32_t rights,
                     [in]  l4dm_dataspace_t *ds);

  long unmap_dataspace([in]  l4_addr_t addr,
                       [in]  l4dm_dataspace_t *ds);

  long get_dataspace([in, out] l4_addr_t *addr,
                     [out] l4_size_t *size,
                     [out] l4dm_dataspace_t *ds);

  long get_sharemem([in]  l4_addr_t   pb,
                    [out] l4_addr_t   *addr,
                    [out] l4_uint32_t *size);

  long get_namedsharemem([in, string] char *name,
                         [out] l4_addr_t   *addr,
                         [out] l4_uint32_t *size);

  long release_sharemem([in] l4_addr_t addr);
};
