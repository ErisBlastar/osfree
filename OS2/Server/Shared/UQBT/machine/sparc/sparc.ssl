#
# Copyright (C) 1997, Shane Sendall
# Copyright (C) 1998-2001, The University of Queensland
# Copyright (C) 2001, Sun Microsystems, Inc
#
# See the file "LICENSE.TERMS" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL
# WARRANTIES.
#

# File: sparc.ssl
# Desc: This file contains a semantic description of the SPARC V8 processor.

# --------------------------------------------------------------------------
# SPARC RTL
# --------------------------------------------------------------------------
 
# $Revision: 1.24 $
# Jun-Dec 97 - Shane: Created
#    Dec 98 - Shawn: Added floating points
# 05 Mar 99 - Mike: FiTOs_ etc are no longer unary operators; use itof etc
# 09 Mar 99 - Mike: notice that sqrt is inconsistent with 386... needs work
# 10 Mar 99 - Mike: SQRTs -> sqrt()
# 19 Mar 99 - Mike: re-fixed bit numbers e.g. rd[30:31] -> rd[31:31]
# 24 Mar 99 - Mike: renamed floating point flags to agree with standard names
# 24 May 99 - Doug: Added use of r[tmp] to SAVE and RESTORE. The semantics
#                     weren't before this as they ignored the effect of the
#                     window change of the locations in the addition.
#                   Added non-window version of RESTORE that only records the
#                     ADD semantics
# 13 Jul 99 - Mike: Added LDQF, changed floating point multiword load/stores
#                   to not do word at a time
# 03 Nov 99 - Mike: Fixed ANDN, ORN etc instructions
# 19 Jan 00 - Mike: Added INTEGER and FLOAT keywords to @REGISTER section
# 12 Jul 00 - Mike: Changed order of args to CONV_FUNCs (from, to, operand)
#                     Also changed stores to use trunc()
# 30 Aug 00 - Mike: Changed loads to use zfill() or sgnex()
# 05 Sep 00 - Mike: Result of float comparison is tmpf or tmpd now
# 06 Sep 00 - Mike: Fixed semantics of FNEG
# 25 Sep 00 - Mike: Arg to SETFFLAGS was incorrect
# 13 Oct 00 - Mike: DIV and DIVS semantics are 32/32 => 32 for now
# 20 Nov 00 - Mike: Args to SETFFLAGS are the operands, not the result, now.
#                     Therefore can use these args in a sub-like if stmt
# 22 Nov 00 - Mike: DIV, MUL semantics are back to 64/32, but with quick
#                     versions (Q suffix); also fixed MAX32BIT etc with "-1"
# 30 Nov 00 - Mike: Changed some {size} to zfill etc
# 31 Jan 01 - Mike: Removed @DEFINITION section (UQDBT only)
# 01 Feb 01 - Nathan: Removed STDFQ (privledged) and LDQF (non-existent)
# 01 Feb 01 - Nathan: Changed floating point op params to match .spec
# 02 Feb 01 - Nathan: Added operand section
# 02 Feb 01 - Nathan: Removed alt. address space instructions (priv & broken)
# 16 Feb 01 - Nathan: Added fetch-execute cycle
# 22 Feb 01 - Mike: LDDF now {64} (was {32})
# 23 Feb 01 - Nathan: Fixed control-flow instructions, save, restore
# 27 Feb 01 - Nathan: Fixed most of the alu instructions
# 07 Mar 01 - Simon: Modified table syntax and removed |= symbol
# 15 Mar 01 - Mike: Floating point operators now use just -f, not -fd/-fq etc
# 30 Apr 01 - Nathan: Minor clean-up to trap instructions, changed logicals to 
#                   use 0- rather than !
# 21 Jun 01 - Nathan: Fixed precedence problem in LDD & STD


NWINDOWS    := 8;            # Number of windows (register windows)-
                             # implementation dependent
MAX_BYTE    := 2**8  - 1;    # a byte of all 1's
MAX32BIT    := 2**32 - 1;    # a word of all 1's
MAXSIGN32   := 2**31 - 1;    # all bits except sign bit are set
SIGN_32_NEG := -2**31;
WORD        := 4;            # size of word in bytes (for now)

ENDIANNESS BIG;

# register mapping
# normal registers have a mapping to a Cardinal
# special register maps to -1

INTEGER
[ %g0, %g1, %g2, %g3, %g4, %g5, %g6, %g7, 
  %o0, %o1, %o2, %o3, %o4, %o5, %o6, %o7,
  %l0, %l1, %l2, %l3, %l4, %l5, %l6, %l7,
  %i0, %i1, %i2, %i3, %i4, %i5, %i6, %i7 ][32] -> 0..31,
  
  %sp[32] -> 14,  # Aliases
  %fp[32] -> 30;

FLOAT
[ %f0 , %f1 , %f2 , %f3 , %f4 , %f5 , %f6 , %f7,
  %f8 , %f9 , %f10, %f11, %f12, %f13, %f14, %f15,
  %f16, %f17, %f18, %f19, %f20, %f21, %f22, %f23,
  %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31 ][32] -> 32..63,

%f0to1[64] -> 64 COVERS %f0..%f1,
%f2to3[64] -> 65 COVERS %f2..%f3,
%f4to5[64] -> 66 COVERS %f4..%f5,
%f6to7[64] -> 67 COVERS %f6..%f7,
%f8to9[64] -> 68 COVERS  %f8..%f9,
%f10to11[64] -> 69 COVERS %f10..%f11,
%f12to13[64] -> 70 COVERS %f12..%f13,
%f14to15[64] -> 71 COVERS %f14..%f15,
%f16to17[64] -> 72 COVERS %f16..%f17,
%f18to19[64] -> 73 COVERS %f18..%f19,
%f20to21[64] -> 74 COVERS %f20..%f21,
%f22to23[64] -> 75 COVERS %f22..%f23,
%f24to25[64] -> 76 COVERS %f24..%f25,
%f26to27[64] -> 77 COVERS %f26..%f27,
%f28to29[64] -> 78 COVERS %f28..%f29,
%f30to31[64] -> 79 COVERS %f30..%f31,
%f0to3[128]  -> 80 COVERS %f0..%f3,
%f4to7[128]  -> 81 COVERS %f4..%f7,
%f8to11[128] -> 82 COVERS %f8..%f11,
%f12to15[128]-> 83 COVERS %f12..%f15,
%f16to19[128]-> 84 COVERS %f16..%f19,
%f20to23[128]-> 85 COVERS %f20..%f23,
%f24to27[128]-> 86 COVERS %f24..%f27,
%f28to31[128]-> 87 COVERS %f28..%f31;

INTEGER
[ %pc, %npc, %Y, %CWP, %TBR, %WIM, %PSR, %FSR ][32] -> -1, # control regs
[ %CF, %ZF, %NF, %OF, %AF ][1] -> -1,  # Standard flags
[ %FZF,%FLF,%FGF ][1] -> -1;           # Floating point flags


#@EXCEPTIONS
# Priority name -> id
# 1 reset -> 0
# 2 data_store_error -> 0x2B
#       instruction_access_MMU_miss -> 0x3C
# 3 instruction_access_error -> 0x21
# 4 r_register_access_error -> 0x20
# 5 instruction_access_exception -> 0x01
# 6 privileged_instruction -> 0x03
# 7 illegal_instruction -> 0x02
# 8 fp_disabled -> 0x04
#       cp_disabled -> 0x24
#       unimplemented_FLUSH -> 0x25
#       watchpoint_detected -> 0x0B
# 9 window_overflow -> 0x05
#       window_underflow -> 0x06
#10 mem_address_not_aligned -> 0x07
#11 fp_exception -> 0x08
#       cp_exception -> 0x28
#12 data_access_error -> 0x29
#       data_access_MMU_miss -> 0x2C
#13 data_access_exception -> 0x09
#14 tag_overflow -> 0x0A
#15 division_by_zero -> 0x2A
#16 trap_instruction[0..0x7F] -> 0x80..0xFF
#31..17 interrupt[1..15] -> 0x11..0x1F
#@EXCEPTIONS

LOGICALFLAGS(op1)   {
        *1*  %NF := op1@[31:31]
        *1*  %ZF := [op1 = 0 ? 1 : 0]
        *1*  %OF := 0
        *1*  %CF := 0
};
ADDFLAGS(op1, op2, result)  {   
        *1*  %NF := result@[31:31]
        *1*  %ZF := [result = 0 ? 1 : 0]
        *1*  %OF := ((op1@[31:31]) & (op2@[31:31]) & ~(result@[31:31])) |
                (~(op1@[31:31]) & ~(op2@[31:31]) & (result@[31:31]))
        *1*  %CF := ((op1@[31:31]) & (op2@[31:31])) |
                (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
};
TADDFLAGS(op1, op2, result) {
        *1*  %NF := result@[31:31]
        *1*  %ZF := [result = 0 ? 1 : 0]
#       *1*  %OF := temp_v
        *1*  %CF := ((op1@[31:31]) & (op2@[31:31])) |
                (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
};
SUBFLAGS(op1, op2, result)  {
        *1*  %NF := result@[31:31]
        *1*  %ZF := [result = 0 ? 1 : 0]
        *1*  %OF := ((op1@[31:31]) & ~(op2@[31:31]) & ~(result@[31:31])) | 
                (~(op1@[31:31]) & (op2@[31:31]) & (result@[31:31]))
        *1*  %CF := (~(op1@[31:31]) & (op2@[31:31])) | 
                ((result@[31:31]) & (~(op1@[31:31]) | (op2@[31:31])))
};
TSUBFLAGS(op1, op2, result) {
        *1*  %NF := result@[31:31]
        *1*  %ZF := [result = 0 ? 1 : 0]
#       *1*  %OF := temp_v
        *1*  %CF := (~(op1@[31:31]) & (op2@[31:31])) | 
                ((result@[31:31]) & (~(op1@[31:31]) | (op2@[31:31])))
};
# MVE: These are correct only for a 32 but result; usually result is 64 bits
MULTFLAGS(op1, op2, result) {       
        *1*  %NF := result@[31:31]
        *1*  %ZF := [result = 0 ? 1 : 0]
        *1*  %OF := 0
        *1*  %CF := 0
};
MULTSFLAGS(op1, op2, result){
        *1*  %NF := result@[31:31]
        *1*  %ZF := [result = 0 ? 1 : 0]
        *1*  %OF := ((op1@[31:31]) & (op2@[31:31]) & ~(result@[31:31])) | 
                (~(op1@[31:31]) & ~(op2@[31:31]) & (result@[31:31]))
        *1*  %CF := ((op1@[31:31]) & (op2@[31:31])) | 
                (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
};
DIVFLAGS(op1, op2, result)  {
        *1*  %NF := result@[31:31]
        *1*  %ZF := [result = 0 ? 1 : 0]
#       *1*  %OF := temp_v
        *1*  %CF := 0
};

SETFFLAGS(op1, op2) {
    *1* %FZF := [op1 = op2 ? 1 : 0]
    *1* %FLF := [op1 < op2 ? 1 : 0]
    *1* %FGF := [op1 > op2 ? 1 : 0]
};

# Note currently ignores cond
TRAP(cond, op1) {
    *32* %l1 := %pc
    *32* %l2 := %npc
    *32* %TBR@[4:11] := op1
     *1* %PSR@[7:7] := 1
    *32* %pc := %TBR
    *32* %npc := %TBR+4
};


FAST
  UMUL ->  UMULQ,
  SMUL ->  SMULQ,
  UDIV ->  UDIVQ,
  SDIV ->  SDIVQ,
  UMULCC -> UMULCCQ,
  SMULCC -> SMULCCS,
  UDIVCC -> UDIVCCQ,
  SDIVCC -> SDIVCCQ;


OPERAND
    eaddr := { absoluteA, dispA, indirectA, indexA },
    reg_or_imm := { imode, rmode };

OPERAND
    dispA      rs1, simm13      *32* r[rs1] + sgnex(13,32,simm13),
    absoluteA  simm13           *32* sgnex(13,32,simm13),
    indexA     rs1, rs2         *32* r[rs1] + r[rs2],
    indirectA  rs1              *32* r[rs1],
    imode      simm13           *32* sgnex(13,32,simm13),
    rmode      rs2              *32* r[rs2],
    indexR     rs1, rs2         *32* r[rs1] + r[rs2],
    indirectR  rs1              *32* r[rs1];



FETCHEXEC           *32* %g0 := 0
		    *1* %CTI := 0
                    *32* execute( %pc )
                    *32* %pc := [ %CTI = 0 ? %npc : %pc ]
                    *32* %npc := [ %CTI = 0 ? %npc + 4 : %npc ];


# Load double instruction-  the 1st reg. of double load must be even
# the 2nd reg. of double load must be the next reg. after 1st, hence odd. 
#LOADD := { LDD_, LDDA_ }
LDD      eaddr, rd                      *32* r[rd&0x1E] := m[eaddr]
                                        *32* r[(rd&0x1E)+1] := m[eaddr + WORD]; 
# Note: the above offset (WORD) is now in bytes!

#LOADU := { LD_, LDA_ }
LD       eaddr, rd                      *32* r[rd] := m[eaddr]{32};
                                              
#LOADUH := { LDUH_, LDUHA_ }
LDUH     eaddr, rd                      *32* r[rd] := zfill(16, 32, m[eaddr]);
                                              
#LOADUB := { LDUB_, LDUBA_ }
LDUB     eaddr, rd                      *32* r[rd] := zfill(8, 32, m[eaddr]);
                                              
#LOADSH := { LDSH_, LDSHA_ }
LDSH     eaddr, rd                      *32* r[rd] := sgnex(16, 32, m[eaddr]);

#LOADSB := { LDSB_, LDSBA_ }
LDSB     eaddr, rd                      *32* r[rd] := sgnex(8, 32, m[eaddr]);


# Store double instruction- the 1st reg. of double op. must be even
# the 2nd reg. of double op. must be the next reg. after 1st, hence odd
#STOD := { STD_, STDA_ }
STD      rd, eaddr                      *32* m[eaddr] := r[rd&0x1E]  
                                        *32* m[eaddr + WORD] := r[(rd&0x1E)+1];

#STW := { ST_, STA_}
ST       rd, eaddr                      *32* m[eaddr] := r[rd];

#STH := { STH_, STHA_ }
STH      rd, eaddr                      *16* m[eaddr] := truncs(32, 16, r[rd]);

#STB := { STB_, STBA_ }
STB      rd, eaddr                      *8*  m[eaddr] := truncs(32, 8, r[rd]);


# LOad STore Unsigned Byte  
# the byte number given by address offset 
# (1st 2 bytes of addr.) is selected by a shift
# the copied byte (in the source addr.) is replaced with 1's
#LDSTUNBYTE := { LDSTUB_, LDSTUBA_ }
LDSTUB   eaddr, rd                      *32*  r[rd] := zfill(8,32,m[eaddr])
                                        *8*  m[eaddr] := m[eaddr] | MAX_BYTE;

# Swap using temp register
#SWAPS := { SWAP_, SWAPA_ }
SWAP     eaddr, rd                      *32* r[tmp1] := r[rd]
                                        *32* r[rd] := m[eaddr] 
                                        *32* m[eaddr] := r[tmp1];

# Logical operators - use OP1 (table) to map the correct operator. 

LOG_N   := { "AND","OR","XOR","ANDCC","ORCC","XORCC" };
OP1     := {  "&",  "|", "^",   "&",    "|",   "^" };
LOG_NOT := { "ANDN","ORN","XNOR","ANDNCC","ORNCC","XNORCC" };
LOG_CC  := { "ANDCC","ANDNCC","ORCC","ORNCC","XORCC","XNORCC" };

LOG_N[IDX]      rs1, reg_or_imm, rd
                    *32* r[rd] := r[rs1] OP1[IDX] reg_or_imm;
LOG_NOT[IDX]    rs1, reg_or_imm, rd
                    *32* r[rd] := r[rs1] OP1[IDX] (0-reg_or_imm - 1 );
LOG_CC[IDX]     rs1, reg_or_imm, rd
                    LOGICALFLAGS(r[rd]);

# sethi instruction- puts the immediate into the top 22 bits
SETHI   val, rd                         *32* r[rd] := val;

NOP                                    _;

FLUSH  eaddr                            _; # icache flush
STBAR                                   _; # store barrier

# Shift operators- again uses OP2 table for correct operator. 

SHIFTS  := { "SLL", "SRL", "SRA" };
OP2     := { "<<",  ">>",  ">>A" };
SHIFTS[IDX]     rs1, reg_or_imm, rd
			        *32* r[rd] := r[rs1] OP2[IDX] reg_or_imm;


# Arithmetic operators- uses OP3 table for correct operator. 
# NOTE: The format of these (number of RTLs, etc) must agree with the
# isCompare function in rtl/ctisparc.cc.

ARITH   := { "ADD", "SUB", "ADDCC", "SUBCC", "TADDCC", "TSUBCC" };
OP3     := {  "+",   "-",    "+",     "-",     "+",       "-"   };

ARITH[IDX]   rs1, reg_or_imm, rd
                *32* r[tmp] := r[rs1]
			    *32* r[rd]  := r[rs1] OP3[IDX] reg_or_imm;

ADDCC         rs1, reg_or_imm, rd
                ADDFLAGS(r[tmp], reg_or_imm, r[rd]);

SUBCC         rs1, reg_or_imm, rd
                SUBFLAGS(r[tmp], reg_or_imm, r[rd]);

TADDCC        rs1, reg_or_imm, rd
              TADDFLAGS(r[tmp], reg_or_imm, r[rd]);

TSUBCC        rs1, reg_or_imm, rd
              TSUBFLAGS(r[tmp], reg_or_imm, r[rd]);

ARITH_C := { "ADDX", "SUBX", "ADDXCC", "SUBXCC" };
OP4     := { "+",      "-",    "+",      "-" };

ARITH_C[idx]  rs1, reg_or_imm, rd
                *32* r[tmp] := r[rs1]
                *32* r[rd]  := r[rs1] OP4[idx] reg_or_imm OP4[idx] zfill(1,32,%CF) ;
ADDXCC        rs1, reg_or_imm, rd
                ADDFLAGS(r[tmp], reg_or_imm, r[rd]);
SUBXCC        rs1, reg_or_imm, rd
                SUBFLAGS(r[tmp], reg_or_imm, r[rd]);

# Unsigned Multiplication - uses the Y register to store top 32 bits treats  Y
#  and r[rd] as 64 bit register
UMULT   := { "UMUL", "UMULCC" };

UMULT[idx]  rs1, reg_or_imm, rd
                *32* r[tmp] := r[rs1]
                *64* r[tmpl] := zfill(32, 64, r[rs1]) * zfill(32, 64, reg_or_imm)
                *32* r[rd] := truncs(64, 32, r[tmpl])
                *32* %Y := r[tmpl]@[32:63];
UMULTCC     rs1, reg_or_imm, rd
                MULTFLAGS(r[tmp], reg_or_imm, r[rd]);


MULSCC      rs1, reg_or_imm, rd
                *32* r[tmp] := (r[rs1] >> 1) | [(%NF^%OF) = 1 ? 1<<31 : 0]
                *32* r[tmp2] := [(%Y@[0:0] = 1) ? reg_or_imm : 0 ]
                *32* %Y := %Y >> 1 | (r[rs1] << 31)
                *32* r[rd] := r[tmp] + r[tmp2]
                ADDFLAGS( r[tmp], r[tmp2], r[rd]);
    

# Signed Multiplication - uses the Y register to store top 32 bits treats  Y 
# and r[rd] as 64 bit register
SMULT   := { "SMUL", "SMULCC" };
SMULT[idx]  rs1, reg_or_imm, rd
                *32* r[tmp] := r[rs1]
                *64* r[tmpl] := sgnex(32, 64, r[rs1]) *! sgnex(32, 64, reg_or_imm)
                *32* r[rd] := truncs(64, 32, r[tmpl])
                *32* %Y := r[tmpl]@[32:63];
SMULCC      rs1, reg_or_imm, rd
                MULTFLAGS(r[tmp], reg_or_imm, r[rd]);

# Unsigned Multiplication Quick - 32 x 32 -> 32 bits
UMULTQ  := { "UMULQ", "UMULCCQ" };
UMULTQ[idx] rs1, reg_or_imm, rd
                *32* r[rd] := r[rs1] * reg_or_imm;
UMULCCQ     rs1, reg_or_imm, rd
                MULTFLAGS(r[rs1], reg_or_imm, r[rd]);

# Signed Multiplication - 32 x 32 bits -> 32 bits
SMULTQ := { "SMULQ", "SMULCCQ" };
SMULTQ[idx]  rs1, reg_or_imm, rd
                *32* r[rd] := r[rs1] *! reg_or_imm;
SMULCCQ      rs1, reg_or_imm, rd
                MULTFLAGS(r[rs1], reg_or_imm, r[rd]);


# Unsigned Division
# If overflow has occured give result highest value (all 1's)
# Note: in practice, overflow only happens when the numerator is 0x80000000
# and the divisor is -1
# For now, we don't model the behaviour with these inputs (too expensive)
UDIVS := { "UDIV", "UDIVCC" };
UDIVS[idx]  rs1, reg_or_imm, rd
    *64* r[tmpl] := (zfill(32, 64, %Y) << 32) | zfill(32, 64, r[rs1])
    *32* r[rd] := truncu(64, 32, r[tmpl] / zfill(32, 64, reg_or_imm));
#   *64* r[tmpl] := r[tmpl] / reg_or_imm{64}
#   *32* r[rd] := [r[tmpl] > MAX32BIT  ? MAX32BIT : r[tmpl]{32}] ;

#
# Unsigned division: 32 / 32 bits -> 32 bits
#
UDIVSQ := { "UDIVQ", "UDIVCCQ" };
UDIVSQ[idx] rs1, reg_or_imm, rd
                *32* r[rd] := r[rs1] / reg_or_imm;
UDIVCCQ     rs1, reg_or_imm, rd
                DIVFLAGS(r[rs1], reg_or_imm, r[rd]);

# Signed Division
# If no overflow or underflow then put value in result
# If overflow has occured give result highest value (neg. or positive)
# Note: in practice, overflow only happens when the numerator is 0x80000000
# and the divisor is -1
# For now, we don't model the behaviour with these inputs (too expensive)
SDIVS := { "SDIV", "SDIVCC" };
SDIVS[idx]  rs1, reg_or_imm, rd
                *64* r[tmpl] := (zfill(32, 64, %Y) << 32) | zfill(32, 64, r[rs1])
                *32* r[rd] := truncs(64, 32, r[tmpl] /! sgnex(32, 64, reg_or_imm)) ;
#   *32* r[rd] := [((r[tmp]@[32:63] = 0) or (r[tmp]@[32:63] = MAX32BIT)) ? 
#   r[tmp] : [r[tmp] > 0 ? MAXSIGN32 : SIGN_32_NEG]]! ;

SDIVSQ := { "SDIVQ", "SDIVCCQ" };
SDIVSQ[idx] rs1, reg_or_imm, rd
                *32* r[rd] := r[rs1] /! reg_or_imm;
SDIVCCQ     rs1, reg_or_imm, rd
                DIVFLAGS(r[rs1], reg_or_imm, r[rd]);

# Save instruction is machine-dependant (register windows)
# Note that these versions of save and restore are one possible implementation 
# of the sparc spec (essentially number of windows = 1 & assume the window traps
# do what they're supposed to do). 
SAVE  rs1, reg_or_imm, rd
                        *32* r[tmp] := r[rs1] + reg_or_imm
                        *32* m[%sp+0]  := %l0
                        *32* m[%sp+4]  := %l1
                        *32* m[%sp+8]  := %l2
                        *32* m[%sp+12] := %l3
                        *32* m[%sp+16] := %l4
                        *32* m[%sp+20] := %l5
                        *32* m[%sp+24] := %l6
                        *32* m[%sp+28] := %l7
                        *32* m[%sp+32] := %i0
                        *32* m[%sp+36] := %i1
                        *32* m[%sp+40] := %i2
                        *32* m[%sp+44] := %i3
                        *32* m[%sp+48] := %i4
                        *32* m[%sp+52] := %i5
                        *32* m[%sp+56] := %i6
                        *32* m[%sp+60] := %i7
                        *32* %i0 := %o0
                        *32* %i1 := %o1
                        *32* %i2 := %o2
                        *32* %i3 := %o3
                        *32* %i4 := %o4
                        *32* %i5 := %o5
                        *32* %i6 := %o6
                        *32* %i7 := %o7
                        *32* r[rd] := r[tmp];

# Restore instruction is machine-dependant (register windows) 
RESTORE  rs1, reg_or_imm, rd
                        *32* r[tmp] := r[rs1] + reg_or_imm
                        *32* %o0 := %i0
                        *32* %o1 := %i1
                        *32* %o2 := %i2
                        *32* %o3 := %i3
                        *32* %o4 := %i4
                        *32* %o5 := %i5
                        *32* %o6 := %i6
                        *32* %o7 := %i7
                        *32* r[rd] := r[tmp] # for rd==sp
                        *32* %l0 := m[%sp+0]
                        *32* %l1 := m[%sp+4]
                        *32* %l2 := m[%sp+8]
                        *32* %l3 := m[%sp+12]
                        *32* %l4 := m[%sp+16]
                        *32* %l5 := m[%sp+20]
                        *32* %l6 := m[%sp+24]
                        *32* %l7 := m[%sp+28]
                        *32* %i0 := m[%sp+32]
                        *32* %i1 := m[%sp+36]
                        *32* %i2 := m[%sp+40]
                        *32* %i3 := m[%sp+44]
                        *32* %i4 := m[%sp+48]
                        *32* %i5 := m[%sp+52]
                        *32* %i6 := m[%sp+56]
                        *32* %i7 := m[%sp+60]
                        *32* r[rd] := r[tmp]; # repeat

# Jump instructions- uses COND table for correct boolean expression. 
# Always executes delay instr. on branch

JUMPS := { "BA", "BN", "BNE", "BE", "BG", "BLE", "BGE", "BL",
        "BGU", "BLEU", "BCC", "BCS", "BPOS", "BNEG", "BVC", "BVS" };

COND := { "1", "0", "~%ZF", "%ZF", "~(%ZF | (%NF ^ %OF))", "%ZF | (%NF ^ %OF)",
        "~(%NF ^ %OF)", "%NF ^ %OF", "~(%CF | %ZF)", "%CF | %ZF", "~%CF", "%CF",
        "~%NF", "%NF", "~%OF", "%OF" };

JUMPS[idx]  reloc 
		*32* %pc := %npc
		*32* %npc := [(COND[idx] = 0) ? %npc+4 : reloc]
		*1* %CTI := 1;

JUMPSA_C  := { "BNEA", "BEA", "BGA", "BLEA", "BGEA",
            "BLA", "BGUA", "BLEUA", "BCCA", "BCSA", "BPOSA",
            "BNEGA", "BVCA", "BVSA" };

COND1_C := { "~%ZF", "%ZF", "~(%ZF | (%NF ^ %OF))",
            "%ZF | (%NF ^ %OF)", "~(%NF ^ %OF)", "%NF ^ %OF",
            "~(%CF | %ZF)", "%CF | %ZF", "~%CF", "%CF", "~%NF", "%NF",
            "~%OF", "%OF" };

BAA reloc  # unconditional branches
                *32* %pc := reloc
                *32* %npc := reloc + 4
		*1* %CTI := 1;
BNA reloc
                *32* %pc := %npc + 4
                *32* %npc := %npc + 8
		*1* %CTI := 1;

JUMPSA_C[idx] reloc   # Conditional branches
                *32* %pc := [(COND1_C[idx] = 0) ? %npc+4 : %npc ]
                *32* %npc := [(COND1_C[idx] = 0) ? %npc+8 : reloc]
		*1* %CTI := 1;

# BG_ := JUMPS( ~(%ZF | (%NF ^ %OF)), 1)

# *32* %npc := [(COND[idx] = 1) ? %pc+(4*disp22) : [(a = 1) ? %pc+4 : %npc]]
# *32* %pc := [((COND[idx] = 0) and (a = 1)) ? %pc+4 : %pc]
# *32* %pc := %pc;

# Call instruction- always executes delay instruction
# PC relative transfer of control
CALL__ reloc
                *32* r[15] := %pc  
		*32* %pc := %npc
                *32* %npc := reloc
		*1* %CTI := 1;

# Jump and Link instruction- always executes delay instruction
# Register indirect transfer of control
# Note: eaddr and r[rd] could be the same register (e.g. jmpl %o7, %o7)
JMPL  eaddr, rd
                *32* r[tmp] := eaddr
                *32* r[rd] := %pc
		*32* %pc := %npc
                *32* %npc := r[tmp]
		*1* %CTI := 1;


# Read and Write State Register Instructions
RDY  rd
                *32* r[rd] := %Y;

RDPSR   rd
                *32* r[rd] := %PSR;

RDWIM   rd
                *32* r[rd] := %WIM;

RDTBR   rd
                *32* r[rd] := %TBR;

WRY  rs1, reg_or_imm
                *32* %Y := r[rs1] ^ reg_or_imm;

WRPSR  rs1, reg_or_imm
                *32* %PSR := r[rs1] ^ reg_or_imm;

WRWIM  rs1, reg_or_imm
                *32* %WIM := r[rs1] ^ reg_or_imm;

WRTBR  rs1, reg_or_imm
                *32* %TBR := %TBR | ((r[rs1] ^ reg_or_imm) << 12);

## Float Instructions
# NB all instructions assume that we have registers up to 128 bits and that 
# the 4 sparc registers used as such are automagically determined.
# FMOVs is used to move the word content of a floating point register to a 
# destination floating point register.
# NB: This means that 2 FMOVs statements are required to move a double and 
# 4 to move a quad.

FMOVs      fs2s, fds
                *32* r[fds] := r[fs2s];
FNEGs      fs2s, fds
                *32* r[fds] := 0.0 -f r[fs2s];
FABSs      fs2s, fds
                *32* r[fds] := [ r[fs2s] < 0.0 ? 0.0 -f r[fs2s] : r[fs2s] ];

# FMUL requires primitives
#   *f      (multiply 2 32 bit floats and store the result in
#           a 32 bit float)
#   *fd     (multiply 2 64 bit floats and store the result in
#           a 64 bit float)
#   *fq     (multiply 2 128 bit floats and store the result
#           in a 128 bit float)
# added to scanner.m, parser.y ss.cc ss.h as at 14/12/1998

#FxMULy Requires primitives:
#   *fsd    (multiply 2 32 bit floats to produce a 64 bit float)
#   *fdq    (multiply 2 64 bit floats to produce a 128 bit float)
# added to scanner.m, parser.y ss.cc ss.h as at 14/12/1998

# FADD requires primitives
#   +f  (add two 32 bit floats)
#   +fd (add two 64 bit floats)
#   +fq (add two 128 bit floats)
# added to scanner.m, parser.y ss.cc ss.h as at 14/12/1998

# FSUB requires primitives
#   -f  (subtract a 32 bit float from another 32 bit float)
#   -fd (subtract a 64 bit float from another 64 bit float)
#   -fq (subtract a 128 bit float from another 128 bit float)
# added to scanner.m, parser.y ss.cc ss.h as at 14/12/1998
# Note MVE: I want to use just -f now

# FDIV requires primitives
#   /f  (divides 2 32 bit floats)
#   /fd (divides 2 64 bit floats)
#   /fq (divides 2 128 bit floats)
# added to scanner.m, parser.y ss.cc ss.h as at 14/12/1998

# Shamelessly borrowed from integers

OPS5 := { "+f", "-f", "/f", "*f" };
FARITHS := { "FADDs", "FSUBs", "FDIVs", "FMULs" };

OPD5 := { "+f", "-f", "/f", "*f", "*f" };
FARITHD := { "FADDd", "FSUBd", "FDIVd", "FMULd", "FsMULd" };

OPQ5 := { "+f", "-f", "/f", "*f", "*f" };
FARITHQ := { "FADDq", "FSUBq", "FDIVq", "FMULq", "FdMULq" };

FARITHS[idx] fs1s, fs2s, fds  *32* r[fds] := r[fs1s] OPS5[idx] r[fs2s] ;
FARITHD[idx] fs1d, fs2d, fdd  *64* r[fdd] := r[fs1d] OPD5[idx] r[fs2d] ;
FARITHQ[idx] fs1q, fs2q, fdq *128* r[fdq] := r[fs1q] OPQ5[idx] r[fs2q] ;

# FSQRTx_ assumes that SQRT can operate on a register of any size

FSQRTs     fs2s, fds      *32* r[fds] := sqrt(r[fs2s]);
FSQRTd     fs2d, fdd      *64* r[fdd] := sqrt(r[fs2d]);
FSQRTq     fs2q, fdq     *128* r[fdq] := sqrt(r[fs2q]);

# FiTOf etc are no longer their own unique unary operators
FiTOs      fs2s, fds     *32* r[fds] := itof(32, 32,  r[fs2s]);
FiTOd      fs2s, fdd     *64* r[fdd] := itof(32, 64,  r[fs2s]);
FiTOq      fs2s, fdq    *128* r[fdq] := itof(32, 128, r[fs2s]);

FsTOi      fs2s, fds     *32* r[fds] := ftoi(32,  32, r[fs2s]);
FdTOi      fs2d, fds     *32* r[fds] := ftoi(64,  32, r[fs2d]);
FqTOi      fs2q, fds     *32* r[fds] := ftoi(128, 32, r[fs2q]);

FdTOs      fs2d,  fds    *32* r[fds] := fsize(64,  32, r[fs2d]);
FqTOs      fs2q,  fds    *32* r[fds] := fsize(128, 32, r[fs2q]);

FsTOd      fs2s, fdd     *64* r[fdd] := fsize(32,  64, r[fs2s]);
FqTOd      fs2q, fdd     *64* r[fdd] := fsize(128, 64, r[fs2q]);

FsTOq      fs2s, fdq    *128* r[fdq] := fsize(32, 128, r[fs2s]);
FdTOq      fs2d, fdq    *128* r[fdq] := fsize(64, 128, r[fs2d]);

#FCMPx
# Since we are only concerned with the result value being 0, >0 or <0
# NB these comparisons set the flag registers.  They do NOT result in a
# jump in themselves.

FCOMPS := { "FCMPs", "FCMPEs" };
FCOMPD := { "FCMPd", "FCMPEd" };
FCOMPQ := { "FCMPq", "FCMPEq" };

FCOMPS[idx] fs1s, fs2s       *32* r[tmpf] := r[fs1s] -f r[fs2s]
                                  SETFFLAGS(r[fs1s], r[fs2s]);
FCOMPD[idx] fs1d, fs2d       *64* r[tmpd] := r[fs1d] -f r[fs2d]
                                  SETFFLAGS(r[fs1d], r[fs2d]);
FCOMPQ[idx] fs1q, fs2q      *128* r[tmpD] := r[fs1q] -f r[fs2q]
                                  SETFFLAGS(r[fs1q], r[fs2q]);


#More generalised form based loosely on the 8086 architecture.  a
#different "variable" for each of the following conditions: Zero(%FZF),
#Greater than zero(%FG), Less than Zero(%FL).  The concept of orderedness
#has been removed but can still be accessed. If a result %FZF=0 and %FGF=0
#and %FLF=0 then it must be an unordered result.  Tables "borrowed" from
#integer arithmatic section and modified for floating point instructions.
# %FGF is 1 iff the fcc field of the FSR = 2
# %FLF is 1 iff the fcc field of the FSR = 1
# %FZF is 1 iff the fcc field of the FSR = 0
# operators exist and have been setup correctly as at 14/12/1998

COND2_C   := { "~%FZF", "%FZF", "%FGF", "(%FZF | %FLF)",
            "~(%FGF | %FLF)", "~(%FZF | %FGF)", "(%FGF | %FZF)",
            "%FLF", "(%FGF | %FLF)", "~(%FZF | %FLF)", "~%FGF",
            "~%FLF", "~(%FZF | %FGF | %FLF)", "(%FZF | %FGF | %FLF)" };
            
COND2     := { "1", "0", "~%FZF", "%FZF", "%FGF", "(%FZF | %FLF)",
            "~(%FGF | %FLF)", "~(%FZF | %FGF)", "(%FGF | %FZF)",
            "%FLF", "(%FGF | %FLF)", "~(%FZF | %FLF)", "~%FGF",
            "~%FLF", "~(%FZF | %FGF | %FLF)", "(%FZF | %FGF | %FLF)" };

JUMPS2_C  := { "FBNE", "FBE", "FBG", "FBLE", "FBUE",
            "FBUL", "FBGE", "FBL", "FBLG", "FBUG", "FBULE",
            "FBUGE", "FBU", "FBO" };
JUMPS2 := { "FBA", "FBN", JUMPS2_C };

JUMPS2[idx]  reloc 
	    *32* %pc := %npc
	    *32* %npc := [(COND2[idx] = 0) ? %npc+4 : reloc]
	    *1* %CTI := 1;

FBAA    reloc
            *32* %pc := reloc
            *32* %npc := reloc + 4
	    *1* %CTI := 1;

FBNA    reloc
            *32* %pc := %npc + 4
            *32* %npc := %npc + 8
	    *1* %CTI := 1;

JUMPS2_C[idx]"A"   reloc
            *32* %pc := [(COND2_C[idx] = 0) ? %npc+4 : %npc ]
            *32* %npc := [(COND2_C[idx] = 0) ? %npc+8 : reloc]
	    *1* %CTI := 1;

# Loading and storing Floating point registers.
LDFSR      eaddr       *32* %FSR := m[eaddr]{32};

LDF  eaddr, fds        *32* r[fds] := m[eaddr]{32};
LDDF eaddr, fdd        *64* r[fdd] := m[eaddr]{64};

# Store double instruction- the 1st reg. of double op. must be even
# the 2nd reg. of double op. must be the next reg. after 1st, hence odd
STFSR      eaddr       *32* m[eaddr] := %FSR;
STF   fds, eaddr       *32* m[eaddr] := r[fds];
STDF  fdd, eaddr       *64* m[eaddr] := r[fdd];

TRAPS := { "TA", "TN", "TNE", "TE", "TG", "TLE", "TGE", "TL",
           "TGU", "TLEU", "TCC", "TCS", "TPOS", "TNEG", "TVC", "TVS" };
COND3 := { "1", "0", "~%ZF", "%ZF", "~(%ZF | (%NF ^ %OF))",
           "%ZF | (%NF ^ %OF)", "~(%NF ^ %OF)", "%NF ^ %OF",
           "~(%CF | %ZF)", "%CF | %ZF", "~%CF", "%CF",
           "~%NF", "%NF", "~%OF", "%OF" };

TRAPS[idx]  eaddr
                TRAP((COND3[idx] = 1), eaddr+128);

#####################################################################
# These are the semantics for certain prologues and epilogues that we
# need to see for CSR analysis. We need the semantics for a logue to
# be specified when it uses and/or defines locations that relevant for
# CSR analysis involving the logue. For example, the callee epilogue
# "restore_copies_ret_val" on SPARC defines %o0 which is the location
# used for return values (as specified in sparc.csr).
#####################################################################

# This is the semantics for a ret/restore, with %o0 as the destination of
# the implicit add of the restore.
# Note: we don't want to re-use the more elaborate semantics of the
# call/restore (below), because this can clutter the output (.c) file with
# redundant moves, but more importantly it causes all the I registers to be
# use before define, and that forces 6 parameters for the enclosing procedure
RET_REG_VAL rs1, rs2         *32* %o0 := r[rs1] + r[rs2];
RET_IMM_VAL rs1, imm         *32* %o0 := r[rs1] + imm;

# A restore in the delay slot of a call. 
# The temp is needed because the sources are in the old register window, and
# and the destination is in the new window. Consider foo(1, 2) implemented as:
# mov 1, %i0
# mov 2, %o0                # Note: old window %o0
# call foo
# restore %g0, %o0, %o1     # This has been seen in real code!
# Note: the (possibly) redundant moves here will make it appear that the call
# uses all 6 register parameters, unless the live-ins are considered as well
DLY_RST_REG rs1, rs2, rd     *32* r[tmp1] := r[rs1] + r[rs2]
                              *32* %o0 := %i0
                              *32* %o1 := %i1
                              *32* %o2 := %i2
                              *32* %o3 := %i3
                              *32* %o4 := %i4
                              *32* %o5 := %i5
                              *32* r[rd] := r[tmp1];
# Same as above but for immediates
DLY_RST_IMM rs1, imm, rd     *32* r[tmp1] := r[rs1] + imm
                              *32* %o0 := %i0
                              *32* %o1 := %i1
                              *32* %o2 := %i2
                              *32* %o3 := %i3
                              *32* %o4 := %i4
                              *32* %o5 := %i5
                              *32* r[rd] := r[tmp1];

# Semantics for the standard return, i.e. ret/restore. The effect is to copy
# i0 to o0, so o0 is the real return location (for integers) for all types of
# procedures
STD_RET                      *32* %o0 := %i0;
