This is the EBNF(ish) description of the pattern declaration language:

pattern_decls ::=
	{ name_macros } pattern_decls

name_macros ::=
	"NAMES" name_macro *

name_macro ::=
	ident "=" num "."

type ::=
	  "CALLER_PROLOGUE"
	| "CALLEE_PROLOGUE"
	| "CALLEE_EPILOGUE"
	| "CALLER_PROLOGUE"

pattern_decls ::= 
	type ident ident * 'IS'  pattern

macro ::=
	"$" ident

opcode ::=
	ident

constructor_application ::=
	opcode "(" arguments ")"

wild ::=
	"?"

argument ::=
	  macro
	| num
	| ident
	| wild
	| constructor_application
	
arguments ::=
	  argument
	| arguments "," argument

simple_pattern ::=
	  constructor_application
	| "@" constructor_application

grouped_pattern ::=
	"[" pattern "]"

optional_pattern ::=
	"{" pattern "}"

multi_match_pattern ::=
	  grouped_pattern "*"
	| grouped_pattern "*" ident
	
pattern ::=
	  simple_pattern
	| "{" pattern "}"
	| "[" pattern "]"
	| multi_match_pattern
	| pattern ";" pattern
	| simple_pattern "|" simple_pattern
