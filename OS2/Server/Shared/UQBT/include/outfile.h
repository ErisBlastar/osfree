/*
 * Copyright (C) 1999-2000, The University of Queensland
 * Copyright (C) 2001, Sun Microsystems, Inc
 *
 * See the file "LICENSE.TERMS" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL
 * WARRANTIES.
 *
 */

/*==============================================================================
 * FILE:        outfile.h
 * OVERVIEW:    This file contains the definition of the OutputFile class.
 *				It manages the various assembler files resulting from running
 *				VPO (Very Portable Optimiser) over various .cex files, and
 *				handles assembling and linking them
 *
 * Copyright (C) 1999-2001, The University of Queensland, BT group
 * Copyright (C) 2001, Sun Microsystems, Inc
 *============================================================================*/

/* $Revision: 1.15 $
 *
 * 05 Sep 01 - Brian: Added emitVPOUtilFile() procedure that is called when
 *              using a VPO backend.
 */

#ifndef __OUTFILE_H_
#define __OUTFILE_H_

#include <string>
#include <list>
#include "global.h"				// For ADDRESS

/*
 * Define a struct for information about data sections
 */
typedef struct data_tag {
	string section;
	ADDRESS address;
	bool readonly;
} DATA_INFO;

typedef list<DATA_INFO> DATALIST;

class OutputFile {
public:
	/*
	 *	OutputFile: default constructor
	 */
			OutputFile();
	/*
	 *	addSource
	 *
	 *	name: name of source file to add to the list
	 *
	 *	The name will be added to a list, and if there are no errors, it
	 *	will eventually get assembled and linked into the final output file.
	 *	The name includes the extension, e.g. "prog1.c" or "data.rodata.s"
	 */
	void	addSource(const string& name);

	/*
	 *	addData
	 *
	 *	di: reference to a struct of information pertaining to a data section
	 *
	 *	This function should be called when a file named data.<section> has
	 *	been created with the raw binary contents of that data section.
	 */
	void	addData(const DATA_INFO& di);

	/*
	 *	link(bBlockMoveReqd, sizeBss, pBF)
	 *
	 *	Assemble and link the assembler files added so far.
	 *	exename is the name of the resultant executable file.
	 *	Actually, these days is just generates the make file to do all the
	 *	work
	 *   bBlockMoveReqd: true if a block move is required with this plan
	 *	 sizeBss: size of the bss section in bytes; if no .bss section, will
	 *		be zero
	 *	Returns true if successful.
	 */
	bool	link(bool bOneDataPlan, int bssSize);

    /*
     * genRuntimeHdr()
     *
     * Generates the _runtime.h header file. This file declares the map from
     * source addresses (currently only procedure entry points) to target
     * equivalents
     * Returns true on error
     */
    bool    genRuntimeHdr();

    /*
     * emitVPOUtilFile()
     *
     * Generates the _util.c source file that contains definitions
     * of swap routines needed by code generated by VPO backends.
     * The _util.c source file is not needed when using the low-level C
     * backend since the generated C files make inlined calls to the
     * swap routines declared in uqbt.h.
     */
    void    emitVPOUtilFile();

private:
	/*
	 * asmNames
	 *
	 *	List of assembler source file names, from AddSource(). Needed to
	 *	assemble them all, link them, and remove them for cleanup
	*/
	list<string>	srcNames;				// List of src filenames

	/*
	 * dataInfo
	 *
	 *	List of DATAINFO structs, which contain the section name, source
	 *	address, and whether readonly or not.
	 */
	DATALIST dataInfo;
};

#endif
