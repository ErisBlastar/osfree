#ifndef FLEX_HEADER_patternscanner_h
#define FLEX_HEADER_patternscanner_h
#define YY_PatternScanner_CHAR char
#line 1 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.h"
/* A lexical scanner header generated by flex */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */


/*********************************************/
/* SYSTEM dependent declaration, includes... */
/*********************************************/
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
#ifdef __cplusplus
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#else	/* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#else
#endif	/* __GNUC__ */
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#endif	/* __STDC__ */
#endif	/* ! __cplusplus */
/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif
#include <stdio.h>




/* % here is the declaration from section1 %header{  */ 
#line 11 "pal/patternscanner.l"
#define YY_PatternScanner_DEBUG  0
#line 12 "pal/patternscanner.l"
#define YY_PatternScanner_DEBUG_INIT  1
#line 16 "pal/patternscanner.l"
#include "patternparser.h"
#define MAX_LINE 1024   	// the longest pattern spec line
#line 25 "pal/patternscanner.l"
#define YY_PatternScanner_CONSTRUCTOR_PARAM  FILE* inFile, bool trace = false
#line 26 "pal/patternscanner.l"
#define YY_PatternScanner_CONSTRUCTOR_INIT  : theLine(1), traceLines(trace)
#line 27 "pal/patternscanner.l"
#define YY_PatternScanner_CONSTRUCTOR_CODE   yyin = inFile;
#line 28 "pal/patternscanner.l"
#define YY_PatternScanner_MEMBERS  \
public: \
	int theLine; 		/* the current line number */\
	char lineBuf[MAX_LINE];	/* the current line */ \
	bool traceLines;	/* echo each lines as it is scanned */
#line 34 "pal/patternscanner.l"
#define YY_PatternScanner_LEX_PARAM  YY_PatternParser_STYPE &yylval 
#line 36 "pal/patternscanner.l"
#line 52 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.h"



#ifndef YY_PatternScanner_TEXT
#define YY_PatternScanner_TEXT yytext
#endif
#ifndef YY_PatternScanner_LENG
#define YY_PatternScanner_LENG yyleng
#endif
#ifndef YY_PatternScanner_IN
#define YY_PatternScanner_IN yyin
#endif
#ifndef YY_PatternScanner_OUT
#define YY_PatternScanner_OUT yyout
#endif
#ifndef YY_PatternScanner_LEX_RETURN
#define YY_PatternScanner_LEX_RETURN int
#else
#ifndef YY_PatternScanner_LEX_DEFINED
#define YY_PatternScanner_LEX_DEFINED 
#endif
#endif

#ifndef YY_PatternScanner_LEX
#define YY_PatternScanner_LEX yylex
#else
#ifndef YY_PatternScanner_LEX_DEFINED
#define YY_PatternScanner_LEX_DEFINED 
#endif
#endif

#ifndef YY_PatternScanner_LEX_PARAM
#ifndef YY_USE_PROTOS
#define YY_PatternScanner_LEX_PARAM 
#else
#define YY_PatternScanner_LEX_PARAM void
#endif
#else
#ifndef YY_PatternScanner_LEX_DEFINED
#define YY_PatternScanner_LEX_DEFINED 
#endif
#endif

#ifndef YY_PatternScanner_LEX_PARAM_DEF
#define YY_PatternScanner_LEX_PARAM_DEF
#else
#ifndef YY_PatternScanner_LEX_DEFINED
#define YY_PatternScanner_LEX_DEFINED 
#endif
#endif

#ifndef YY_PatternScanner_RESTART
#define YY_PatternScanner_RESTART yyrestart
#endif
#ifndef YY_PatternScanner_SWITCH_TO_BUFFER
#define YY_PatternScanner_SWITCH_TO_BUFFER yy_switch_to_buffer
#endif
#ifndef YY_PatternScanner_LOAD_BUFFER_STATE
#define YY_PatternScanner_LOAD_BUFFER_STATE yy_load_buffer_state
#endif

#ifndef YY_PatternScanner_CREATE_BUFFER
#define YY_PatternScanner_CREATE_BUFFER yy_create_buffer
#ifndef YY_USE_CLASS
#ifndef yy_new_buffer
#define yy_new_buffer yy_create_buffer
#endif
#endif
#endif
#ifndef YY_PatternScanner_DELETE_BUFFER
#define YY_PatternScanner_DELETE_BUFFER yy_delete_buffer
#endif
#ifndef YY_PatternScanner_INIT_BUFFER
#define YY_PatternScanner_INIT_BUFFER yy_init_buffer
#endif
#ifdef YY_PatternScanner_FLEX_DEBUG
#ifndef YY_PatternScanner_DEBUG
#define YY_PatternScanner_DEBUG 1
#endif
#else
#ifndef YY_PatternScanner_DEBUG
#define YY_PatternScanner_DEBUG 0
#endif
#endif

#if YY_PatternScanner_DEBUG != 0
#ifndef YY_PatternScanner_DEBUG_FLAG
#define YY_PatternScanner_DEBUG_FLAG yy_flex_debug
#endif
#ifndef YY_PatternScanner_DEBUG_INIT
#define YY_PatternScanner_DEBUG_INIT 1
#endif
#endif




#ifndef YY_USE_CLASS
typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern void YY_PatternScanner_RESTART YY_PROTO(( FILE *input_file ));
extern void YY_PatternScanner_SWITCH_TO_BUFFER YY_PROTO(( YY_BUFFER_STATE new_buffer ));
extern void YY_PatternScanner_LOAD_BUFFER_STATE YY_PROTO(( void ));
extern YY_BUFFER_STATE YY_PatternScanner_CREATE_BUFFER YY_PROTO(( FILE *file, int size ));
extern void YY_PatternScanner_DELETE_BUFFER YY_PROTO(( YY_BUFFER_STATE b ));
extern void YY_PatternScanner_INIT_BUFFER YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#if YY_PatternScanner_DEBUG != 0
extern int YY_PatternScanner_DEBUG_FLAG ;
#endif
extern YY_PatternScanner_CHAR  *YY_PatternScanner_TEXT;
extern int YY_PatternScanner_LENG;
extern FILE *YY_PatternScanner_IN, *YY_PatternScanner_OUT;
#ifdef YY_PatternScanner_LEX_DEFINED
extern YY_PatternScanner_LEX_RETURN YY_PatternScanner_LEX ( YY_PatternScanner_LEX_PARAM )
YY_PatternScanner_LEX_PARAM_DEF
#else
#ifndef YY_DECL
extern YY_PatternScanner_LEX_RETURN YY_PatternScanner_LEX ( YY_PatternScanner_LEX_PARAM )
YY_PatternScanner_LEX_PARAM_DEF
#else
/* no declaration if oldstyle flex */
#endif
#endif
#else

#ifndef YY_PatternScanner_CLASS
#define YY_PatternScanner_CLASS PatternScanner
#endif
#ifndef YY_PatternScanner_ECHO
#define YY_PatternScanner_ECHO yy_echo
#endif
#ifdef YY_PatternScanner_ECHO_PURE
#define YY_PatternScanner_ECHO_NOCODE
#endif
#ifndef YY_PatternScanner_ECHO_CODE
#define YY_PatternScanner_ECHO_CODE fwrite( (char *) YY_PatternScanner_TEXT, YY_PatternScanner_LENG, 1, YY_PatternScanner_OUT );
#endif
#ifndef YY_PatternScanner_INPUT
#define YY_PatternScanner_INPUT yy_input
#endif
#ifdef YY_PatternScanner_INPUT_PURE
#define YY_PatternScanner_INPUT_NOCODE
#endif
#ifndef YY_PatternScanner_INPUT_CODE
#define YY_PatternScanner_INPUT_CODE return result= fread(  buffer, 1,max_size,YY_PatternScanner_IN );
#endif
#ifdef YY_PatternScanner_FATAL_ERROR_PURE
#define YY_PatternScanner_FATAL_ERRO_NOCODE
#endif
#ifndef YY_PatternScanner_FATAL_ERROR
#define YY_PatternScanner_FATAL_ERROR yy_fatal_error
#endif
#ifndef YY_PatternScanner_FATAL_ERROR_CODE
#define YY_PatternScanner_FATAL_ERROR_CODE fputs( msg, stderr );putc( '\n', stderr );exit( 1 );
#endif
#ifndef YY_PatternScanner_WRAP
#define YY_PatternScanner_WRAP yy_wrap
#endif
#ifdef YY_PatternScanner_WRAP_PURE
#define YY_PatternScanner_WRAP_NOCODE
#endif
#ifndef YY_PatternScanner_WRAP_CODE
#define YY_PatternScanner_WRAP_CODE return 1;
#endif


#ifndef YY_PatternScanner_INHERIT
#define YY_PatternScanner_INHERIT
#endif
#ifndef YY_PatternScanner_MEMBERS
#define YY_PatternScanner_MEMBERS 
#endif
#ifndef YY_PatternScanner_CONSTRUCTOR_PARAM
#define YY_PatternScanner_CONSTRUCTOR_PARAM
#endif
#ifndef YY_PatternScanner_CONSTRUCTOR_CODE
#define YY_PatternScanner_CONSTRUCTOR_CODE
#endif
#ifndef YY_PatternScanner_CONSTRUCTOR_INIT
#define YY_PatternScanner_CONSTRUCTOR_INIT
#endif
typedef struct yy_buffer_state *YY_BUFFER_STATE;

class YY_PatternScanner_CLASS YY_PatternScanner_INHERIT
{
 private:/* data */
 YY_PatternScanner_CHAR  *yy_c_buf_p;
 YY_PatternScanner_CHAR  yy_hold_char;
 int yy_n_chars;
 int yy_init;
 int yy_start;
 int yy_did_buffer_switch_on_eof;
 private: /* functions */
 void yy_initialize();
 int input();
 int yyinput() {return input();};
 int yy_get_next_buffer();
 void yyunput( YY_PatternScanner_CHAR  c, YY_PatternScanner_CHAR  *buf_ptr );
 /* use long instead of yy_state_type because it is undef */
 long yy_get_previous_state_ ( void );
 long yy_try_NUL_trans_  ( long current_state_ );
 protected:/* non virtual */
 YY_BUFFER_STATE yy_current_buffer;
 void YY_PatternScanner_RESTART ( FILE *input_file );
 void YY_PatternScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer );
 void YY_PatternScanner_LOAD_BUFFER_STATE( void );
 YY_BUFFER_STATE YY_PatternScanner_CREATE_BUFFER( FILE *file, int size );
 void YY_PatternScanner_DELETE_BUFFER( YY_BUFFER_STATE b );
 void YY_PatternScanner_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file );
 protected: /* virtual */
 virtual void YY_PatternScanner_ECHO()
#ifdef YY_PatternScanner_ECHO_PURE
  =0
#endif
  ;
 virtual int  YY_PatternScanner_INPUT(char  *buf,int &result,int max_size)
#ifdef YY_PatternScanner_INPUT_PURE
  =0
#endif
  ;
 virtual void  YY_PatternScanner_FATAL_ERROR(char *msg)
#ifdef YY_PatternScanner_FATAL_ERROR_PURE
  =0
#endif
  ;
 virtual int  YY_PatternScanner_WRAP()
#ifdef YY_PatternScanner_WRAP_PURE
  =0
#endif
  ;
 public:
 YY_PatternScanner_CHAR  *YY_PatternScanner_TEXT;
 int YY_PatternScanner_LENG;
 FILE *YY_PatternScanner_IN, *YY_PatternScanner_OUT;
 YY_PatternScanner_LEX_RETURN YY_PatternScanner_LEX ( YY_PatternScanner_LEX_PARAM);
 YY_PatternScanner_CLASS(YY_PatternScanner_CONSTRUCTOR_PARAM) ;
#if YY_PatternScanner_DEBUG != 0
 int YY_PatternScanner_DEBUG_FLAG;
#endif
 public: /* added members */
 YY_PatternScanner_MEMBERS 
};
#endif



/* declaration of externs for public use of yylex scanner */

/* % here is the declaration from section2 %header{ */ 
#line 101 "pal/patternscanner.l"
#endif
#line 302 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.h"

/* end of generated header */
