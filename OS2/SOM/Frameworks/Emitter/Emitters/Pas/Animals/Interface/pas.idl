/* @(#) somc/gen_idl.efw 2.5 9/1/94 19:27:23 [7/30/96 14:44:56] */

/*
 *   COMPONENT_NAME: some
 *
 *   ORIGINS: 27
 *
 *
 *   10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *   All Rights Reserved
 *   Licensed Materials - Property of IBM
 *   US Government Users Restricted Rights - Use, duplication or
 *   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */


/*
 *         File:    Pascal.idl
 *       Author:    SOMObjects Emitter Framework
 *     Contents:    Generic framework logic class for Pascal.
 *         Date:    Tue Sep 21 20:16:43 2004.
 */

#ifndef PascalEmitter_idl
#define PascalEmitter_idl

#include <scemit.idl>

interface PascalEmitter : SOMTEmitC
{
#ifdef __SOMIDL__
  const long dtTypedef	  = 0x0001;
  const long dtStruct	  = 0x0002;
  const long dtUnion	  = 0x0003;
  const long dtSequence	  = 0x0004;
  const long dtPTypedef	  = 0x0005;
  const long dtEnum	  = 0x0006;
  const long dtClass	  = 0x0007;
  const long dtTypeMask   =   0x000F;
  const long dtFunction   = 0x0010;
  const long dtProcedure  = 0x0020;
  const long dtMethodMask =   0x00F0;
  const long dtConst	  = 0x0100;
  const long dtAttrib	  = 0x0200;

  struct struct_LinkItem
  {
    SOMTEntryC		Obj;
    char		*FieldName;
    long		PtrDeep;
    long		ArrayDim;
    long		ArrayLen[32];
    void		*TypeItem; // PTYPEITEM

    long		MethodParamClassFl;
    char		*MethodParamClassName;
  };
  typedef struct_LinkItem LINKITEM;
  typedef struct_LinkItem *PLINKITEM;

  struct struct_TypeItem
  {
    long		DefType;
    SOMTEntryC		Obj;
    long		PtrFlag;
    char		*Name;
    char		*Comment;
    long		BindCount;
    sequence<PLINKITEM>	LinkItems;
  };
  typedef struct_TypeItem TYPEITEM;
  typedef struct_TypeItem *PTYPEITEM;

  void somtGetTypedef(in SOMTTypedefEntryC td);
  // Сбор объявлений типов.

  void somtGetStruct(in SOMTStructEntryC struc);
  // Сбор объявлений структур.

  void somtGetUnion(in SOMTUnionEntryC un);
  // Сбор объявлений объединений.

  void somtGetMethodParamTypes(in SOMTMethodEntryC me);
  // Сбор параметров функций.

  void somtGetAttribute(in SOMTAttributeEntryC att);
  // Сбор атрибутов класса.

  void somtGetConstant(in SOMTConstEntryC con);
  // Сбор типов констант.

  void somtGetEnum(in SOMTEnumEntryC en);
  // Сбор перечислений.

  void somtEmitNULLFn(in SOMTEntryC entry);
  // "заглушка".

  void somtEmitMethodImplementationProlog();
  // Реализация методов класса (секция паскаля 'implementation')

  void somtEmitMethodImplementation(in SOMTMethodEntryC entry);
  // Реализация метода класса

  implementation {
    releaseorder: somtGetTypedef, somtGetStruct, somtGetUnion, somtGetSequence,
                  somtGetMethodParamTypes, somtGetAttribute, somtGetConstant,
                  somtGetEnum, somtEmitMethodImplementationProlog,
                  somtEmitMethodImplementation, somtEmitNULLFn;

    //# Class Modifiers
    callstyle = oidl;

    sequence<PTYPEITEM> TypeItems;
    // список объектов-носителей типов
    unsigned long CurrentPasSection;
    // текущая выводимая секция паскаля
    char *buf;
    // буфер для различных промежуточных данных
    long bufLength;
    // размер буфера для различных промежуточных данных

    //# Method Modifiers
    somtGenerateSections: override;
    // Управление последовательностью секций
    somtEmitMethod: override;
    // Эмитер метода.
    somtEmitAttribute: override;
    // Эмитер атрибута.
    somtEmitInterface: override;
    // Эмитер интерфейса
    somtEmitConstant: override;
    // Эмитер определения констант.
    somtEmitEnum: override;
    // Эмитер определения значений перечислений.
    somtEmitClass: override;
    // Эмитер класса
  };
#endif /* __SOMIDL__ */
};

#endif  /* PascalEmitter_idl */
