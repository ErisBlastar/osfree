
/*
 * This file was generated by the SOM Compiler.
 * FileName: pas.ih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitih: 2.47
 */

/*
 *         File:    Pascal.idl
 *       Author:    SOMObjects Emitter Framework
 *     Contents:    Generic framework logic class for Pascal.
 *         Date:    Tue Sep 21 20:16:43 2004.
 */


/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_PascalEmitter_ih
#define SOM_PascalEmitter_ih

#pragma checkout(suspend)

#include <pas.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass PascalEmitterCClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define PascalEmitter_MaxNoMethods 10

/*
 * -- Instance data
 */
typedef struct {
	_IDL_SEQUENCE_PascalEmitter_PTYPEITEM TypeItems;
        /*
         *  список объектов-носителей типов
         */
	unsigned long CurrentPasSection;
        /*
         *  текущая выводимая секция паскаля
         */
	char* buf;
        /*
         *  буфер для различных промежуточных данных
         */
	long bufLength;
        /*
         *  размер буфера для различных промежуточных данных
         */
} PascalEmitterData;

/*
 * GetData macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef PascalEmitterData* SOMLINK somTP_PascalEmitter_DataThunk(void*);
#ifdef __IBMC__
#pragma linkage(somTP_PascalEmitter_DataThunk, system)
#endif
typedef somTP_PascalEmitter_DataThunk *somTD_PascalEmitter_DataThunk;

#define PascalEmitterGetData(somSelf) \
   (((somTD_PascalEmitter_DataThunk)(PascalEmitterCClassData.instanceDataToken))(somSelf))

/*
 * Instance variable and staticdata access macros
 */
#ifndef NO_VARIABLE_MACROS
#define _TypeItems (somThis->TypeItems)
#define _CurrentPasSection (somThis->CurrentPasSection)
#define _buf (somThis->buf)
#define _bufLength (somThis->bufLength)
#endif

/*
 * Primary Implementation File Support
 */
#if (defined(PascalEmitter_Class_Source) || defined(SOM_Module_pas_Source))

/*
 * Trace/Debug macro
 */
#ifndef PascalEmitterMethodDebug
   #define PascalEmitterMethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* PascalEmitterMethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_PascalEmitterCClassData.parentMtab
#undef SOMInstance
#define SOMInstance PascalEmitterCClassData.parentMtab

#ifndef M_PascalEmitter_Class_Source
   #define M_PascalEmitter_Class_Source
#endif    /* M_PascalEmitter_Class_Source */

/*
 * Overridden method: somtGenerateSections
 */
#pragma linkage(somtGenerateSections, system)
SOM_Scope boolean  SOMLINK somtGenerateSections(PascalEmitter *somSelf);
static char *somMN_PascalEmittersomtGenerateSections = "SOMTEmitC::somtGenerateSections";
static somId somId_PascalEmittersomtGenerateSections = &somMN_PascalEmittersomtGenerateSections;
#ifdef somId_somtGenerateSections
#undef somId_somtGenerateSections
#else
#define somId_somtGenerateSections somId_PascalEmittersomtGenerateSections
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtGenerateSections_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtGenerateSections(somSelf) \
  ((( somTD_SOMTEmitC_somtGenerateSections ) \
    PascalEmitter_parent_SOMTEmitC_somtGenerateSections_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_SOMTEmitC_somtGenerateSections
  #ifdef parent_SOMTEmitC_somtGenerateSections
     #undef parent_SOMTEmitC_somtGenerateSections
     #define SOMGD_pmc_SOMTEmitC_somtGenerateSections 1
  #else
     #define parent_SOMTEmitC_somtGenerateSections PascalEmitter_parent_SOMTEmitC_somtGenerateSections
  #endif /* parent_SOMTEmitC_somtGenerateSections */
#endif /* SOMGD_pmc_SOMTEmitC_somtGenerateSections */
#ifndef parent_somtGenerateSections
     #define parent_somtGenerateSections PascalEmitter_parent_SOMTEmitC_somtGenerateSections
#endif  /* parent_somtGenerateSections */
#define PascalEmitter_parents_somtGenerateSections(somSelf) (\
   PascalEmitter_parent_SOMTEmitC_somtGenerateSections(somSelf))

/*
 * Overridden method: somtEmitMethod
 */
#pragma linkage(somtEmitMethod, system)
SOM_Scope void  SOMLINK somtEmitMethod(PascalEmitter *somSelf,
		SOMTMethodEntryC* entry);
static char *somMN_PascalEmittersomtEmitMethod = "SOMTEmitC::somtEmitMethod";
static somId somId_PascalEmittersomtEmitMethod = &somMN_PascalEmittersomtEmitMethod;
#ifdef somId_somtEmitMethod
#undef somId_somtEmitMethod
#else
#define somId_somtEmitMethod somId_PascalEmittersomtEmitMethod
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitMethod_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitMethod(somSelf,entry) \
  ((( somTD_SOMTEmitC_somtEmitMethod ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitMethod_resolved) \
	 (somSelf,entry))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitMethod
  #ifdef parent_SOMTEmitC_somtEmitMethod
     #undef parent_SOMTEmitC_somtEmitMethod
     #define SOMGD_pmc_SOMTEmitC_somtEmitMethod 1
  #else
     #define parent_SOMTEmitC_somtEmitMethod PascalEmitter_parent_SOMTEmitC_somtEmitMethod
  #endif /* parent_SOMTEmitC_somtEmitMethod */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitMethod */
#ifndef parent_somtEmitMethod
     #define parent_somtEmitMethod PascalEmitter_parent_SOMTEmitC_somtEmitMethod
#endif  /* parent_somtEmitMethod */
#define PascalEmitter_parents_somtEmitMethod(somSelf,entry) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitMethod(somSelf,entry))

/*
 * Overridden method: somtEmitAttribute
 */
#pragma linkage(somtEmitAttribute, system)
SOM_Scope void  SOMLINK somtEmitAttribute(PascalEmitter *somSelf,
		SOMTAttributeEntryC* att);
static char *somMN_PascalEmittersomtEmitAttribute = "SOMTEmitC::somtEmitAttribute";
static somId somId_PascalEmittersomtEmitAttribute = &somMN_PascalEmittersomtEmitAttribute;
#ifdef somId_somtEmitAttribute
#undef somId_somtEmitAttribute
#else
#define somId_somtEmitAttribute somId_PascalEmittersomtEmitAttribute
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitAttribute_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitAttribute(somSelf,att) \
  ((( somTD_SOMTEmitC_somtEmitAttribute ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitAttribute_resolved) \
	 (somSelf,att))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitAttribute
  #ifdef parent_SOMTEmitC_somtEmitAttribute
     #undef parent_SOMTEmitC_somtEmitAttribute
     #define SOMGD_pmc_SOMTEmitC_somtEmitAttribute 1
  #else
     #define parent_SOMTEmitC_somtEmitAttribute PascalEmitter_parent_SOMTEmitC_somtEmitAttribute
  #endif /* parent_SOMTEmitC_somtEmitAttribute */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitAttribute */
#ifndef parent_somtEmitAttribute
     #define parent_somtEmitAttribute PascalEmitter_parent_SOMTEmitC_somtEmitAttribute
#endif  /* parent_somtEmitAttribute */
#define PascalEmitter_parents_somtEmitAttribute(somSelf,att) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitAttribute(somSelf,att))

/*
 * Overridden method: somtEmitInterface
 */
#pragma linkage(somtEmitInterface, system)
SOM_Scope void  SOMLINK somtEmitInterface(PascalEmitter *somSelf,
		SOMTClassEntryC* intfc);
static char *somMN_PascalEmittersomtEmitInterface = "SOMTEmitC::somtEmitInterface";
static somId somId_PascalEmittersomtEmitInterface = &somMN_PascalEmittersomtEmitInterface;
#ifdef somId_somtEmitInterface
#undef somId_somtEmitInterface
#else
#define somId_somtEmitInterface somId_PascalEmittersomtEmitInterface
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitInterface_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitInterface(somSelf,intfc) \
  ((( somTD_SOMTEmitC_somtEmitInterface ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitInterface_resolved) \
	 (somSelf,intfc))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitInterface
  #ifdef parent_SOMTEmitC_somtEmitInterface
     #undef parent_SOMTEmitC_somtEmitInterface
     #define SOMGD_pmc_SOMTEmitC_somtEmitInterface 1
  #else
     #define parent_SOMTEmitC_somtEmitInterface PascalEmitter_parent_SOMTEmitC_somtEmitInterface
  #endif /* parent_SOMTEmitC_somtEmitInterface */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitInterface */
#ifndef parent_somtEmitInterface
     #define parent_somtEmitInterface PascalEmitter_parent_SOMTEmitC_somtEmitInterface
#endif  /* parent_somtEmitInterface */
#define PascalEmitter_parents_somtEmitInterface(somSelf,intfc) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitInterface(somSelf,intfc))

/*
 * Overridden method: somtEmitConstant
 */
#pragma linkage(somtEmitConstant, system)
SOM_Scope void  SOMLINK somtEmitConstant(PascalEmitter *somSelf,
		SOMTConstEntryC* con);
static char *somMN_PascalEmittersomtEmitConstant = "SOMTEmitC::somtEmitConstant";
static somId somId_PascalEmittersomtEmitConstant = &somMN_PascalEmittersomtEmitConstant;
#ifdef somId_somtEmitConstant
#undef somId_somtEmitConstant
#else
#define somId_somtEmitConstant somId_PascalEmittersomtEmitConstant
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitConstant_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitConstant(somSelf,con) \
  ((( somTD_SOMTEmitC_somtEmitConstant ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitConstant_resolved) \
	 (somSelf,con))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitConstant
  #ifdef parent_SOMTEmitC_somtEmitConstant
     #undef parent_SOMTEmitC_somtEmitConstant
     #define SOMGD_pmc_SOMTEmitC_somtEmitConstant 1
  #else
     #define parent_SOMTEmitC_somtEmitConstant PascalEmitter_parent_SOMTEmitC_somtEmitConstant
  #endif /* parent_SOMTEmitC_somtEmitConstant */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitConstant */
#ifndef parent_somtEmitConstant
     #define parent_somtEmitConstant PascalEmitter_parent_SOMTEmitC_somtEmitConstant
#endif  /* parent_somtEmitConstant */
#define PascalEmitter_parents_somtEmitConstant(somSelf,con) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitConstant(somSelf,con))

/*
 * Overridden method: somtEmitEnum
 */
#pragma linkage(somtEmitEnum, system)
SOM_Scope void  SOMLINK somtEmitEnum(PascalEmitter *somSelf,
		SOMTEnumEntryC* en);
static char *somMN_PascalEmittersomtEmitEnum = "SOMTEmitC::somtEmitEnum";
static somId somId_PascalEmittersomtEmitEnum = &somMN_PascalEmittersomtEmitEnum;
#ifdef somId_somtEmitEnum
#undef somId_somtEmitEnum
#else
#define somId_somtEmitEnum somId_PascalEmittersomtEmitEnum
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitEnum_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitEnum(somSelf,en) \
  ((( somTD_SOMTEmitC_somtEmitEnum ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitEnum_resolved) \
	 (somSelf,en))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitEnum
  #ifdef parent_SOMTEmitC_somtEmitEnum
     #undef parent_SOMTEmitC_somtEmitEnum
     #define SOMGD_pmc_SOMTEmitC_somtEmitEnum 1
  #else
     #define parent_SOMTEmitC_somtEmitEnum PascalEmitter_parent_SOMTEmitC_somtEmitEnum
  #endif /* parent_SOMTEmitC_somtEmitEnum */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitEnum */
#ifndef parent_somtEmitEnum
     #define parent_somtEmitEnum PascalEmitter_parent_SOMTEmitC_somtEmitEnum
#endif  /* parent_somtEmitEnum */
#define PascalEmitter_parents_somtEmitEnum(somSelf,en) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitEnum(somSelf,en))

/*
 * Overridden method: somtEmitClass
 */
#pragma linkage(somtEmitClass, system)
SOM_Scope void  SOMLINK somtEmitClass(PascalEmitter *somSelf);
static char *somMN_PascalEmittersomtEmitClass = "SOMTEmitC::somtEmitClass";
static somId somId_PascalEmittersomtEmitClass = &somMN_PascalEmittersomtEmitClass;
#ifdef somId_somtEmitClass
#undef somId_somtEmitClass
#else
#define somId_somtEmitClass somId_PascalEmittersomtEmitClass
#endif
static somMethodProc* PascalEmitter_parent_SOMTEmitC_somtEmitClass_resolved;
#define PascalEmitter_parent_SOMTEmitC_somtEmitClass(somSelf) \
  ((( somTD_SOMTEmitC_somtEmitClass ) \
    PascalEmitter_parent_SOMTEmitC_somtEmitClass_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_SOMTEmitC_somtEmitClass
  #ifdef parent_SOMTEmitC_somtEmitClass
     #undef parent_SOMTEmitC_somtEmitClass
     #define SOMGD_pmc_SOMTEmitC_somtEmitClass 1
  #else
     #define parent_SOMTEmitC_somtEmitClass PascalEmitter_parent_SOMTEmitC_somtEmitClass
  #endif /* parent_SOMTEmitC_somtEmitClass */
#endif /* SOMGD_pmc_SOMTEmitC_somtEmitClass */
#ifndef parent_somtEmitClass
     #define parent_somtEmitClass PascalEmitter_parent_SOMTEmitC_somtEmitClass
#endif  /* parent_somtEmitClass */
#define PascalEmitter_parents_somtEmitClass(somSelf) (\
   PascalEmitter_parent_SOMTEmitC_somtEmitClass(somSelf))

/*
 * Initialize the class data structure
 */
SOMEXTERN struct PascalEmitterClassDataStructure SOMDLINK PascalEmitterClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct PascalEmitterCClassDataStructure SOMDLINK PascalEmitterCClassData = {(somMethodTabs) NULL};

/*
 * New Method: somtGetTypedef
 */
#pragma linkage(somtGetTypedef, system)
SOM_Scope void  SOMLINK somtGetTypedef(PascalEmitter *somSelf,
		SOMTTypedefEntryC* td);
/*
 *  Сбор объявлений типов.
 */
#ifndef somMN_somtGetTypedef_defined
#define somMN_somtGetTypedef_defined
static char *somMN_somtGetTypedef = "somtGetTypedef";
static somId somId_somtGetTypedef = &somMN_somtGetTypedef;
#endif  /* somMN_somtGetTypedef_defined */
#ifndef somDS_somtGetTypedef_defined
#define somDS_somtGetTypedef_defined
static char *somDS_somtGetTypedef = "::PascalEmitter::somtGetTypedef";
static somId somDI_somtGetTypedef = &somDS_somtGetTypedef;
#endif  /* somDS_somtGetTypedef_defined */
#define somtGetTypedef_somApRdDefault

/*
 * New Method: somtGetStruct
 */
#pragma linkage(somtGetStruct, system)
SOM_Scope void  SOMLINK somtGetStruct(PascalEmitter *somSelf,
		SOMTStructEntryC* struc);
/*
 *  Сбор объявлений структур.
 */
#ifndef somMN_somtGetStruct_defined
#define somMN_somtGetStruct_defined
static char *somMN_somtGetStruct = "somtGetStruct";
static somId somId_somtGetStruct = &somMN_somtGetStruct;
#endif  /* somMN_somtGetStruct_defined */
#ifndef somDS_somtGetStruct_defined
#define somDS_somtGetStruct_defined
static char *somDS_somtGetStruct = "::PascalEmitter::somtGetStruct";
static somId somDI_somtGetStruct = &somDS_somtGetStruct;
#endif  /* somDS_somtGetStruct_defined */
#define somtGetStruct_somApRdDefault

/*
 * New Method: somtGetUnion
 */
#pragma linkage(somtGetUnion, system)
SOM_Scope void  SOMLINK somtGetUnion(PascalEmitter *somSelf,
		SOMTUnionEntryC* un);
/*
 *  Сбор объявлений объединений.
 */
#ifndef somMN_somtGetUnion_defined
#define somMN_somtGetUnion_defined
static char *somMN_somtGetUnion = "somtGetUnion";
static somId somId_somtGetUnion = &somMN_somtGetUnion;
#endif  /* somMN_somtGetUnion_defined */
#ifndef somDS_somtGetUnion_defined
#define somDS_somtGetUnion_defined
static char *somDS_somtGetUnion = "::PascalEmitter::somtGetUnion";
static somId somDI_somtGetUnion = &somDS_somtGetUnion;
#endif  /* somDS_somtGetUnion_defined */
#define somtGetUnion_somApRdDefault

/*
 * New Method: somtGetMethodParamTypes
 */
#pragma linkage(somtGetMethodParamTypes, system)
SOM_Scope void  SOMLINK somtGetMethodParamTypes(PascalEmitter *somSelf,
		SOMTMethodEntryC* me);
/*
 *  Сбор параметров функций.
 */
#ifndef somMN_somtGetMethodParamTypes_defined
#define somMN_somtGetMethodParamTypes_defined
static char *somMN_somtGetMethodParamTypes = "somtGetMethodParamTypes";
static somId somId_somtGetMethodParamTypes = &somMN_somtGetMethodParamTypes;
#endif  /* somMN_somtGetMethodParamTypes_defined */
#ifndef somDS_somtGetMethodParamTypes_defined
#define somDS_somtGetMethodParamTypes_defined
static char *somDS_somtGetMethodParamTypes = "::PascalEmitter::somtGetMethodParamTypes";
static somId somDI_somtGetMethodParamTypes = &somDS_somtGetMethodParamTypes;
#endif  /* somDS_somtGetMethodParamTypes_defined */
#define somtGetMethodParamTypes_somApRdDefault

/*
 * New Method: somtGetAttribute
 */
#pragma linkage(somtGetAttribute, system)
SOM_Scope void  SOMLINK somtGetAttribute(PascalEmitter *somSelf,
		SOMTAttributeEntryC* att);
/*
 *  Сбор атрибутов класса.
 */
#ifndef somMN_somtGetAttribute_defined
#define somMN_somtGetAttribute_defined
static char *somMN_somtGetAttribute = "somtGetAttribute";
static somId somId_somtGetAttribute = &somMN_somtGetAttribute;
#endif  /* somMN_somtGetAttribute_defined */
#ifndef somDS_somtGetAttribute_defined
#define somDS_somtGetAttribute_defined
static char *somDS_somtGetAttribute = "::PascalEmitter::somtGetAttribute";
static somId somDI_somtGetAttribute = &somDS_somtGetAttribute;
#endif  /* somDS_somtGetAttribute_defined */
#define somtGetAttribute_somApRdDefault

/*
 * New Method: somtGetConstant
 */
#pragma linkage(somtGetConstant, system)
SOM_Scope void  SOMLINK somtGetConstant(PascalEmitter *somSelf,
		SOMTConstEntryC* con);
/*
 *  Сбор типов констант.
 */
#ifndef somMN_somtGetConstant_defined
#define somMN_somtGetConstant_defined
static char *somMN_somtGetConstant = "somtGetConstant";
static somId somId_somtGetConstant = &somMN_somtGetConstant;
#endif  /* somMN_somtGetConstant_defined */
#ifndef somDS_somtGetConstant_defined
#define somDS_somtGetConstant_defined
static char *somDS_somtGetConstant = "::PascalEmitter::somtGetConstant";
static somId somDI_somtGetConstant = &somDS_somtGetConstant;
#endif  /* somDS_somtGetConstant_defined */
#define somtGetConstant_somApRdDefault

/*
 * New Method: somtGetEnum
 */
#pragma linkage(somtGetEnum, system)
SOM_Scope void  SOMLINK somtGetEnum(PascalEmitter *somSelf,
		SOMTEnumEntryC* en);
/*
 *  Сбор перечислений.
 */
#ifndef somMN_somtGetEnum_defined
#define somMN_somtGetEnum_defined
static char *somMN_somtGetEnum = "somtGetEnum";
static somId somId_somtGetEnum = &somMN_somtGetEnum;
#endif  /* somMN_somtGetEnum_defined */
#ifndef somDS_somtGetEnum_defined
#define somDS_somtGetEnum_defined
static char *somDS_somtGetEnum = "::PascalEmitter::somtGetEnum";
static somId somDI_somtGetEnum = &somDS_somtGetEnum;
#endif  /* somDS_somtGetEnum_defined */
#define somtGetEnum_somApRdDefault

/*
 * New Method: somtEmitNULLFn
 */
#pragma linkage(somtEmitNULLFn, system)
SOM_Scope void  SOMLINK somtEmitNULLFn(PascalEmitter *somSelf,
		SOMTEntryC* entry);
/*
 *  "заглушка".
 */
#ifndef somMN_somtEmitNULLFn_defined
#define somMN_somtEmitNULLFn_defined
static char *somMN_somtEmitNULLFn = "somtEmitNULLFn";
static somId somId_somtEmitNULLFn = &somMN_somtEmitNULLFn;
#endif  /* somMN_somtEmitNULLFn_defined */
#ifndef somDS_somtEmitNULLFn_defined
#define somDS_somtEmitNULLFn_defined
static char *somDS_somtEmitNULLFn = "::PascalEmitter::somtEmitNULLFn";
static somId somDI_somtEmitNULLFn = &somDS_somtEmitNULLFn;
#endif  /* somDS_somtEmitNULLFn_defined */
#define somtEmitNULLFn_somApRdDefault

/*
 * New Method: somtEmitMethodImplementationProlog
 */
#pragma linkage(somtEmitMethodImplementationProlog, system)
SOM_Scope void  SOMLINK somtEmitMethodImplementationProlog(PascalEmitter *somSelf);
/*
 *  Реализация методов класса (секция паскаля 'implementation')
 */
#ifndef somMN_somtEmitMethodImplementationProlog_defined
#define somMN_somtEmitMethodImplementationProlog_defined
static char *somMN_somtEmitMethodImplementationProlog = "somtEmitMethodImplementationProlog";
static somId somId_somtEmitMethodImplementationProlog = &somMN_somtEmitMethodImplementationProlog;
#endif  /* somMN_somtEmitMethodImplementationProlog_defined */
#ifndef somDS_somtEmitMethodImplementationProlog_defined
#define somDS_somtEmitMethodImplementationProlog_defined
static char *somDS_somtEmitMethodImplementationProlog = "::PascalEmitter::somtEmitMethodImplementationProlog";
static somId somDI_somtEmitMethodImplementationProlog = &somDS_somtEmitMethodImplementationProlog;
#endif  /* somDS_somtEmitMethodImplementationProlog_defined */
#define somtEmitMethodImplementationProlog_somApRdDefault

/*
 * New Method: somtEmitMethodImplementation
 */
#pragma linkage(somtEmitMethodImplementation, system)
SOM_Scope void  SOMLINK somtEmitMethodImplementation(PascalEmitter *somSelf,
		SOMTMethodEntryC* entry);
/*
 *  Реализация метода класса
 */
#ifndef somMN_somtEmitMethodImplementation_defined
#define somMN_somtEmitMethodImplementation_defined
static char *somMN_somtEmitMethodImplementation = "somtEmitMethodImplementation";
static somId somId_somtEmitMethodImplementation = &somMN_somtEmitMethodImplementation;
#endif  /* somMN_somtEmitMethodImplementation_defined */
#ifndef somDS_somtEmitMethodImplementation_defined
#define somDS_somtEmitMethodImplementation_defined
static char *somDS_somtEmitMethodImplementation = "::PascalEmitter::somtEmitMethodImplementation";
static somId somDI_somtEmitMethodImplementation = &somDS_somtEmitMethodImplementation;
#endif  /* somDS_somtEmitMethodImplementation_defined */
#define somtEmitMethodImplementation_somApRdDefault

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t PascalEmitterSM[] = {
    {    &PascalEmitterClassData.somtGetTypedef,
         &somId_somtGetTypedef,
         &somDI_somtGetTypedef,
         (somMethodProc *) somtGetTypedef,
         (somMethodProc *)((void*)-1),
#ifdef somtGetTypedef_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtGetTypedefStubs) },
#endif
    {    &PascalEmitterClassData.somtGetStruct,
         &somId_somtGetStruct,
         &somDI_somtGetStruct,
         (somMethodProc *) somtGetStruct,
         (somMethodProc *)((void*)-1),
#ifdef somtGetStruct_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtGetStructStubs) },
#endif
    {    &PascalEmitterClassData.somtGetUnion,
         &somId_somtGetUnion,
         &somDI_somtGetUnion,
         (somMethodProc *) somtGetUnion,
         (somMethodProc *)((void*)-1),
#ifdef somtGetUnion_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtGetUnionStubs) },
#endif
    {    &PascalEmitterClassData.somtGetMethodParamTypes,
         &somId_somtGetMethodParamTypes,
         &somDI_somtGetMethodParamTypes,
         (somMethodProc *) somtGetMethodParamTypes,
         (somMethodProc *)((void*)-1),
#ifdef somtGetMethodParamTypes_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtGetMethodParamTypesStubs) },
#endif
    {    &PascalEmitterClassData.somtGetAttribute,
         &somId_somtGetAttribute,
         &somDI_somtGetAttribute,
         (somMethodProc *) somtGetAttribute,
         (somMethodProc *)((void*)-1),
#ifdef somtGetAttribute_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtGetAttributeStubs) },
#endif
    {    &PascalEmitterClassData.somtGetConstant,
         &somId_somtGetConstant,
         &somDI_somtGetConstant,
         (somMethodProc *) somtGetConstant,
         (somMethodProc *)((void*)-1),
#ifdef somtGetConstant_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtGetConstantStubs) },
#endif
    {    &PascalEmitterClassData.somtGetEnum,
         &somId_somtGetEnum,
         &somDI_somtGetEnum,
         (somMethodProc *) somtGetEnum,
         (somMethodProc *)((void*)-1),
#ifdef somtGetEnum_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtGetEnumStubs) },
#endif
    {    &PascalEmitterClassData.somtEmitNULLFn,
         &somId_somtEmitNULLFn,
         &somDI_somtEmitNULLFn,
         (somMethodProc *) somtEmitNULLFn,
         (somMethodProc *)((void*)-1),
#ifdef somtEmitNULLFn_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtEmitNULLFnStubs) },
#endif
    {    &PascalEmitterClassData.somtEmitMethodImplementationProlog,
         &somId_somtEmitMethodImplementationProlog,
         &somDI_somtEmitMethodImplementationProlog,
         (somMethodProc *) somtEmitMethodImplementationProlog,
         (somMethodProc *)((void*)-1),
#ifdef somtEmitMethodImplementationProlog_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtEmitMethodImplementationPrologStubs) },
#endif
    {    &PascalEmitterClassData.somtEmitMethodImplementation,
         &somId_somtEmitMethodImplementation,
         &somDI_somtEmitMethodImplementation,
         (somMethodProc *) somtEmitMethodImplementation,
         (somMethodProc *)((void*)-1),
#ifdef somtEmitMethodImplementation_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*)&somtEmitMethodImplementationStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t PascalEmitterOM[] = {
    {    &somId_PascalEmittersomtGenerateSections,
         (somMethodProc *) somtGenerateSections    },
    {    &somId_PascalEmittersomtEmitMethod,
         (somMethodProc *) somtEmitMethod    },
    {    &somId_PascalEmittersomtEmitAttribute,
         (somMethodProc *) somtEmitAttribute    },
    {    &somId_PascalEmittersomtEmitInterface,
         (somMethodProc *) somtEmitInterface    },
    {    &somId_PascalEmittersomtEmitConstant,
         (somMethodProc *) somtEmitConstant    },
    {    &somId_PascalEmittersomtEmitEnum,
         (somMethodProc *) somtEmitEnum    },
    {    &somId_PascalEmittersomtEmitClass,
         (somMethodProc *) somtEmitClass    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_PascalEmitter = "PascalEmitter";
static char * somPCN_PascalEmitter_SOMTEmitC = "SOMTEmitC";

static somId somPCPascalEmitter[] = {
    &somPCN_PascalEmitter_SOMTEmitC,
};

static somStaticClassInfo PascalEmitterSCI = {
    4, 10, 7, 0, 0, 0,
    PascalEmitter_MajorVersion, PascalEmitter_MinorVersion,
    sizeof(PascalEmitterData), PascalEmitter_MaxNoMethods, 1,
    &somCN_PascalEmitter,
    (somId) NULL, 1,
    somPCPascalEmitter,
    (somClassDataStructure *) &PascalEmitterClassData,
    (somCClassDataStructure *) &PascalEmitterCClassData,
    PascalEmitterSM, PascalEmitterOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    11, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK PascalEmitterNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;

    if (_PascalEmitter && _somCheckVersion(_PascalEmitter, somtmajorVersion, somtminorVersion))
          return _PascalEmitter;
    SOMTEmitCNewClass(SOMTEmitC_MajorVersion,SOMTEmitC_MinorVersion);	/* static reference */
    result = somBuildClass(0xFFFFFFFF,&PascalEmitterSCI, somtmajorVersion, somtminorVersion);
    PascalEmitter_parent_SOMTEmitC_somtEmitClass_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitClass); 
    PascalEmitter_parent_SOMTEmitC_somtEmitEnum_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitEnum); 
    PascalEmitter_parent_SOMTEmitC_somtEmitConstant_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitConstant); 
    PascalEmitter_parent_SOMTEmitC_somtEmitInterface_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitInterface); 
    PascalEmitter_parent_SOMTEmitC_somtEmitAttribute_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitAttribute); 
    PascalEmitter_parent_SOMTEmitC_somtEmitMethod_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtEmitMethod); 
    PascalEmitter_parent_SOMTEmitC_somtGenerateSections_resolved = 
	somParentNumResolve(PascalEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtGenerateSections); 
    return result;
}

/*
 * Functions for attributes.
 */

#endif /* Primary Implementation Support */
#pragma checkout(resume)

#endif       /* SOM_PascalEmitter_ih */
