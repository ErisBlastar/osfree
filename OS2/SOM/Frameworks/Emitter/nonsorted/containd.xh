/* generated from containd.idl */
/* internal conditional is SOM_Module_containd_Source */
#ifndef SOM_Module_containd_Header_xh
	#define SOM_Module_containd_Header_xh 1
#include <somir.xh>
#define RepositoryId string
#define _IDL_SEQUENCE_RepositoryId _IDL_SEQUENCE_string
#define TC_Contained ((TypeCode) &TC__Contained)
typedef struct {TCKind tag; short align; unsigned char version; unsigned char flags; string interfaceId;} TC_Contained_td;
SOMEXTERN TC_Contained_td SOMDLINK TC__Contained;

	#include <som.xh>
	#include <somobj.xh>
	class Container;
	#ifndef _IDL_SEQUENCE_Container_defined
		#define _IDL_SEQUENCE_Container_defined
		SOM_SEQUENCE_TYPEDEF_NAME(Container * ,sequence(Container));
	#endif /* _IDL_SEQUENCE_Container_defined */
	class Contained;
	#ifndef _IDL_SEQUENCE_Contained_defined
		#define _IDL_SEQUENCE_Contained_defined
		SOM_SEQUENCE_TYPEDEF_NAME(Contained * ,sequence(Contained));
	#endif /* _IDL_SEQUENCE_Contained_defined */
#ifndef Contained_API
#define Contained_API
	typedef struct Contained_Description
	{
		Identifier name;
		any value;
	} Contained_Description;
	#ifndef _IDL_SEQUENCE_Contained_Description_defined
		#define _IDL_SEQUENCE_Contained_Description_defined
		SOM_SEQUENCE_TYPEDEF(Contained_Description);
	#endif /* _IDL_SEQUENCE_Contained_Description_defined */
	#ifndef SOM_DONT_USE_SHORT_NAMES
		#ifndef SOMGD_Description
			#if defined(Description)
				#undef Description
				#define SOMGD_Description
			#else
				#define Description Contained_Description
			#endif
		#endif /* SOMGD_Description */
	#endif /* SOM_DONT_USE_SHORT_NAMES */
	#ifndef SOM_DONT_USE_SHORT_NAMES
		#ifndef _IDL_SEQUENCE_Description_defined
			#define _IDL_SEQUENCE_Description_defined
			#define _IDL_SEQUENCE_Description _IDL_SEQUENCE_Contained_Description
		#endif /* _IDL_SEQUENCE_Description_defined */
	#endif /* SOM_DONT_USE_SHORT_NAMES */
	#ifndef _IDL_SEQUENCE_somModifier_defined
		#define _IDL_SEQUENCE_somModifier_defined
		SOM_SEQUENCE_TYPEDEF(somModifier);
	#endif /* _IDL_SEQUENCE_somModifier_defined */
	typedef _IDL_SEQUENCE_somModifier Contained_somModifierSeq;
	#ifndef _IDL_SEQUENCE_Contained_somModifierSeq_defined
		#define _IDL_SEQUENCE_Contained_somModifierSeq_defined
		SOM_SEQUENCE_TYPEDEF(Contained_somModifierSeq);
	#endif /* _IDL_SEQUENCE_Contained_somModifierSeq_defined */
	typedef _IDL_SEQUENCE_Container Contained_ContainerSeq;
	#ifndef _IDL_SEQUENCE_Contained_ContainerSeq_defined
		#define _IDL_SEQUENCE_Contained_ContainerSeq_defined
		SOM_SEQUENCE_TYPEDEF(Contained_ContainerSeq);
	#endif /* _IDL_SEQUENCE_Contained_ContainerSeq_defined */
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_defined_in
		#error somTD_Contained__set_defined_in already defined
	#else /* somTD_Contained__set_defined_in */
		#define somTD_Contained__set_defined_in somTD_Contained_somC_set_defined_in
	#endif /* somTD_Contained__set_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__set_defined_in
		#error somTP_Contained__set_defined_in already defined
	#else /* somTP_Contained__set_defined_in */
		#define somTP_Contained__set_defined_in somTP_Contained_somC_set_defined_in
	#endif /* somTP_Contained__set_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_Contained__set_defined_in)(
			Contained * somSelf,
			Environment *ev,
			/* in */ RepositoryId defined_in);
		#pragma linkage(somTP_Contained__set_defined_in,system)
		typedef somTP_Contained__set_defined_in *somTD_Contained__set_defined_in;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_defined_in
		#error somTD_Contained__set_defined_in already defined
	#else /* somTD_Contained__set_defined_in */
		#define somTD_Contained__set_defined_in somTD_Contained_somC_set_defined_in
	#endif /* somTD_Contained__set_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_Contained__set_defined_in)(
			Contained * somSelf,
			Environment *ev,
			/* in */ RepositoryId defined_in);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_defined_in
		#error somTD_Contained__get_defined_in already defined
	#else /* somTD_Contained__get_defined_in */
		#define somTD_Contained__get_defined_in somTD_Contained_somC_get_defined_in
	#endif /* somTD_Contained__get_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__get_defined_in
		#error somTP_Contained__get_defined_in already defined
	#else /* somTP_Contained__get_defined_in */
		#define somTP_Contained__get_defined_in somTP_Contained_somC_get_defined_in
	#endif /* somTP_Contained__get_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (somTP_Contained__get_defined_in)(
			Contained * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Contained__get_defined_in,system)
		typedef somTP_Contained__get_defined_in *somTD_Contained__get_defined_in;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_defined_in
		#error somTD_Contained__get_defined_in already defined
	#else /* somTD_Contained__get_defined_in */
		#define somTD_Contained__get_defined_in somTD_Contained_somC_get_defined_in
	#endif /* somTD_Contained__get_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (SOMLINK * somTD_Contained__get_defined_in)(
			Contained * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_name
		#error somTD_Contained__set_name already defined
	#else /* somTD_Contained__set_name */
		#define somTD_Contained__set_name somTD_Contained_somC_set_name
	#endif /* somTD_Contained__set_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__set_name
		#error somTP_Contained__set_name already defined
	#else /* somTP_Contained__set_name */
		#define somTP_Contained__set_name somTP_Contained_somC_set_name
	#endif /* somTP_Contained__set_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_Contained__set_name)(
			Contained * somSelf,
			Environment *ev,
			/* in */ Identifier name);
		#pragma linkage(somTP_Contained__set_name,system)
		typedef somTP_Contained__set_name *somTD_Contained__set_name;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_name
		#error somTD_Contained__set_name already defined
	#else /* somTD_Contained__set_name */
		#define somTD_Contained__set_name somTD_Contained_somC_set_name
	#endif /* somTD_Contained__set_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_Contained__set_name)(
			Contained * somSelf,
			Environment *ev,
			/* in */ Identifier name);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_name
		#error somTD_Contained__get_name already defined
	#else /* somTD_Contained__get_name */
		#define somTD_Contained__get_name somTD_Contained_somC_get_name
	#endif /* somTD_Contained__get_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__get_name
		#error somTP_Contained__get_name already defined
	#else /* somTP_Contained__get_name */
		#define somTP_Contained__get_name somTP_Contained_somC_get_name
	#endif /* somTP_Contained__get_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Identifier (somTP_Contained__get_name)(
			Contained * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Contained__get_name,system)
		typedef somTP_Contained__get_name *somTD_Contained__get_name;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_name
		#error somTD_Contained__get_name already defined
	#else /* somTD_Contained__get_name */
		#define somTD_Contained__get_name somTD_Contained_somC_get_name
	#endif /* somTD_Contained__get_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Identifier (SOMLINK * somTD_Contained__get_name)(
			Contained * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_id
		#error somTD_Contained__set_id already defined
	#else /* somTD_Contained__set_id */
		#define somTD_Contained__set_id somTD_Contained_somC_set_id
	#endif /* somTD_Contained__set_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__set_id
		#error somTP_Contained__set_id already defined
	#else /* somTP_Contained__set_id */
		#define somTP_Contained__set_id somTP_Contained_somC_set_id
	#endif /* somTP_Contained__set_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_Contained__set_id)(
			Contained * somSelf,
			Environment *ev,
			/* in */ RepositoryId id);
		#pragma linkage(somTP_Contained__set_id,system)
		typedef somTP_Contained__set_id *somTD_Contained__set_id;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_id
		#error somTD_Contained__set_id already defined
	#else /* somTD_Contained__set_id */
		#define somTD_Contained__set_id somTD_Contained_somC_set_id
	#endif /* somTD_Contained__set_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_Contained__set_id)(
			Contained * somSelf,
			Environment *ev,
			/* in */ RepositoryId id);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_id
		#error somTD_Contained__get_id already defined
	#else /* somTD_Contained__get_id */
		#define somTD_Contained__get_id somTD_Contained_somC_get_id
	#endif /* somTD_Contained__get_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__get_id
		#error somTP_Contained__get_id already defined
	#else /* somTP_Contained__get_id */
		#define somTP_Contained__get_id somTP_Contained_somC_get_id
	#endif /* somTP_Contained__get_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (somTP_Contained__get_id)(
			Contained * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Contained__get_id,system)
		typedef somTP_Contained__get_id *somTD_Contained__get_id;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_id
		#error somTD_Contained__get_id already defined
	#else /* somTD_Contained__get_id */
		#define somTD_Contained__get_id somTD_Contained_somC_get_id
	#endif /* somTD_Contained__get_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (SOMLINK * somTD_Contained__get_id)(
			Contained * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_somModifiers
		#error somTD_Contained__set_somModifiers already defined
	#else /* somTD_Contained__set_somModifiers */
		#define somTD_Contained__set_somModifiers somTD_Contained_somC_set_somModifiers
	#endif /* somTD_Contained__set_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__set_somModifiers
		#error somTP_Contained__set_somModifiers already defined
	#else /* somTP_Contained__set_somModifiers */
		#define somTP_Contained__set_somModifiers somTP_Contained_somC_set_somModifiers
	#endif /* somTP_Contained__set_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_Contained__set_somModifiers)(
			Contained * somSelf,
			Environment *ev,
			/* in */ Contained_somModifierSeq *somModifiers);
		#pragma linkage(somTP_Contained__set_somModifiers,system)
		typedef somTP_Contained__set_somModifiers *somTD_Contained__set_somModifiers;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__set_somModifiers
		#error somTD_Contained__set_somModifiers already defined
	#else /* somTD_Contained__set_somModifiers */
		#define somTD_Contained__set_somModifiers somTD_Contained_somC_set_somModifiers
	#endif /* somTD_Contained__set_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_Contained__set_somModifiers)(
			Contained * somSelf,
			Environment *ev,
			/* in */ Contained_somModifierSeq *somModifiers);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_somModifiers
		#error somTD_Contained__get_somModifiers already defined
	#else /* somTD_Contained__get_somModifiers */
		#define somTD_Contained__get_somModifiers somTD_Contained_somC_get_somModifiers
	#endif /* somTD_Contained__get_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_Contained__get_somModifiers
		#error somTP_Contained__get_somModifiers already defined
	#else /* somTP_Contained__get_somModifiers */
		#define somTP_Contained__get_somModifiers somTP_Contained_somC_get_somModifiers
	#endif /* somTP_Contained__get_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Contained_somModifierSeq (somTP_Contained__get_somModifiers)(
			Contained * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Contained__get_somModifiers,system)
		typedef somTP_Contained__get_somModifiers *somTD_Contained__get_somModifiers;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_Contained__get_somModifiers
		#error somTD_Contained__get_somModifiers already defined
	#else /* somTD_Contained__get_somModifiers */
		#define somTD_Contained__get_somModifiers somTD_Contained_somC_get_somModifiers
	#endif /* somTD_Contained__get_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Contained_somModifierSeq (SOMLINK * somTD_Contained__get_somModifiers)(
			Contained * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Contained_ContainerSeq (somTP_Contained_within)(
			Contained * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Contained_within,system)
		typedef somTP_Contained_within *somTD_Contained_within;
	#else /* __IBMC__ */
		typedef Contained_ContainerSeq (SOMLINK * somTD_Contained_within)(
			Contained * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Contained_Description (somTP_Contained_describe)(
			Contained * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Contained_describe,system)
		typedef somTP_Contained_describe *somTD_Contained_describe;
	#else /* __IBMC__ */
		typedef Contained_Description (SOMLINK * somTD_Contained_describe)(
			Contained * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somInit)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somInit,system)
		typedef somTP_Contained_somInit *somTD_Contained_somInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somInit)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somUninit)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somUninit,system)
		typedef somTP_Contained_somUninit *somTD_Contained_somUninit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somUninit)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somFree)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somFree,system)
		typedef somTP_Contained_somFree *somTD_Contained_somFree;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somFree)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMClass * (somTP_Contained_somGetClass)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somGetClass,system)
		typedef somTP_Contained_somGetClass *somTD_Contained_somGetClass;
	#else /* __IBMC__ */
		typedef SOMClass * (SOMLINK * somTD_Contained_somGetClass)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef string (somTP_Contained_somGetClassName)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somGetClassName,system)
		typedef somTP_Contained_somGetClassName *somTD_Contained_somGetClassName;
	#else /* __IBMC__ */
		typedef string (SOMLINK * somTD_Contained_somGetClassName)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_Contained_somGetSize)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somGetSize,system)
		typedef somTP_Contained_somGetSize *somTD_Contained_somGetSize;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_Contained_somGetSize)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Contained_somIsA)(
			Contained * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_Contained_somIsA,system)
		typedef somTP_Contained_somIsA *somTD_Contained_somIsA;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Contained_somIsA)(
			Contained * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Contained_somIsInstanceOf)(
			Contained * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_Contained_somIsInstanceOf,system)
		typedef somTP_Contained_somIsInstanceOf *somTD_Contained_somIsInstanceOf;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Contained_somIsInstanceOf)(
			Contained * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Contained_somRespondsTo)(
			Contained * somSelf,
			/* in */ somId mId);
		#pragma linkage(somTP_Contained_somRespondsTo,system)
		typedef somTP_Contained_somRespondsTo *somTD_Contained_somRespondsTo;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Contained_somRespondsTo)(
			Contained * somSelf,
			/* in */ somId mId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Contained_somDispatch)(
			Contained * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_Contained_somDispatch,system)
		typedef somTP_Contained_somDispatch *somTD_Contained_somDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Contained_somDispatch)(
			Contained * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Contained_somClassDispatch)(
			Contained * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_Contained_somClassDispatch,system)
		typedef somTP_Contained_somClassDispatch *somTD_Contained_somClassDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Contained_somClassDispatch)(
			Contained * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Contained_somCastObj)(
			Contained * somSelf,
			/* in */ SOMClass * castedCls);
		#pragma linkage(somTP_Contained_somCastObj,system)
		typedef somTP_Contained_somCastObj *somTD_Contained_somCastObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Contained_somCastObj)(
			Contained * somSelf,
			/* in */ SOMClass * castedCls);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Contained_somResetObj)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somResetObj,system)
		typedef somTP_Contained_somResetObj *somTD_Contained_somResetObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Contained_somResetObj)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Contained_somPrintSelf)(
			Contained * somSelf);
		#pragma linkage(somTP_Contained_somPrintSelf,system)
		typedef somTP_Contained_somPrintSelf *somTD_Contained_somPrintSelf;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Contained_somPrintSelf)(
			Contained * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDumpSelf)(
			Contained * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_Contained_somDumpSelf,system)
		typedef somTP_Contained_somDumpSelf *somTD_Contained_somDumpSelf;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDumpSelf)(
			Contained * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDumpSelfInt)(
			Contained * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_Contained_somDumpSelfInt,system)
		typedef somTP_Contained_somDumpSelfInt *somTD_Contained_somDumpSelfInt;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDumpSelfInt)(
			Contained * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDefaultInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl);
		#pragma linkage(somTP_Contained_somDefaultInit,system)
		typedef somTP_Contained_somDefaultInit *somTD_Contained_somDefaultInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDefaultInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDefaultCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultCopyInit,system)
		typedef somTP_Contained_somDefaultCopyInit *somTD_Contained_somDefaultCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDefaultCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDefaultConstCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultConstCopyInit,system)
		typedef somTP_Contained_somDefaultConstCopyInit *somTD_Contained_somDefaultConstCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDefaultConstCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDefaultVCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultVCopyInit,system)
		typedef somTP_Contained_somDefaultVCopyInit *somTD_Contained_somDefaultVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDefaultVCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDefaultConstVCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultConstVCopyInit,system)
		typedef somTP_Contained_somDefaultConstVCopyInit *somTD_Contained_somDefaultConstVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDefaultConstVCopyInit)(
			Contained * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Contained_somDefaultAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultAssign,system)
		typedef somTP_Contained_somDefaultAssign *somTD_Contained_somDefaultAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Contained_somDefaultAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Contained_somDefaultConstAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultConstAssign,system)
		typedef somTP_Contained_somDefaultConstAssign *somTD_Contained_somDefaultConstAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Contained_somDefaultConstAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Contained_somDefaultVAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultVAssign,system)
		typedef somTP_Contained_somDefaultVAssign *somTD_Contained_somDefaultVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Contained_somDefaultVAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Contained_somDefaultConstVAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Contained_somDefaultConstVAssign,system)
		typedef somTP_Contained_somDefaultConstVAssign *somTD_Contained_somDefaultConstVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Contained_somDefaultConstVAssign)(
			Contained * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Contained_somDestruct)(
			Contained * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
		#pragma linkage(somTP_Contained_somDestruct,system)
		typedef somTP_Contained_somDestruct *somTD_Contained_somDestruct;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Contained_somDestruct)(
			Contained * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
	#ifndef Contained_MajorVersion
		#define Contained_MajorVersion   2
	#endif /* Contained_MajorVersion */
	#ifndef Contained_MinorVersion
		#define Contained_MinorVersion   1
	#endif /* Contained_MinorVersion */
	typedef struct ContainedClassDataStructure
	{
		SOMClass * classObject;
		somMToken within;
		somMToken describe;
		somMToken _get_name;
		somMToken _set_name;
		somMToken _get_id;
		somMToken _set_id;
		somMToken _get_defined_in;
		somMToken _set_defined_in;
		somMToken _get_somModifiers;
		somMToken _set_somModifiers;
		somMToken _get_repository;
		somMToken _set_repository;
		somMToken _get_reference_list;
		somMToken _set_reference_list;
		somMToken _get_iid;
		somMToken _get_defined_in_obj;
		somMToken getFixedPersistentSize;
		somMToken getVariablePersistentSize;
		somMToken putDataInFixedBuf;
		somMToken putDataInVariableBuf;
		somMToken getDataFromFixedBuf;
		somMToken getDataFromVariableBuf;
		somMToken saveToIR;
		somMToken fixedDirty;
		somMToken variableDirty;
		somMToken addToReferenceList;
		somMToken allocDef;
		somMToken removeFromReferenceList;
		somMToken incrementUseCount;
		somMToken deleteFromIR;
		somMToken forceFree;
		somMToken freeUnreferenced;
		somMToken decrementUseCount;
	} ContainedClassDataStructure;
	typedef struct ContainedCClassDataStructure
	{
		somMethodTabs parentMtab;
		somDToken instanceDataToken;
	} ContainedCClassDataStructure;
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_containd_Source) || defined(Contained_Class_Source)
			SOMEXTERN struct ContainedClassDataStructure _ContainedClassData;
			#ifndef ContainedClassData
				#define ContainedClassData    _ContainedClassData
			#endif /* ContainedClassData */
		#else
			SOMEXTERN struct ContainedClassDataStructure * SOMLINK resolve_ContainedClassData(void);
			#ifndef ContainedClassData
				#define ContainedClassData    (*(resolve_ContainedClassData()))
			#endif /* ContainedClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_containd_Source) || defined(Contained_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_containd_Source || Contained_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_containd_Source || Contained_Class_Source */
		struct ContainedClassDataStructure SOMDLINK ContainedClassData;
	#endif /* SOM_RESOLVE_DATA */
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_containd_Source) || defined(Contained_Class_Source)
			SOMEXTERN struct ContainedCClassDataStructure _ContainedCClassData;
			#ifndef ContainedCClassData
				#define ContainedCClassData    _ContainedCClassData
			#endif /* ContainedCClassData */
		#else
			SOMEXTERN struct ContainedCClassDataStructure * SOMLINK resolve_ContainedCClassData(void);
			#ifndef ContainedCClassData
				#define ContainedCClassData    (*(resolve_ContainedCClassData()))
			#endif /* ContainedCClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_containd_Source) || defined(Contained_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_containd_Source || Contained_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_containd_Source || Contained_Class_Source */
		struct ContainedCClassDataStructure SOMDLINK ContainedCClassData;
	#endif /* SOM_RESOLVE_DATA */
	extern "C" {
	extern 
	#if defined(SOM_Module_containd_Source) || defined(Contained_Class_Source)
		#ifdef SOMDLLEXPORT
			SOMDLLEXPORT
		#endif /* SOMDLLEXPORT */
	#else /* SOM_Module_containd_Source || Contained_Class_Source */
		#ifdef SOMDLLIMPORT
			SOMDLLIMPORT
		#endif /* SOMDLLIMPORT */
	#endif /* SOM_Module_containd_Source || Contained_Class_Source */
	SOMClass * SOMLINK ContainedNewClass
			(integer4 somtmajorVersion,integer4 somtminorVersion);
	}
	#define _SOMCLASS_Contained (ContainedClassData.classObject)
	#ifndef SOMGD_Contained
		#if (defined(_Contained) || defined(__Contained))
			#undef _Contained
			#undef __Contained
			#define SOMGD_Contained 1
		#else
			#define _Contained _SOMCLASS_Contained
		#endif /* _Contained */
	#endif /* SOMGD_Contained */
	#define Contained_classObj _SOMCLASS_Contained
	#define _SOMMTOKEN_Contained(method) ((somMToken)(ContainedClassData.method))
#endif /* Contained_API */

	class Contained : public SOMObject
	{
	protected:
		Contained(somMethodTab & mtab)
			: SOMObject(mtab)
		{}
	public:

		inline void _set_defined_in(
			Environment *ev,
			/* in */ RepositoryId defined_in)
		{
			SOM_Resolve((void *)this,Contained,_set_defined_in)
					((Contained *)(void *)this,ev,defined_in);
		};

		inline RepositoryId _get_defined_in(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_defined_in)
					((Contained *)(void *)this,ev);
		};

		inline void _set_name(
			Environment *ev,
			/* in */ Identifier name)
		{
			SOM_Resolve((void *)this,Contained,_set_name)
					((Contained *)(void *)this,ev,name);
		};

		inline Identifier _get_name(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_name)
					((Contained *)(void *)this,ev);
		};

		inline void _set_id(
			Environment *ev,
			/* in */ RepositoryId id)
		{
			SOM_Resolve((void *)this,Contained,_set_id)
					((Contained *)(void *)this,ev,id);
		};

		inline RepositoryId _get_id(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_id)
					((Contained *)(void *)this,ev);
		};

		inline void _set_somModifiers(
			Environment *ev,
			/* in */ Contained_somModifierSeq *somModifiers)
		{
			SOM_Resolve((void *)this,Contained,_set_somModifiers)
					((Contained *)(void *)this,ev,somModifiers);
		};

		inline Contained_somModifierSeq _get_somModifiers(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_somModifiers)
					((Contained *)(void *)this,ev);
		};

		inline Contained_ContainerSeq within(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,within)
					((Contained *)(void *)this,ev);
		};

		inline Contained_Description describe(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,describe)
					((Contained *)(void *)this,ev);
		};

		inline void operator delete(void *x)
			{ ((SOMObject *)x)->somFree(); };

		inline void * operator new(size_t /* len */)
		{ if (!ContainedClassData.classObject)
			{ ContainedNewClass(Contained_MajorVersion,Contained_MinorVersion); }
			return (void *)SOM_Resolve((SOMObject *)(void *)ContainedClassData.classObject,
				SOMClass,somNewNoInit)((SOMClass *)(void *)ContainedClassData.classObject);
		};
		Contained()
			: SOMObject(*(ContainedCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==ContainedCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultInit(0); }
		Contained(Contained *fromObj)
			: SOMObject(*(ContainedCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==ContainedCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultCopyInit(0,(SOMObject*)(void*)fromObj); }
	};
#endif /* SOM_Module_containd_Header_xh */
