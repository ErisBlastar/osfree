/* generated from operatdf.idl */
/* internal conditional is SOM_Module_operatdf_Source */
#ifndef SOM_Module_operatdf_Header_xh
	#define SOM_Module_operatdf_Header_xh 1
	#include <som.xh>
	#include <containd.xh>
	#include <somobj.xh>
	#include <containr.xh>
	#include <paramdef.xh>
	#include <excptdef.xh>
	class OperationDef;
	#ifndef _IDL_SEQUENCE_OperationDef_defined
		#define _IDL_SEQUENCE_OperationDef_defined
		SOM_SEQUENCE_TYPEDEF_NAME(OperationDef * ,sequence(OperationDef));
	#endif /* _IDL_SEQUENCE_OperationDef_defined */
#ifndef OperationDef_API
#define OperationDef_API
	#ifndef OperationDef_OperationMode_defined
		#define OperationDef_OperationMode_defined
		typedef unsigned long OperationDef_OperationMode;
		#ifndef OperationDef_NORMAL
			#define OperationDef_NORMAL 1UL
		#endif /* OperationDef_NORMAL */
		#ifndef OperationDef_ONEWAY
			#define OperationDef_ONEWAY 2UL
		#endif /* OperationDef_ONEWAY */
		#ifndef SOM_DONT_USE_SHORT_NAMES
			#ifndef SOMGD_OperationMode
				#if defined(OperationMode)
					#undef OperationMode
					#define SOMGD_OperationMode
				#else
					#define OperationMode OperationDef_OperationMode
				#endif
			#endif /* SOMGD_OperationMode */
		#endif /* SOM_DONT_USE_SHORT_NAMES */
	#endif /* OperationDef_OperationMode_defined */
	typedef struct OperationDef_OperationDescription
	{
		Identifier name;
		RepositoryId id;
		RepositoryId defined_in;
		TypeCode result;
		OperationDef_OperationMode mode;
		_IDL_SEQUENCE_string contexts;
		_IDL_SEQUENCE_ParameterDef_ParameterDescription parameter;
		_IDL_SEQUENCE_ExceptionDef_ExceptionDescription exceptions;
	} OperationDef_OperationDescription;
	#ifndef _IDL_SEQUENCE_OperationDef_OperationDescription_defined
		#define _IDL_SEQUENCE_OperationDef_OperationDescription_defined
		SOM_SEQUENCE_TYPEDEF(OperationDef_OperationDescription);
	#endif /* _IDL_SEQUENCE_OperationDef_OperationDescription_defined */
	#ifndef SOM_DONT_USE_SHORT_NAMES
		#ifndef SOMGD_OperationDescription
			#if defined(OperationDescription)
				#undef OperationDescription
				#define SOMGD_OperationDescription
			#else
				#define OperationDescription OperationDef_OperationDescription
			#endif
		#endif /* SOMGD_OperationDescription */
	#endif /* SOM_DONT_USE_SHORT_NAMES */
	#ifndef SOM_DONT_USE_SHORT_NAMES
		#ifndef _IDL_SEQUENCE_OperationDescription_defined
			#define _IDL_SEQUENCE_OperationDescription_defined
			#define _IDL_SEQUENCE_OperationDescription _IDL_SEQUENCE_OperationDef_OperationDescription
		#endif /* _IDL_SEQUENCE_OperationDescription_defined */
	#endif /* SOM_DONT_USE_SHORT_NAMES */
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_result
		#error somTD_OperationDef__set_result already defined
	#else /* somTD_OperationDef__set_result */
		#define somTD_OperationDef__set_result somTD_OperationDef_somC_set_result
	#endif /* somTD_OperationDef__set_result */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__set_result
		#error somTP_OperationDef__set_result already defined
	#else /* somTP_OperationDef__set_result */
		#define somTP_OperationDef__set_result somTP_OperationDef_somC_set_result
	#endif /* somTP_OperationDef__set_result */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_OperationDef__set_result)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ TypeCode result);
		#pragma linkage(somTP_OperationDef__set_result,system)
		typedef somTP_OperationDef__set_result *somTD_OperationDef__set_result;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_result
		#error somTD_OperationDef__set_result already defined
	#else /* somTD_OperationDef__set_result */
		#define somTD_OperationDef__set_result somTD_OperationDef_somC_set_result
	#endif /* somTD_OperationDef__set_result */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_OperationDef__set_result)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ TypeCode result);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_result
		#error somTD_OperationDef__get_result already defined
	#else /* somTD_OperationDef__get_result */
		#define somTD_OperationDef__get_result somTD_OperationDef_somC_get_result
	#endif /* somTD_OperationDef__get_result */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__get_result
		#error somTP_OperationDef__get_result already defined
	#else /* somTP_OperationDef__get_result */
		#define somTP_OperationDef__get_result somTP_OperationDef_somC_get_result
	#endif /* somTP_OperationDef__get_result */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef TypeCode (somTP_OperationDef__get_result)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef__get_result,system)
		typedef somTP_OperationDef__get_result *somTD_OperationDef__get_result;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_result
		#error somTD_OperationDef__get_result already defined
	#else /* somTD_OperationDef__get_result */
		#define somTD_OperationDef__get_result somTD_OperationDef_somC_get_result
	#endif /* somTD_OperationDef__get_result */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef TypeCode (SOMLINK * somTD_OperationDef__get_result)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_mode
		#error somTD_OperationDef__set_mode already defined
	#else /* somTD_OperationDef__set_mode */
		#define somTD_OperationDef__set_mode somTD_OperationDef_somC_set_mode
	#endif /* somTD_OperationDef__set_mode */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__set_mode
		#error somTP_OperationDef__set_mode already defined
	#else /* somTP_OperationDef__set_mode */
		#define somTP_OperationDef__set_mode somTP_OperationDef_somC_set_mode
	#endif /* somTP_OperationDef__set_mode */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_OperationDef__set_mode)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ OperationDef_OperationMode mode);
		#pragma linkage(somTP_OperationDef__set_mode,system)
		typedef somTP_OperationDef__set_mode *somTD_OperationDef__set_mode;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_mode
		#error somTD_OperationDef__set_mode already defined
	#else /* somTD_OperationDef__set_mode */
		#define somTD_OperationDef__set_mode somTD_OperationDef_somC_set_mode
	#endif /* somTD_OperationDef__set_mode */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_OperationDef__set_mode)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ OperationDef_OperationMode mode);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_mode
		#error somTD_OperationDef__get_mode already defined
	#else /* somTD_OperationDef__get_mode */
		#define somTD_OperationDef__get_mode somTD_OperationDef_somC_get_mode
	#endif /* somTD_OperationDef__get_mode */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__get_mode
		#error somTP_OperationDef__get_mode already defined
	#else /* somTP_OperationDef__get_mode */
		#define somTP_OperationDef__get_mode somTP_OperationDef_somC_get_mode
	#endif /* somTP_OperationDef__get_mode */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef OperationDef_OperationMode (somTP_OperationDef__get_mode)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef__get_mode,system)
		typedef somTP_OperationDef__get_mode *somTD_OperationDef__get_mode;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_mode
		#error somTD_OperationDef__get_mode already defined
	#else /* somTD_OperationDef__get_mode */
		#define somTD_OperationDef__get_mode somTD_OperationDef_somC_get_mode
	#endif /* somTD_OperationDef__get_mode */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef OperationDef_OperationMode (SOMLINK * somTD_OperationDef__get_mode)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_contexts
		#error somTD_OperationDef__set_contexts already defined
	#else /* somTD_OperationDef__set_contexts */
		#define somTD_OperationDef__set_contexts somTD_OperationDef_somC_set_contexts
	#endif /* somTD_OperationDef__set_contexts */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__set_contexts
		#error somTP_OperationDef__set_contexts already defined
	#else /* somTP_OperationDef__set_contexts */
		#define somTP_OperationDef__set_contexts somTP_OperationDef_somC_set_contexts
	#endif /* somTP_OperationDef__set_contexts */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_OperationDef__set_contexts)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ _IDL_SEQUENCE_string *contexts);
		#pragma linkage(somTP_OperationDef__set_contexts,system)
		typedef somTP_OperationDef__set_contexts *somTD_OperationDef__set_contexts;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_contexts
		#error somTD_OperationDef__set_contexts already defined
	#else /* somTD_OperationDef__set_contexts */
		#define somTD_OperationDef__set_contexts somTD_OperationDef_somC_set_contexts
	#endif /* somTD_OperationDef__set_contexts */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_OperationDef__set_contexts)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ _IDL_SEQUENCE_string *contexts);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_contexts
		#error somTD_OperationDef__get_contexts already defined
	#else /* somTD_OperationDef__get_contexts */
		#define somTD_OperationDef__get_contexts somTD_OperationDef_somC_get_contexts
	#endif /* somTD_OperationDef__get_contexts */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__get_contexts
		#error somTP_OperationDef__get_contexts already defined
	#else /* somTP_OperationDef__get_contexts */
		#define somTP_OperationDef__get_contexts somTP_OperationDef_somC_get_contexts
	#endif /* somTP_OperationDef__get_contexts */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef _IDL_SEQUENCE_string (somTP_OperationDef__get_contexts)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef__get_contexts,system)
		typedef somTP_OperationDef__get_contexts *somTD_OperationDef__get_contexts;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_contexts
		#error somTD_OperationDef__get_contexts already defined
	#else /* somTD_OperationDef__get_contexts */
		#define somTD_OperationDef__get_contexts somTD_OperationDef_somC_get_contexts
	#endif /* somTD_OperationDef__get_contexts */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef _IDL_SEQUENCE_string (SOMLINK * somTD_OperationDef__get_contexts)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_defined_in
		#error somTD_OperationDef__set_defined_in already defined
	#else /* somTD_OperationDef__set_defined_in */
		#define somTD_OperationDef__set_defined_in somTD_OperationDef_somC_set_defined_in
	#endif /* somTD_OperationDef__set_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__set_defined_in
		#error somTP_OperationDef__set_defined_in already defined
	#else /* somTP_OperationDef__set_defined_in */
		#define somTP_OperationDef__set_defined_in somTP_OperationDef_somC_set_defined_in
	#endif /* somTP_OperationDef__set_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_OperationDef__set_defined_in)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ RepositoryId defined_in);
		#pragma linkage(somTP_OperationDef__set_defined_in,system)
		typedef somTP_OperationDef__set_defined_in *somTD_OperationDef__set_defined_in;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_defined_in
		#error somTD_OperationDef__set_defined_in already defined
	#else /* somTD_OperationDef__set_defined_in */
		#define somTD_OperationDef__set_defined_in somTD_OperationDef_somC_set_defined_in
	#endif /* somTD_OperationDef__set_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_OperationDef__set_defined_in)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ RepositoryId defined_in);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_defined_in
		#error somTD_OperationDef__get_defined_in already defined
	#else /* somTD_OperationDef__get_defined_in */
		#define somTD_OperationDef__get_defined_in somTD_OperationDef_somC_get_defined_in
	#endif /* somTD_OperationDef__get_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__get_defined_in
		#error somTP_OperationDef__get_defined_in already defined
	#else /* somTP_OperationDef__get_defined_in */
		#define somTP_OperationDef__get_defined_in somTP_OperationDef_somC_get_defined_in
	#endif /* somTP_OperationDef__get_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (somTP_OperationDef__get_defined_in)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef__get_defined_in,system)
		typedef somTP_OperationDef__get_defined_in *somTD_OperationDef__get_defined_in;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_defined_in
		#error somTD_OperationDef__get_defined_in already defined
	#else /* somTD_OperationDef__get_defined_in */
		#define somTD_OperationDef__get_defined_in somTD_OperationDef_somC_get_defined_in
	#endif /* somTD_OperationDef__get_defined_in */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (SOMLINK * somTD_OperationDef__get_defined_in)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_name
		#error somTD_OperationDef__set_name already defined
	#else /* somTD_OperationDef__set_name */
		#define somTD_OperationDef__set_name somTD_OperationDef_somC_set_name
	#endif /* somTD_OperationDef__set_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__set_name
		#error somTP_OperationDef__set_name already defined
	#else /* somTP_OperationDef__set_name */
		#define somTP_OperationDef__set_name somTP_OperationDef_somC_set_name
	#endif /* somTP_OperationDef__set_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_OperationDef__set_name)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Identifier name);
		#pragma linkage(somTP_OperationDef__set_name,system)
		typedef somTP_OperationDef__set_name *somTD_OperationDef__set_name;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_name
		#error somTD_OperationDef__set_name already defined
	#else /* somTD_OperationDef__set_name */
		#define somTD_OperationDef__set_name somTD_OperationDef_somC_set_name
	#endif /* somTD_OperationDef__set_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_OperationDef__set_name)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Identifier name);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_name
		#error somTD_OperationDef__get_name already defined
	#else /* somTD_OperationDef__get_name */
		#define somTD_OperationDef__get_name somTD_OperationDef_somC_get_name
	#endif /* somTD_OperationDef__get_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__get_name
		#error somTP_OperationDef__get_name already defined
	#else /* somTP_OperationDef__get_name */
		#define somTP_OperationDef__get_name somTP_OperationDef_somC_get_name
	#endif /* somTP_OperationDef__get_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Identifier (somTP_OperationDef__get_name)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef__get_name,system)
		typedef somTP_OperationDef__get_name *somTD_OperationDef__get_name;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_name
		#error somTD_OperationDef__get_name already defined
	#else /* somTD_OperationDef__get_name */
		#define somTD_OperationDef__get_name somTD_OperationDef_somC_get_name
	#endif /* somTD_OperationDef__get_name */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Identifier (SOMLINK * somTD_OperationDef__get_name)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_id
		#error somTD_OperationDef__set_id already defined
	#else /* somTD_OperationDef__set_id */
		#define somTD_OperationDef__set_id somTD_OperationDef_somC_set_id
	#endif /* somTD_OperationDef__set_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__set_id
		#error somTP_OperationDef__set_id already defined
	#else /* somTP_OperationDef__set_id */
		#define somTP_OperationDef__set_id somTP_OperationDef_somC_set_id
	#endif /* somTP_OperationDef__set_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_OperationDef__set_id)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ RepositoryId id);
		#pragma linkage(somTP_OperationDef__set_id,system)
		typedef somTP_OperationDef__set_id *somTD_OperationDef__set_id;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_id
		#error somTD_OperationDef__set_id already defined
	#else /* somTD_OperationDef__set_id */
		#define somTD_OperationDef__set_id somTD_OperationDef_somC_set_id
	#endif /* somTD_OperationDef__set_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_OperationDef__set_id)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ RepositoryId id);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_id
		#error somTD_OperationDef__get_id already defined
	#else /* somTD_OperationDef__get_id */
		#define somTD_OperationDef__get_id somTD_OperationDef_somC_get_id
	#endif /* somTD_OperationDef__get_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__get_id
		#error somTP_OperationDef__get_id already defined
	#else /* somTP_OperationDef__get_id */
		#define somTP_OperationDef__get_id somTP_OperationDef_somC_get_id
	#endif /* somTP_OperationDef__get_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (somTP_OperationDef__get_id)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef__get_id,system)
		typedef somTP_OperationDef__get_id *somTD_OperationDef__get_id;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_id
		#error somTD_OperationDef__get_id already defined
	#else /* somTD_OperationDef__get_id */
		#define somTD_OperationDef__get_id somTD_OperationDef_somC_get_id
	#endif /* somTD_OperationDef__get_id */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef RepositoryId (SOMLINK * somTD_OperationDef__get_id)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_somModifiers
		#error somTD_OperationDef__set_somModifiers already defined
	#else /* somTD_OperationDef__set_somModifiers */
		#define somTD_OperationDef__set_somModifiers somTD_OperationDef_somC_set_somModifiers
	#endif /* somTD_OperationDef__set_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__set_somModifiers
		#error somTP_OperationDef__set_somModifiers already defined
	#else /* somTP_OperationDef__set_somModifiers */
		#define somTP_OperationDef__set_somModifiers somTP_OperationDef_somC_set_somModifiers
	#endif /* somTP_OperationDef__set_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_OperationDef__set_somModifiers)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Contained_somModifierSeq *somModifiers);
		#pragma linkage(somTP_OperationDef__set_somModifiers,system)
		typedef somTP_OperationDef__set_somModifiers *somTD_OperationDef__set_somModifiers;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__set_somModifiers
		#error somTD_OperationDef__set_somModifiers already defined
	#else /* somTD_OperationDef__set_somModifiers */
		#define somTD_OperationDef__set_somModifiers somTD_OperationDef_somC_set_somModifiers
	#endif /* somTD_OperationDef__set_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_OperationDef__set_somModifiers)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Contained_somModifierSeq *somModifiers);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_somModifiers
		#error somTD_OperationDef__get_somModifiers already defined
	#else /* somTD_OperationDef__get_somModifiers */
		#define somTD_OperationDef__get_somModifiers somTD_OperationDef_somC_get_somModifiers
	#endif /* somTD_OperationDef__get_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_OperationDef__get_somModifiers
		#error somTP_OperationDef__get_somModifiers already defined
	#else /* somTP_OperationDef__get_somModifiers */
		#define somTP_OperationDef__get_somModifiers somTP_OperationDef_somC_get_somModifiers
	#endif /* somTP_OperationDef__get_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Contained_somModifierSeq (somTP_OperationDef__get_somModifiers)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef__get_somModifiers,system)
		typedef somTP_OperationDef__get_somModifiers *somTD_OperationDef__get_somModifiers;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_OperationDef__get_somModifiers
		#error somTD_OperationDef__get_somModifiers already defined
	#else /* somTD_OperationDef__get_somModifiers */
		#define somTD_OperationDef__get_somModifiers somTD_OperationDef_somC_get_somModifiers
	#endif /* somTD_OperationDef__get_somModifiers */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef Contained_somModifierSeq (SOMLINK * somTD_OperationDef__get_somModifiers)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Contained_ContainerSeq (somTP_OperationDef_within)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef_within,system)
		typedef somTP_OperationDef_within *somTD_OperationDef_within;
	#else /* __IBMC__ */
		typedef Contained_ContainerSeq (SOMLINK * somTD_OperationDef_within)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Contained_Description (somTP_OperationDef_describe)(
			OperationDef * somSelf,
			Environment *ev);
		#pragma linkage(somTP_OperationDef_describe,system)
		typedef somTP_OperationDef_describe *somTD_OperationDef_describe;
	#else /* __IBMC__ */
		typedef Contained_Description (SOMLINK * somTD_OperationDef_describe)(
			OperationDef * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somInit)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somInit,system)
		typedef somTP_OperationDef_somInit *somTD_OperationDef_somInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somInit)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somUninit)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somUninit,system)
		typedef somTP_OperationDef_somUninit *somTD_OperationDef_somUninit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somUninit)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somFree)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somFree,system)
		typedef somTP_OperationDef_somFree *somTD_OperationDef_somFree;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somFree)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMClass * (somTP_OperationDef_somGetClass)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somGetClass,system)
		typedef somTP_OperationDef_somGetClass *somTD_OperationDef_somGetClass;
	#else /* __IBMC__ */
		typedef SOMClass * (SOMLINK * somTD_OperationDef_somGetClass)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef string (somTP_OperationDef_somGetClassName)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somGetClassName,system)
		typedef somTP_OperationDef_somGetClassName *somTD_OperationDef_somGetClassName;
	#else /* __IBMC__ */
		typedef string (SOMLINK * somTD_OperationDef_somGetClassName)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_OperationDef_somGetSize)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somGetSize,system)
		typedef somTP_OperationDef_somGetSize *somTD_OperationDef_somGetSize;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_OperationDef_somGetSize)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_OperationDef_somIsA)(
			OperationDef * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_OperationDef_somIsA,system)
		typedef somTP_OperationDef_somIsA *somTD_OperationDef_somIsA;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_OperationDef_somIsA)(
			OperationDef * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_OperationDef_somIsInstanceOf)(
			OperationDef * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_OperationDef_somIsInstanceOf,system)
		typedef somTP_OperationDef_somIsInstanceOf *somTD_OperationDef_somIsInstanceOf;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_OperationDef_somIsInstanceOf)(
			OperationDef * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_OperationDef_somRespondsTo)(
			OperationDef * somSelf,
			/* in */ somId mId);
		#pragma linkage(somTP_OperationDef_somRespondsTo,system)
		typedef somTP_OperationDef_somRespondsTo *somTD_OperationDef_somRespondsTo;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_OperationDef_somRespondsTo)(
			OperationDef * somSelf,
			/* in */ somId mId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_OperationDef_somDispatch)(
			OperationDef * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_OperationDef_somDispatch,system)
		typedef somTP_OperationDef_somDispatch *somTD_OperationDef_somDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_OperationDef_somDispatch)(
			OperationDef * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_OperationDef_somClassDispatch)(
			OperationDef * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_OperationDef_somClassDispatch,system)
		typedef somTP_OperationDef_somClassDispatch *somTD_OperationDef_somClassDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_OperationDef_somClassDispatch)(
			OperationDef * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_OperationDef_somCastObj)(
			OperationDef * somSelf,
			/* in */ SOMClass * castedCls);
		#pragma linkage(somTP_OperationDef_somCastObj,system)
		typedef somTP_OperationDef_somCastObj *somTD_OperationDef_somCastObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_OperationDef_somCastObj)(
			OperationDef * somSelf,
			/* in */ SOMClass * castedCls);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_OperationDef_somResetObj)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somResetObj,system)
		typedef somTP_OperationDef_somResetObj *somTD_OperationDef_somResetObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_OperationDef_somResetObj)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_OperationDef_somPrintSelf)(
			OperationDef * somSelf);
		#pragma linkage(somTP_OperationDef_somPrintSelf,system)
		typedef somTP_OperationDef_somPrintSelf *somTD_OperationDef_somPrintSelf;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_OperationDef_somPrintSelf)(
			OperationDef * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDumpSelf)(
			OperationDef * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_OperationDef_somDumpSelf,system)
		typedef somTP_OperationDef_somDumpSelf *somTD_OperationDef_somDumpSelf;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDumpSelf)(
			OperationDef * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDumpSelfInt)(
			OperationDef * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_OperationDef_somDumpSelfInt,system)
		typedef somTP_OperationDef_somDumpSelfInt *somTD_OperationDef_somDumpSelfInt;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDumpSelfInt)(
			OperationDef * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDefaultInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl);
		#pragma linkage(somTP_OperationDef_somDefaultInit,system)
		typedef somTP_OperationDef_somDefaultInit *somTD_OperationDef_somDefaultInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDefaultInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDefaultCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultCopyInit,system)
		typedef somTP_OperationDef_somDefaultCopyInit *somTD_OperationDef_somDefaultCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDefaultCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDefaultConstCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultConstCopyInit,system)
		typedef somTP_OperationDef_somDefaultConstCopyInit *somTD_OperationDef_somDefaultConstCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDefaultConstCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDefaultVCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultVCopyInit,system)
		typedef somTP_OperationDef_somDefaultVCopyInit *somTD_OperationDef_somDefaultVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDefaultVCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDefaultConstVCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultConstVCopyInit,system)
		typedef somTP_OperationDef_somDefaultConstVCopyInit *somTD_OperationDef_somDefaultConstVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDefaultConstVCopyInit)(
			OperationDef * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_OperationDef_somDefaultAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultAssign,system)
		typedef somTP_OperationDef_somDefaultAssign *somTD_OperationDef_somDefaultAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_OperationDef_somDefaultAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_OperationDef_somDefaultConstAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultConstAssign,system)
		typedef somTP_OperationDef_somDefaultConstAssign *somTD_OperationDef_somDefaultConstAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_OperationDef_somDefaultConstAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_OperationDef_somDefaultVAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultVAssign,system)
		typedef somTP_OperationDef_somDefaultVAssign *somTD_OperationDef_somDefaultVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_OperationDef_somDefaultVAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_OperationDef_somDefaultConstVAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_OperationDef_somDefaultConstVAssign,system)
		typedef somTP_OperationDef_somDefaultConstVAssign *somTD_OperationDef_somDefaultConstVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_OperationDef_somDefaultConstVAssign)(
			OperationDef * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_OperationDef_somDestruct)(
			OperationDef * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
		#pragma linkage(somTP_OperationDef_somDestruct,system)
		typedef somTP_OperationDef_somDestruct *somTD_OperationDef_somDestruct;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_OperationDef_somDestruct)(
			OperationDef * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Container_ContainedSeq (somTP_OperationDef_contents)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
		#pragma linkage(somTP_OperationDef_contents,system)
		typedef somTP_OperationDef_contents *somTD_OperationDef_contents;
	#else /* __IBMC__ */
		typedef Container_ContainedSeq (SOMLINK * somTD_OperationDef_contents)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Container_ContainedSeq (somTP_OperationDef_lookup_name)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Identifier search_name,
			/* in */ long levels_to_search,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
		#pragma linkage(somTP_OperationDef_lookup_name,system)
		typedef somTP_OperationDef_lookup_name *somTD_OperationDef_lookup_name;
	#else /* __IBMC__ */
		typedef Container_ContainedSeq (SOMLINK * somTD_OperationDef_lookup_name)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Identifier search_name,
			/* in */ long levels_to_search,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Container_ContainerDescriptionSeq (somTP_OperationDef_describe_contents)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited,
			/* in */ long max_returned_objs);
		#pragma linkage(somTP_OperationDef_describe_contents,system)
		typedef somTP_OperationDef_describe_contents *somTD_OperationDef_describe_contents;
	#else /* __IBMC__ */
		typedef Container_ContainerDescriptionSeq (SOMLINK * somTD_OperationDef_describe_contents)(
			OperationDef * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited,
			/* in */ long max_returned_objs);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
	#ifndef OperationDef_MajorVersion
		#define OperationDef_MajorVersion   2
	#endif /* OperationDef_MajorVersion */
	#ifndef OperationDef_MinorVersion
		#define OperationDef_MinorVersion   1
	#endif /* OperationDef_MinorVersion */
	typedef struct OperationDefClassDataStructure
	{
		SOMClass * classObject;
		somMToken _get_result;
		somMToken _set_result;
		somMToken _get_mode;
		somMToken _set_mode;
		somMToken _get_contexts;
		somMToken _set_contexts;
		somMToken _get_raiseSeq;
		somMToken _set_raiseSeq;
	} OperationDefClassDataStructure;
	typedef struct OperationDefCClassDataStructure
	{
		somMethodTabs parentMtab;
		somDToken instanceDataToken;
	} OperationDefCClassDataStructure;
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_operatdf_Source) || defined(OperationDef_Class_Source)
			SOMEXTERN struct OperationDefClassDataStructure _OperationDefClassData;
			#ifndef OperationDefClassData
				#define OperationDefClassData    _OperationDefClassData
			#endif /* OperationDefClassData */
		#else
			SOMEXTERN struct OperationDefClassDataStructure * SOMLINK resolve_OperationDefClassData(void);
			#ifndef OperationDefClassData
				#define OperationDefClassData    (*(resolve_OperationDefClassData()))
			#endif /* OperationDefClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_operatdf_Source) || defined(OperationDef_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_operatdf_Source || OperationDef_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_operatdf_Source || OperationDef_Class_Source */
		struct OperationDefClassDataStructure SOMDLINK OperationDefClassData;
	#endif /* SOM_RESOLVE_DATA */
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_operatdf_Source) || defined(OperationDef_Class_Source)
			SOMEXTERN struct OperationDefCClassDataStructure _OperationDefCClassData;
			#ifndef OperationDefCClassData
				#define OperationDefCClassData    _OperationDefCClassData
			#endif /* OperationDefCClassData */
		#else
			SOMEXTERN struct OperationDefCClassDataStructure * SOMLINK resolve_OperationDefCClassData(void);
			#ifndef OperationDefCClassData
				#define OperationDefCClassData    (*(resolve_OperationDefCClassData()))
			#endif /* OperationDefCClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_operatdf_Source) || defined(OperationDef_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_operatdf_Source || OperationDef_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_operatdf_Source || OperationDef_Class_Source */
		struct OperationDefCClassDataStructure SOMDLINK OperationDefCClassData;
	#endif /* SOM_RESOLVE_DATA */
	extern "C" {
	extern 
	#if defined(SOM_Module_operatdf_Source) || defined(OperationDef_Class_Source)
		#ifdef SOMDLLEXPORT
			SOMDLLEXPORT
		#endif /* SOMDLLEXPORT */
	#else /* SOM_Module_operatdf_Source || OperationDef_Class_Source */
		#ifdef SOMDLLIMPORT
			SOMDLLIMPORT
		#endif /* SOMDLLIMPORT */
	#endif /* SOM_Module_operatdf_Source || OperationDef_Class_Source */
	SOMClass * SOMLINK OperationDefNewClass
			(integer4 somtmajorVersion,integer4 somtminorVersion);
	}
	#define _SOMCLASS_OperationDef (OperationDefClassData.classObject)
	#ifndef SOMGD_OperationDef
		#if (defined(_OperationDef) || defined(__OperationDef))
			#undef _OperationDef
			#undef __OperationDef
			#define SOMGD_OperationDef 1
		#else
			#define _OperationDef _SOMCLASS_OperationDef
		#endif /* _OperationDef */
	#endif /* SOMGD_OperationDef */
	#define OperationDef_classObj _SOMCLASS_OperationDef
	#define _SOMMTOKEN_OperationDef(method) ((somMToken)(OperationDefClassData.method))
#endif /* OperationDef_API */

	class OperationDef : public Contained, public Container
	{
	protected:
		OperationDef(somMethodTab & mtab)
			: Contained(mtab)
			, Container(mtab)
		{}
	public:

		inline void _set_result(
			Environment *ev,
			/* in */ TypeCode result)
		{
			SOM_Resolve((void *)this,OperationDef,_set_result)
					((OperationDef *)(void *)this,ev,result);
		};

		inline TypeCode _get_result(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,OperationDef,_get_result)
					((OperationDef *)(void *)this,ev);
		};

		inline void _set_mode(
			Environment *ev,
			/* in */ OperationDef_OperationMode mode)
		{
			SOM_Resolve((void *)this,OperationDef,_set_mode)
					((OperationDef *)(void *)this,ev,mode);
		};

		inline OperationDef_OperationMode _get_mode(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,OperationDef,_get_mode)
					((OperationDef *)(void *)this,ev);
		};

		inline void _set_contexts(
			Environment *ev,
			/* in */ _IDL_SEQUENCE_string *contexts)
		{
			SOM_Resolve((void *)this,OperationDef,_set_contexts)
					((OperationDef *)(void *)this,ev,contexts);
		};

		inline _IDL_SEQUENCE_string _get_contexts(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,OperationDef,_get_contexts)
					((OperationDef *)(void *)this,ev);
		};

		inline void operator delete(void *x)
			{ ((SOMObject *)x)->somFree(); };

		inline void * operator new(size_t /* len */)
		{ if (!OperationDefClassData.classObject)
			{ OperationDefNewClass(OperationDef_MajorVersion,OperationDef_MinorVersion); }
			return (void *)SOM_Resolve((SOMObject *)(void *)OperationDefClassData.classObject,
				SOMClass,somNewNoInit)((SOMClass *)(void *)OperationDefClassData.classObject);
		};
		OperationDef()
			: Contained(*(OperationDefCClassData.parentMtab->mtab))
			, Container(*(OperationDefCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==OperationDefCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultInit(0); }
		OperationDef(OperationDef *fromObj)
			: Contained(*(OperationDefCClassData.parentMtab->mtab))
			, Container(*(OperationDefCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==OperationDefCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultCopyInit(0,(SOMObject*)(void*)fromObj); }
		inline void _set_defined_in(
			Environment *ev,
			/* in */ RepositoryId defined_in)
		{
			SOM_Resolve((void *)this,Contained,_set_defined_in)
					((Contained *)(void *)this,ev,defined_in);
		};
		inline RepositoryId _get_defined_in(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_defined_in)
					((Contained *)(void *)this,ev);
		};
		inline void _set_name(
			Environment *ev,
			/* in */ Identifier name)
		{
			SOM_Resolve((void *)this,Contained,_set_name)
					((Contained *)(void *)this,ev,name);
		};
		inline Identifier _get_name(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_name)
					((Contained *)(void *)this,ev);
		};
		inline void _set_id(
			Environment *ev,
			/* in */ RepositoryId id)
		{
			SOM_Resolve((void *)this,Contained,_set_id)
					((Contained *)(void *)this,ev,id);
		};
		inline RepositoryId _get_id(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_id)
					((Contained *)(void *)this,ev);
		};
		inline void _set_somModifiers(
			Environment *ev,
			/* in */ Contained_somModifierSeq *somModifiers)
		{
			SOM_Resolve((void *)this,Contained,_set_somModifiers)
					((Contained *)(void *)this,ev,somModifiers);
		};
		inline Contained_somModifierSeq _get_somModifiers(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,_get_somModifiers)
					((Contained *)(void *)this,ev);
		};
		inline Contained_ContainerSeq within(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,within)
					((Contained *)(void *)this,ev);
		};
		inline Contained_Description describe(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Contained,describe)
					((Contained *)(void *)this,ev);
		};
		inline void somInit(
			)
		{
			SOM_Resolve((void *)this,SOMObject,somInit)
					((SOMObject *)(void *)this);
		};
		inline void somUninit(
			)
		{
			SOM_Resolve((void *)this,SOMObject,somUninit)
					((SOMObject *)(void *)this);
		};
		inline void somFree(
			)
		{
			SOM_Resolve((void *)this,SOMObject,somFree)
					((SOMObject *)(void *)this);
		};
		inline SOMClass * somGetClass(
			)
		{
			return SOM_Resolve((void *)this,SOMObject,somGetClass)
					((SOMObject *)(void *)this);
		};
		inline string somGetClassName(
			)
		{
			return SOM_Resolve((void *)this,SOMObject,somGetClassName)
					((SOMObject *)(void *)this);
		};
		inline long somGetSize(
			)
		{
			return SOM_Resolve((void *)this,SOMObject,somGetSize)
					((SOMObject *)(void *)this);
		};
		inline boolean somIsA(
			/* in */ SOMClass * aClassObj)
		{
			return SOM_Resolve((void *)this,SOMObject,somIsA)
					((SOMObject *)(void *)this,aClassObj);
		};
		inline boolean somIsInstanceOf(
			/* in */ SOMClass * aClassObj)
		{
			return SOM_Resolve((void *)this,SOMObject,somIsInstanceOf)
					((SOMObject *)(void *)this,aClassObj);
		};
		inline boolean somRespondsTo(
			/* in */ somId mId)
		{
			return SOM_Resolve((void *)this,SOMObject,somRespondsTo)
					((SOMObject *)(void *)this,mId);
		};
		inline boolean SOMObject_somDispatch(
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap)
		{
			return SOM_Resolve((void *)this,SOMObject,somDispatch)
					((SOMObject *)(void *)this,retValue,methodId,ap);
		};
		inline boolean somDispatch(
				somToken *retValue,
				somId methodId,
				...)
		{
			boolean _somC_result;
			va_list ap;
			va_start(ap,methodId);
			_somC_result=SOM_Resolve(this,SOMObject,somDispatch)
					((SOMObject *)(void *)this,retValue,methodId,ap);
			va_end(ap);
			return _somC_result;
		};
		inline boolean SOMObject_somClassDispatch(
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap)
		{
			return SOM_Resolve((void *)this,SOMObject,somClassDispatch)
					((SOMObject *)(void *)this,clsObj,retValue,methodId,ap);
		};
		inline boolean somClassDispatch(
				SOMClass * clsObj,
				somToken *retValue,
				somId methodId,
				...)
		{
			boolean _somC_result;
			va_list ap;
			va_start(ap,methodId);
			_somC_result=SOM_Resolve(this,SOMObject,somClassDispatch)
					((SOMObject *)(void *)this,clsObj,retValue,methodId,ap);
			va_end(ap);
			return _somC_result;
		};
		inline boolean somCastObj(
			/* in */ SOMClass * castedCls)
		{
			return SOM_Resolve((void *)this,SOMObject,somCastObj)
					((SOMObject *)(void *)this,castedCls);
		};
		inline boolean somResetObj(
			)
		{
			return SOM_Resolve((void *)this,SOMObject,somResetObj)
					((SOMObject *)(void *)this);
		};
		inline SOMObject * somPrintSelf(
			)
		{
			return SOM_Resolve((void *)this,SOMObject,somPrintSelf)
					((SOMObject *)(void *)this);
		};
		inline void somDumpSelf(
			/* in */ long level)
		{
			SOM_Resolve((void *)this,SOMObject,somDumpSelf)
					((SOMObject *)(void *)this,level);
		};
		inline void somDumpSelfInt(
			/* in */ long level)
		{
			SOM_Resolve((void *)this,SOMObject,somDumpSelfInt)
					((SOMObject *)(void *)this,level);
		};
		inline void somDefaultInit(
			/* inout */ somInitCtrl *ctrl)
		{
			SOM_Resolve((void *)this,SOMObject,somDefaultInit)
					((SOMObject *)(void *)this,ctrl);
		};
		inline void somDefaultCopyInit(
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			SOM_Resolve((void *)this,SOMObject,somDefaultCopyInit)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline void somDefaultConstCopyInit(
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			SOM_Resolve((void *)this,SOMObject,somDefaultConstCopyInit)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline void somDefaultVCopyInit(
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			SOM_Resolve((void *)this,SOMObject,somDefaultVCopyInit)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline void somDefaultConstVCopyInit(
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			SOM_Resolve((void *)this,SOMObject,somDefaultConstVCopyInit)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline SOMObject * somDefaultAssign(
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			return SOM_Resolve((void *)this,SOMObject,somDefaultAssign)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline SOMObject * somDefaultConstAssign(
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			return SOM_Resolve((void *)this,SOMObject,somDefaultConstAssign)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline SOMObject * somDefaultVAssign(
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			return SOM_Resolve((void *)this,SOMObject,somDefaultVAssign)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline SOMObject * somDefaultConstVAssign(
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj)
		{
			return SOM_Resolve((void *)this,SOMObject,somDefaultConstVAssign)
					((SOMObject *)(void *)this,ctrl,fromObj);
		};
		inline void somDestruct(
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl)
		{
			SOM_Resolve((void *)this,SOMObject,somDestruct)
					((SOMObject *)(void *)this,doFree,ctrl);
		};
		inline Container_ContainedSeq contents(
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited)
		{
			return SOM_Resolve((void *)this,Container,contents)
					((Container *)(void *)this,ev,limit_type,exclude_inherited);
		};
		inline Container_ContainedSeq lookup_name(
			Environment *ev,
			/* in */ Identifier search_name,
			/* in */ long levels_to_search,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited)
		{
			return SOM_Resolve((void *)this,Container,lookup_name)
					((Container *)(void *)this,ev,search_name,levels_to_search,limit_type,exclude_inherited);
		};
		inline Container_ContainerDescriptionSeq describe_contents(
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited,
			/* in */ long max_returned_objs)
		{
			return SOM_Resolve((void *)this,Container,describe_contents)
					((Container *)(void *)this,ev,limit_type,exclude_inherited,max_returned_objs);
		};
	};
#endif /* SOM_Module_operatdf_Header_xh */
