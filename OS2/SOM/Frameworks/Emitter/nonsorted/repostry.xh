/* generated from repostry.idl */
/* internal conditional is SOM_Module_repostry_Source */
#ifndef SOM_Module_repostry_Header_xh
	#define SOM_Module_repostry_Header_xh 1
	#include <som.xh>
	#include <somcls.xh>
	#include <somobj.xh>
	#include <containr.xh>
	class M_Repository;
	#ifndef _IDL_SEQUENCE_M_Repository_defined
		#define _IDL_SEQUENCE_M_Repository_defined
		SOM_SEQUENCE_TYPEDEF_NAME(M_Repository * ,sequence(M_Repository));
	#endif /* _IDL_SEQUENCE_M_Repository_defined */
	class Repository;
	#ifndef _IDL_SEQUENCE_Repository_defined
		#define _IDL_SEQUENCE_Repository_defined
		SOM_SEQUENCE_TYPEDEF_NAME(Repository * ,sequence(Repository));
	#endif /* _IDL_SEQUENCE_Repository_defined */
#ifndef M_Repository_API
#define M_Repository_API
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somNew)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somNew,system)
		typedef somTP_M_Repository_somNew *somTD_M_Repository_somNew;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somNew)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somNewNoInit)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somNewNoInit,system)
		typedef somTP_M_Repository_somNewNoInit *somTD_M_Repository_somNewNoInit;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somNewNoInit)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somRenew)(
			M_Repository * somSelf,
			/* in */ void *obj);
		#pragma linkage(somTP_M_Repository_somRenew,system)
		typedef somTP_M_Repository_somRenew *somTD_M_Repository_somRenew;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somRenew)(
			M_Repository * somSelf,
			/* in */ void *obj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somRenewNoInit)(
			M_Repository * somSelf,
			/* in */ void *obj);
		#pragma linkage(somTP_M_Repository_somRenewNoInit,system)
		typedef somTP_M_Repository_somRenewNoInit *somTD_M_Repository_somRenewNoInit;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somRenewNoInit)(
			M_Repository * somSelf,
			/* in */ void *obj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somRenewNoZero)(
			M_Repository * somSelf,
			/* in */ void *obj);
		#pragma linkage(somTP_M_Repository_somRenewNoZero,system)
		typedef somTP_M_Repository_somRenewNoZero *somTD_M_Repository_somRenewNoZero;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somRenewNoZero)(
			M_Repository * somSelf,
			/* in */ void *obj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somRenewNoInitNoZero)(
			M_Repository * somSelf,
			/* in */ void *obj);
		#pragma linkage(somTP_M_Repository_somRenewNoInitNoZero,system)
		typedef somTP_M_Repository_somRenewNoInitNoZero *somTD_M_Repository_somRenewNoInitNoZero;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somRenewNoInitNoZero)(
			M_Repository * somSelf,
			/* in */ void *obj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somToken (somTP_M_Repository_somAllocate)(
			M_Repository * somSelf,
			/* in */ long size);
		#pragma linkage(somTP_M_Repository_somAllocate,system)
		typedef somTP_M_Repository_somAllocate *somTD_M_Repository_somAllocate;
	#else /* __IBMC__ */
		typedef somToken (SOMLINK * somTD_M_Repository_somAllocate)(
			M_Repository * somSelf,
			/* in */ long size);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDeallocate)(
			M_Repository * somSelf,
			/* in */ somToken memptr);
		#pragma linkage(somTP_M_Repository_somDeallocate,system)
		typedef somTP_M_Repository_somDeallocate *somTD_M_Repository_somDeallocate;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDeallocate)(
			M_Repository * somSelf,
			/* in */ somToken memptr);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMClass * (somTP_M_Repository_somGetParent)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetParent,system)
		typedef somTP_M_Repository_somGetParent *somTD_M_Repository_somGetParent;
	#else /* __IBMC__ */
		typedef SOMClass * (SOMLINK * somTD_M_Repository_somGetParent)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMClass * (somTP_M_Repository_somClassOfNewClassWithParents)(
			/* in */ string newClassName,
			/* in */ SOMClass_SOMClassSequence *parents,
			/* in */ SOMClass * explicitMeta);
		#pragma linkage(somTP_M_Repository_somClassOfNewClassWithParents,system)
		typedef somTP_M_Repository_somClassOfNewClassWithParents *somTD_M_Repository_somClassOfNewClassWithParents;
	#else /* __IBMC__ */
		typedef SOMClass * (SOMLINK * somTD_M_Repository_somClassOfNewClassWithParents)(
			/* in */ string newClassName,
			/* in */ SOMClass_SOMClassSequence *parents,
			/* in */ SOMClass * explicitMeta);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somInitClass)(
			M_Repository * somSelf,
			/* in */ string className,
			/* in */ SOMClass * parentClass,
			/* in */ long dataSize,
			/* in */ long maxStaticMethods,
			/* in */ long majorVersion,
			/* in */ long minorVersion);
		#pragma linkage(somTP_M_Repository_somInitClass,system)
		typedef somTP_M_Repository_somInitClass *somTD_M_Repository_somInitClass;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somInitClass)(
			M_Repository * somSelf,
			/* in */ string className,
			/* in */ SOMClass * parentClass,
			/* in */ long dataSize,
			/* in */ long maxStaticMethods,
			/* in */ long majorVersion,
			/* in */ long minorVersion);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somInitMIClass)(
			M_Repository * somSelf,
			/* in */ unsigned long inherit_vars,
			/* in */ string className,
			/* in */ SOMClass_SOMClassSequence *parentClasses,
			/* in */ long dataSize,
			/* in */ long dataAlignment,
			/* in */ long maxNDMethods,
			/* in */ long majorVersion,
			/* in */ long minorVersion);
		#pragma linkage(somTP_M_Repository_somInitMIClass,system)
		typedef somTP_M_Repository_somInitMIClass *somTD_M_Repository_somInitMIClass;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somInitMIClass)(
			M_Repository * somSelf,
			/* in */ unsigned long inherit_vars,
			/* in */ string className,
			/* in */ SOMClass_SOMClassSequence *parentClasses,
			/* in */ long dataSize,
			/* in */ long dataAlignment,
			/* in */ long maxNDMethods,
			/* in */ long majorVersion,
			/* in */ long minorVersion);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMToken (somTP_M_Repository_somAddStaticMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somId methodDescriptor,
			/* in */ somMethodPtr method,
			/* in */ somMethodPtr redispatchStub,
			/* in */ somMethodPtr applyStub);
		#pragma linkage(somTP_M_Repository_somAddStaticMethod,system)
		typedef somTP_M_Repository_somAddStaticMethod *somTD_M_Repository_somAddStaticMethod;
	#else /* __IBMC__ */
		typedef somMToken (SOMLINK * somTD_M_Repository_somAddStaticMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somId methodDescriptor,
			/* in */ somMethodPtr method,
			/* in */ somMethodPtr redispatchStub,
			/* in */ somMethodPtr applyStub);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somOverrideSMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somMethodPtr method);
		#pragma linkage(somTP_M_Repository_somOverrideSMethod,system)
		typedef somTP_M_Repository_somOverrideSMethod *somTD_M_Repository_somOverrideSMethod;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somOverrideSMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somMethodPtr method);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somClassReady)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somClassReady,system)
		typedef somTP_M_Repository_somClassReady *somTD_M_Repository_somClassReady;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somClassReady)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somAddDynamicMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somId methodDescriptor,
			/* in */ somMethodPtr methodImpl,
			/* in */ somMethodPtr applyStub);
		#pragma linkage(somTP_M_Repository_somAddDynamicMethod,system)
		typedef somTP_M_Repository_somAddDynamicMethod *somTD_M_Repository_somAddDynamicMethod;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somAddDynamicMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somId methodDescriptor,
			/* in */ somMethodPtr methodImpl,
			/* in */ somMethodPtr applyStub);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef string (somTP_M_Repository_somGetName)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetName,system)
		typedef somTP_M_Repository_somGetName *somTD_M_Repository_somGetName;
	#else /* __IBMC__ */
		typedef string (SOMLINK * somTD_M_Repository_somGetName)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somGetVersionNumbers)(
			M_Repository * somSelf,
			/* out */ long *majorVersion,
			/* out */ long *minorVersion);
		#pragma linkage(somTP_M_Repository_somGetVersionNumbers,system)
		typedef somTP_M_Repository_somGetVersionNumbers *somTD_M_Repository_somGetVersionNumbers;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somGetVersionNumbers)(
			M_Repository * somSelf,
			/* out */ long *majorVersion,
			/* out */ long *minorVersion);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_M_Repository_somGetNumMethods)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetNumMethods,system)
		typedef somTP_M_Repository_somGetNumMethods *somTD_M_Repository_somGetNumMethods;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_M_Repository_somGetNumMethods)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_M_Repository_somGetNumStaticMethods)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetNumStaticMethods,system)
		typedef somTP_M_Repository_somGetNumStaticMethods *somTD_M_Repository_somGetNumStaticMethods;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_M_Repository_somGetNumStaticMethods)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMClass_SOMClassSequence (somTP_M_Repository_somGetParents)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetParents,system)
		typedef somTP_M_Repository_somGetParents *somTD_M_Repository_somGetParents;
	#else /* __IBMC__ */
		typedef SOMClass_SOMClassSequence (SOMLINK * somTD_M_Repository_somGetParents)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_M_Repository_somGetInstanceSize)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetInstanceSize,system)
		typedef somTP_M_Repository_somGetInstanceSize *somTD_M_Repository_somGetInstanceSize;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_M_Repository_somGetInstanceSize)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_M_Repository_somGetInstancePartSize)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetInstancePartSize,system)
		typedef somTP_M_Repository_somGetInstancePartSize *somTD_M_Repository_somGetInstancePartSize;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_M_Repository_somGetInstancePartSize)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somDToken (somTP_M_Repository_somGetInstanceToken)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetInstanceToken,system)
		typedef somTP_M_Repository_somGetInstanceToken *somTD_M_Repository_somGetInstanceToken;
	#else /* __IBMC__ */
		typedef somDToken (SOMLINK * somTD_M_Repository_somGetInstanceToken)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somDToken (somTP_M_Repository_somGetMemberToken)(
			M_Repository * somSelf,
			/* in */ long memberOffset,
			/* in */ somDToken instanceToken);
		#pragma linkage(somTP_M_Repository_somGetMemberToken,system)
		typedef somTP_M_Repository_somGetMemberToken *somTD_M_Repository_somGetMemberToken;
	#else /* __IBMC__ */
		typedef somDToken (SOMLINK * somTD_M_Repository_somGetMemberToken)(
			M_Repository * somSelf,
			/* in */ long memberOffset,
			/* in */ somDToken instanceToken);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodTab *(somTP_M_Repository_somGetClassMtab)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetClassMtab,system)
		typedef somTP_M_Repository_somGetClassMtab *somTD_M_Repository_somGetClassMtab;
	#else /* __IBMC__ */
		typedef somMethodTab *(SOMLINK * somTD_M_Repository_somGetClassMtab)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somClassDataStructure *(somTP_M_Repository_somGetClassData)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetClassData,system)
		typedef somTP_M_Repository_somGetClassData *somTD_M_Repository_somGetClassData;
	#else /* __IBMC__ */
		typedef somClassDataStructure *(SOMLINK * somTD_M_Repository_somGetClassData)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somSetClassData)(
			M_Repository * somSelf,
			/* in */ somClassDataStructure *cds);
		#pragma linkage(somTP_M_Repository_somSetClassData,system)
		typedef somTP_M_Repository_somSetClassData *somTD_M_Repository_somSetClassData;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somSetClassData)(
			M_Repository * somSelf,
			/* in */ somClassDataStructure *cds);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somSetMethodDescriptor)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somId descriptor);
		#pragma linkage(somTP_M_Repository_somSetMethodDescriptor,system)
		typedef somTP_M_Repository_somSetMethodDescriptor *somTD_M_Repository_somSetMethodDescriptor;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somSetMethodDescriptor)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* in */ somId descriptor);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somDataAlignment
		#error somTD_M_Repository__get_somDataAlignment already defined
	#else /* somTD_M_Repository__get_somDataAlignment */
		#define somTD_M_Repository__get_somDataAlignment somTD_M_Repository_somC_get_somDataAlignment
	#endif /* somTD_M_Repository__get_somDataAlignment */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_M_Repository__get_somDataAlignment
		#error somTP_M_Repository__get_somDataAlignment already defined
	#else /* somTP_M_Repository__get_somDataAlignment */
		#define somTP_M_Repository__get_somDataAlignment somTP_M_Repository_somC_get_somDataAlignment
	#endif /* somTP_M_Repository__get_somDataAlignment */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef long (somTP_M_Repository__get_somDataAlignment)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository__get_somDataAlignment,system)
		typedef somTP_M_Repository__get_somDataAlignment *somTD_M_Repository__get_somDataAlignment;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somDataAlignment
		#error somTD_M_Repository__get_somDataAlignment already defined
	#else /* somTD_M_Repository__get_somDataAlignment */
		#define somTD_M_Repository__get_somDataAlignment somTD_M_Repository_somC_get_somDataAlignment
	#endif /* somTD_M_Repository__get_somDataAlignment */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef long (SOMLINK * somTD_M_Repository__get_somDataAlignment)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somInstanceDataOffsets
		#error somTD_M_Repository__get_somInstanceDataOffsets already defined
	#else /* somTD_M_Repository__get_somInstanceDataOffsets */
		#define somTD_M_Repository__get_somInstanceDataOffsets somTD_M_Repository_somC_get_somInstanceDataOffsets
	#endif /* somTD_M_Repository__get_somInstanceDataOffsets */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_M_Repository__get_somInstanceDataOffsets
		#error somTP_M_Repository__get_somInstanceDataOffsets already defined
	#else /* somTP_M_Repository__get_somInstanceDataOffsets */
		#define somTP_M_Repository__get_somInstanceDataOffsets somTP_M_Repository_somC_get_somInstanceDataOffsets
	#endif /* somTP_M_Repository__get_somInstanceDataOffsets */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef SOMClass_somOffsets (somTP_M_Repository__get_somInstanceDataOffsets)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository__get_somInstanceDataOffsets,system)
		typedef somTP_M_Repository__get_somInstanceDataOffsets *somTD_M_Repository__get_somInstanceDataOffsets;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somInstanceDataOffsets
		#error somTD_M_Repository__get_somInstanceDataOffsets already defined
	#else /* somTD_M_Repository__get_somInstanceDataOffsets */
		#define somTD_M_Repository__get_somInstanceDataOffsets somTD_M_Repository_somC_get_somInstanceDataOffsets
	#endif /* somTD_M_Repository__get_somInstanceDataOffsets */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef SOMClass_somOffsets (SOMLINK * somTD_M_Repository__get_somInstanceDataOffsets)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__set_somDirectInitClasses
		#error somTD_M_Repository__set_somDirectInitClasses already defined
	#else /* somTD_M_Repository__set_somDirectInitClasses */
		#define somTD_M_Repository__set_somDirectInitClasses somTD_M_Repository_somC_set_somDirectInitClasses
	#endif /* somTD_M_Repository__set_somDirectInitClasses */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_M_Repository__set_somDirectInitClasses
		#error somTP_M_Repository__set_somDirectInitClasses already defined
	#else /* somTP_M_Repository__set_somDirectInitClasses */
		#define somTP_M_Repository__set_somDirectInitClasses somTP_M_Repository_somC_set_somDirectInitClasses
	#endif /* somTP_M_Repository__set_somDirectInitClasses */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (somTP_M_Repository__set_somDirectInitClasses)(
			M_Repository * somSelf,
			/* in */ SOMClass_SOMClassSequence *somDirectInitClasses);
		#pragma linkage(somTP_M_Repository__set_somDirectInitClasses,system)
		typedef somTP_M_Repository__set_somDirectInitClasses *somTD_M_Repository__set_somDirectInitClasses;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__set_somDirectInitClasses
		#error somTD_M_Repository__set_somDirectInitClasses already defined
	#else /* somTD_M_Repository__set_somDirectInitClasses */
		#define somTD_M_Repository__set_somDirectInitClasses somTD_M_Repository_somC_set_somDirectInitClasses
	#endif /* somTD_M_Repository__set_somDirectInitClasses */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef void (SOMLINK * somTD_M_Repository__set_somDirectInitClasses)(
			M_Repository * somSelf,
			/* in */ SOMClass_SOMClassSequence *somDirectInitClasses);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somDirectInitClasses
		#error somTD_M_Repository__get_somDirectInitClasses already defined
	#else /* somTD_M_Repository__get_somDirectInitClasses */
		#define somTD_M_Repository__get_somDirectInitClasses somTD_M_Repository_somC_get_somDirectInitClasses
	#endif /* somTD_M_Repository__get_somDirectInitClasses */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_M_Repository__get_somDirectInitClasses
		#error somTP_M_Repository__get_somDirectInitClasses already defined
	#else /* somTP_M_Repository__get_somDirectInitClasses */
		#define somTP_M_Repository__get_somDirectInitClasses somTP_M_Repository_somC_get_somDirectInitClasses
	#endif /* somTP_M_Repository__get_somDirectInitClasses */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef SOMClass_SOMClassSequence (somTP_M_Repository__get_somDirectInitClasses)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository__get_somDirectInitClasses,system)
		typedef somTP_M_Repository__get_somDirectInitClasses *somTD_M_Repository__get_somDirectInitClasses;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somDirectInitClasses
		#error somTD_M_Repository__get_somDirectInitClasses already defined
	#else /* somTD_M_Repository__get_somDirectInitClasses */
		#define somTD_M_Repository__get_somDirectInitClasses somTD_M_Repository_somC_get_somDirectInitClasses
	#endif /* somTD_M_Repository__get_somDirectInitClasses */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef SOMClass_SOMClassSequence (SOMLINK * somTD_M_Repository__get_somDirectInitClasses)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somId (somTP_M_Repository_somGetMethodDescriptor)(
			M_Repository * somSelf,
			/* in */ somId methodId);
		#pragma linkage(somTP_M_Repository_somGetMethodDescriptor,system)
		typedef somTP_M_Repository_somGetMethodDescriptor *somTD_M_Repository_somGetMethodDescriptor;
	#else /* __IBMC__ */
		typedef somId (SOMLINK * somTD_M_Repository_somGetMethodDescriptor)(
			M_Repository * somSelf,
			/* in */ somId methodId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_M_Repository_somGetMethodIndex)(
			M_Repository * somSelf,
			/* in */ somId id);
		#pragma linkage(somTP_M_Repository_somGetMethodIndex,system)
		typedef somTP_M_Repository_somGetMethodIndex *somTD_M_Repository_somGetMethodIndex;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_M_Repository_somGetMethodIndex)(
			M_Repository * somSelf,
			/* in */ somId id);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMToken (somTP_M_Repository_somGetMethodToken)(
			M_Repository * somSelf,
			/* in */ somId methodId);
		#pragma linkage(somTP_M_Repository_somGetMethodToken,system)
		typedef somTP_M_Repository_somGetMethodToken *somTD_M_Repository_somGetMethodToken;
	#else /* __IBMC__ */
		typedef somMToken (SOMLINK * somTD_M_Repository_somGetMethodToken)(
			M_Repository * somSelf,
			/* in */ somId methodId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somId (somTP_M_Repository_somGetNthMethodInfo)(
			M_Repository * somSelf,
			/* in */ long n,
			/* out */ somId *descriptor);
		#pragma linkage(somTP_M_Repository_somGetNthMethodInfo,system)
		typedef somTP_M_Repository_somGetNthMethodInfo *somTD_M_Repository_somGetNthMethodInfo;
	#else /* __IBMC__ */
		typedef somId (SOMLINK * somTD_M_Repository_somGetNthMethodInfo)(
			M_Repository * somSelf,
			/* in */ long n,
			/* out */ somId *descriptor);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somGetMethodData)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* out */ somMethodData *md);
		#pragma linkage(somTP_M_Repository_somGetMethodData,system)
		typedef somTP_M_Repository_somGetMethodData *somTD_M_Repository_somGetMethodData;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somGetMethodData)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* out */ somMethodData *md);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somGetNthMethodData)(
			M_Repository * somSelf,
			/* in */ long n,
			/* out */ somMethodData *md);
		#pragma linkage(somTP_M_Repository_somGetNthMethodData,system)
		typedef somTP_M_Repository_somGetNthMethodData *somTD_M_Repository_somGetNthMethodData;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somGetNthMethodData)(
			M_Repository * somSelf,
			/* in */ long n,
			/* out */ somMethodData *md);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somFindMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* out */ somMethodPtr *m);
		#pragma linkage(somTP_M_Repository_somFindMethod,system)
		typedef somTP_M_Repository_somFindMethod *somTD_M_Repository_somFindMethod;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somFindMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* out */ somMethodPtr *m);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somFindMethodOk)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* out */ somMethodPtr *m);
		#pragma linkage(somTP_M_Repository_somFindMethodOk,system)
		typedef somTP_M_Repository_somFindMethodOk *somTD_M_Repository_somFindMethodOk;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somFindMethodOk)(
			M_Repository * somSelf,
			/* in */ somId methodId,
			/* out */ somMethodPtr *m);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodPtr (somTP_M_Repository_somFindSMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId);
		#pragma linkage(somTP_M_Repository_somFindSMethod,system)
		typedef somTP_M_Repository_somFindSMethod *somTD_M_Repository_somFindSMethod;
	#else /* __IBMC__ */
		typedef somMethodPtr (SOMLINK * somTD_M_Repository_somFindSMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodPtr (somTP_M_Repository_somFindSMethodOk)(
			M_Repository * somSelf,
			/* in */ somId methodId);
		#pragma linkage(somTP_M_Repository_somFindSMethodOk,system)
		typedef somTP_M_Repository_somFindSMethodOk *somTD_M_Repository_somFindSMethodOk;
	#else /* __IBMC__ */
		typedef somMethodPtr (SOMLINK * somTD_M_Repository_somFindSMethodOk)(
			M_Repository * somSelf,
			/* in */ somId methodId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodPtr (somTP_M_Repository_somLookupMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId);
		#pragma linkage(somTP_M_Repository_somLookupMethod,system)
		typedef somTP_M_Repository_somLookupMethod *somTD_M_Repository_somLookupMethod;
	#else /* __IBMC__ */
		typedef somMethodPtr (SOMLINK * somTD_M_Repository_somLookupMethod)(
			M_Repository * somSelf,
			/* in */ somId methodId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodPtr (somTP_M_Repository_somGetApplyStub)(
			M_Repository * somSelf,
			/* in */ somId methodId);
		#pragma linkage(somTP_M_Repository_somGetApplyStub,system)
		typedef somTP_M_Repository_somGetApplyStub *somTD_M_Repository_somGetApplyStub;
	#else /* __IBMC__ */
		typedef somMethodPtr (SOMLINK * somTD_M_Repository_somGetApplyStub)(
			M_Repository * somSelf,
			/* in */ somId methodId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodTabs (somTP_M_Repository_somGetPClsMtab)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetPClsMtab,system)
		typedef somTP_M_Repository_somGetPClsMtab *somTD_M_Repository_somGetPClsMtab;
	#else /* __IBMC__ */
		typedef somMethodTabs (SOMLINK * somTD_M_Repository_somGetPClsMtab)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somCheckVersion)(
			M_Repository * somSelf,
			/* in */ long majorVersion,
			/* in */ long minorVersion);
		#pragma linkage(somTP_M_Repository_somCheckVersion,system)
		typedef somTP_M_Repository_somCheckVersion *somTD_M_Repository_somCheckVersion;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somCheckVersion)(
			M_Repository * somSelf,
			/* in */ long majorVersion,
			/* in */ long minorVersion);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somDescendedFrom)(
			M_Repository * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_M_Repository_somDescendedFrom,system)
		typedef somTP_M_Repository_somDescendedFrom *somTD_M_Repository_somDescendedFrom;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somDescendedFrom)(
			M_Repository * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somSupportsMethod)(
			M_Repository * somSelf,
			/* in */ somId mId);
		#pragma linkage(somTP_M_Repository_somSupportsMethod,system)
		typedef somTP_M_Repository_somSupportsMethod *somTD_M_Repository_somSupportsMethod;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somSupportsMethod)(
			M_Repository * somSelf,
			/* in */ somId mId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodPtr (somTP_M_Repository_somDefinedMethod)(
			M_Repository * somSelf,
			/* in */ somMToken method);
		#pragma linkage(somTP_M_Repository_somDefinedMethod,system)
		typedef somTP_M_Repository_somDefinedMethod *somTD_M_Repository_somDefinedMethod;
	#else /* __IBMC__ */
		typedef somMethodPtr (SOMLINK * somTD_M_Repository_somDefinedMethod)(
			M_Repository * somSelf,
			/* in */ somMToken method);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef somMethodProc *(somTP_M_Repository_somGetRdStub)(
			M_Repository * somSelf,
			/* in */ somId methodId);
		#pragma linkage(somTP_M_Repository_somGetRdStub,system)
		typedef somTP_M_Repository_somGetRdStub *somTD_M_Repository_somGetRdStub;
	#else /* __IBMC__ */
		typedef somMethodProc *(SOMLINK * somTD_M_Repository_somGetRdStub)(
			M_Repository * somSelf,
			/* in */ somId methodId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somOverrideMtab)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somOverrideMtab,system)
		typedef somTP_M_Repository_somOverrideMtab *somTD_M_Repository_somOverrideMtab;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somOverrideMtab)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somClassAllocate
		#error somTD_M_Repository__get_somClassAllocate already defined
	#else /* somTD_M_Repository__get_somClassAllocate */
		#define somTD_M_Repository__get_somClassAllocate somTD_M_Repository_somC_get_somClassAllocate
	#endif /* somTD_M_Repository__get_somClassAllocate */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_M_Repository__get_somClassAllocate
		#error somTP_M_Repository__get_somClassAllocate already defined
	#else /* somTP_M_Repository__get_somClassAllocate */
		#define somTP_M_Repository__get_somClassAllocate somTP_M_Repository_somC_get_somClassAllocate
	#endif /* somTP_M_Repository__get_somClassAllocate */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef somMethodPtr (somTP_M_Repository__get_somClassAllocate)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository__get_somClassAllocate,system)
		typedef somTP_M_Repository__get_somClassAllocate *somTD_M_Repository__get_somClassAllocate;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somClassAllocate
		#error somTD_M_Repository__get_somClassAllocate already defined
	#else /* somTD_M_Repository__get_somClassAllocate */
		#define somTD_M_Repository__get_somClassAllocate somTD_M_Repository_somC_get_somClassAllocate
	#endif /* somTD_M_Repository__get_somClassAllocate */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef somMethodPtr (SOMLINK * somTD_M_Repository__get_somClassAllocate)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somClassDeallocate
		#error somTD_M_Repository__get_somClassDeallocate already defined
	#else /* somTD_M_Repository__get_somClassDeallocate */
		#define somTD_M_Repository__get_somClassDeallocate somTD_M_Repository_somC_get_somClassDeallocate
	#endif /* somTD_M_Repository__get_somClassDeallocate */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTP_M_Repository__get_somClassDeallocate
		#error somTP_M_Repository__get_somClassDeallocate already defined
	#else /* somTP_M_Repository__get_somClassDeallocate */
		#define somTP_M_Repository__get_somClassDeallocate somTP_M_Repository_somC_get_somClassDeallocate
	#endif /* somTP_M_Repository__get_somClassDeallocate */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef somMethodPtr (somTP_M_Repository__get_somClassDeallocate)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository__get_somClassDeallocate,system)
		typedef somTP_M_Repository__get_somClassDeallocate *somTD_M_Repository__get_somClassDeallocate;
	#else /* __IBMC__ */
#ifdef SOM_AVOID_DOUBLE_UNDERSCORES
	#ifdef somTD_M_Repository__get_somClassDeallocate
		#error somTD_M_Repository__get_somClassDeallocate already defined
	#else /* somTD_M_Repository__get_somClassDeallocate */
		#define somTD_M_Repository__get_somClassDeallocate somTD_M_Repository_somC_get_somClassDeallocate
	#endif /* somTD_M_Repository__get_somClassDeallocate */
#endif /* SOM_AVOID_DOUBLE_UNDERSCORES */
		typedef somMethodPtr (SOMLINK * somTD_M_Repository__get_somClassDeallocate)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somInit)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somInit,system)
		typedef somTP_M_Repository_somInit *somTD_M_Repository_somInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somInit)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somUninit)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somUninit,system)
		typedef somTP_M_Repository_somUninit *somTD_M_Repository_somUninit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somUninit)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somFree)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somFree,system)
		typedef somTP_M_Repository_somFree *somTD_M_Repository_somFree;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somFree)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMClass * (somTP_M_Repository_somGetClass)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetClass,system)
		typedef somTP_M_Repository_somGetClass *somTD_M_Repository_somGetClass;
	#else /* __IBMC__ */
		typedef SOMClass * (SOMLINK * somTD_M_Repository_somGetClass)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef string (somTP_M_Repository_somGetClassName)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetClassName,system)
		typedef somTP_M_Repository_somGetClassName *somTD_M_Repository_somGetClassName;
	#else /* __IBMC__ */
		typedef string (SOMLINK * somTD_M_Repository_somGetClassName)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_M_Repository_somGetSize)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somGetSize,system)
		typedef somTP_M_Repository_somGetSize *somTD_M_Repository_somGetSize;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_M_Repository_somGetSize)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somIsA)(
			M_Repository * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_M_Repository_somIsA,system)
		typedef somTP_M_Repository_somIsA *somTD_M_Repository_somIsA;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somIsA)(
			M_Repository * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somIsInstanceOf)(
			M_Repository * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_M_Repository_somIsInstanceOf,system)
		typedef somTP_M_Repository_somIsInstanceOf *somTD_M_Repository_somIsInstanceOf;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somIsInstanceOf)(
			M_Repository * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somRespondsTo)(
			M_Repository * somSelf,
			/* in */ somId mId);
		#pragma linkage(somTP_M_Repository_somRespondsTo,system)
		typedef somTP_M_Repository_somRespondsTo *somTD_M_Repository_somRespondsTo;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somRespondsTo)(
			M_Repository * somSelf,
			/* in */ somId mId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somDispatch)(
			M_Repository * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_M_Repository_somDispatch,system)
		typedef somTP_M_Repository_somDispatch *somTD_M_Repository_somDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somDispatch)(
			M_Repository * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somClassDispatch)(
			M_Repository * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_M_Repository_somClassDispatch,system)
		typedef somTP_M_Repository_somClassDispatch *somTD_M_Repository_somClassDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somClassDispatch)(
			M_Repository * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somCastObj)(
			M_Repository * somSelf,
			/* in */ SOMClass * castedCls);
		#pragma linkage(somTP_M_Repository_somCastObj,system)
		typedef somTP_M_Repository_somCastObj *somTD_M_Repository_somCastObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somCastObj)(
			M_Repository * somSelf,
			/* in */ SOMClass * castedCls);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_M_Repository_somResetObj)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somResetObj,system)
		typedef somTP_M_Repository_somResetObj *somTD_M_Repository_somResetObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_M_Repository_somResetObj)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somPrintSelf)(
			M_Repository * somSelf);
		#pragma linkage(somTP_M_Repository_somPrintSelf,system)
		typedef somTP_M_Repository_somPrintSelf *somTD_M_Repository_somPrintSelf;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somPrintSelf)(
			M_Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDumpSelf)(
			M_Repository * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_M_Repository_somDumpSelf,system)
		typedef somTP_M_Repository_somDumpSelf *somTD_M_Repository_somDumpSelf;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDumpSelf)(
			M_Repository * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDumpSelfInt)(
			M_Repository * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_M_Repository_somDumpSelfInt,system)
		typedef somTP_M_Repository_somDumpSelfInt *somTD_M_Repository_somDumpSelfInt;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDumpSelfInt)(
			M_Repository * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDefaultInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl);
		#pragma linkage(somTP_M_Repository_somDefaultInit,system)
		typedef somTP_M_Repository_somDefaultInit *somTD_M_Repository_somDefaultInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDefaultInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDefaultCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultCopyInit,system)
		typedef somTP_M_Repository_somDefaultCopyInit *somTD_M_Repository_somDefaultCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDefaultCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDefaultConstCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultConstCopyInit,system)
		typedef somTP_M_Repository_somDefaultConstCopyInit *somTD_M_Repository_somDefaultConstCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDefaultConstCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDefaultVCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultVCopyInit,system)
		typedef somTP_M_Repository_somDefaultVCopyInit *somTD_M_Repository_somDefaultVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDefaultVCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDefaultConstVCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultConstVCopyInit,system)
		typedef somTP_M_Repository_somDefaultConstVCopyInit *somTD_M_Repository_somDefaultConstVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDefaultConstVCopyInit)(
			M_Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somDefaultAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultAssign,system)
		typedef somTP_M_Repository_somDefaultAssign *somTD_M_Repository_somDefaultAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somDefaultAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somDefaultConstAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultConstAssign,system)
		typedef somTP_M_Repository_somDefaultConstAssign *somTD_M_Repository_somDefaultConstAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somDefaultConstAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somDefaultVAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultVAssign,system)
		typedef somTP_M_Repository_somDefaultVAssign *somTD_M_Repository_somDefaultVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somDefaultVAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_M_Repository_somDefaultConstVAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_M_Repository_somDefaultConstVAssign,system)
		typedef somTP_M_Repository_somDefaultConstVAssign *somTD_M_Repository_somDefaultConstVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_M_Repository_somDefaultConstVAssign)(
			M_Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_M_Repository_somDestruct)(
			M_Repository * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
		#pragma linkage(somTP_M_Repository_somDestruct,system)
		typedef somTP_M_Repository_somDestruct *somTD_M_Repository_somDestruct;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_M_Repository_somDestruct)(
			M_Repository * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
	#ifndef M_Repository_MajorVersion
		#define M_Repository_MajorVersion   2
	#endif /* M_Repository_MajorVersion */
	#ifndef M_Repository_MinorVersion
		#define M_Repository_MinorVersion   1
	#endif /* M_Repository_MinorVersion */
	typedef struct M_RepositoryClassDataStructure
	{
		SOMClass * classObject;
	} M_RepositoryClassDataStructure;
	typedef struct M_RepositoryCClassDataStructure
	{
		somMethodTabs parentMtab;
		somDToken instanceDataToken;
	} M_RepositoryCClassDataStructure;
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_repostry_Source) || defined(M_Repository_Class_Source)
			SOMEXTERN struct M_RepositoryClassDataStructure _M_RepositoryClassData;
			#ifndef M_RepositoryClassData
				#define M_RepositoryClassData    _M_RepositoryClassData
			#endif /* M_RepositoryClassData */
		#else
			SOMEXTERN struct M_RepositoryClassDataStructure * SOMLINK resolve_M_RepositoryClassData(void);
			#ifndef M_RepositoryClassData
				#define M_RepositoryClassData    (*(resolve_M_RepositoryClassData()))
			#endif /* M_RepositoryClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_repostry_Source) || defined(M_Repository_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_repostry_Source || M_Repository_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_repostry_Source || M_Repository_Class_Source */
		struct M_RepositoryClassDataStructure SOMDLINK M_RepositoryClassData;
	#endif /* SOM_RESOLVE_DATA */
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_repostry_Source) || defined(M_Repository_Class_Source)
			SOMEXTERN struct M_RepositoryCClassDataStructure _M_RepositoryCClassData;
			#ifndef M_RepositoryCClassData
				#define M_RepositoryCClassData    _M_RepositoryCClassData
			#endif /* M_RepositoryCClassData */
		#else
			SOMEXTERN struct M_RepositoryCClassDataStructure * SOMLINK resolve_M_RepositoryCClassData(void);
			#ifndef M_RepositoryCClassData
				#define M_RepositoryCClassData    (*(resolve_M_RepositoryCClassData()))
			#endif /* M_RepositoryCClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_repostry_Source) || defined(M_Repository_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_repostry_Source || M_Repository_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_repostry_Source || M_Repository_Class_Source */
		struct M_RepositoryCClassDataStructure SOMDLINK M_RepositoryCClassData;
	#endif /* SOM_RESOLVE_DATA */
	extern "C" {
	extern 
	#if defined(SOM_Module_repostry_Source) || defined(M_Repository_Class_Source)
		#ifdef SOMDLLEXPORT
			SOMDLLEXPORT
		#endif /* SOMDLLEXPORT */
	#else /* SOM_Module_repostry_Source || M_Repository_Class_Source */
		#ifdef SOMDLLIMPORT
			SOMDLLIMPORT
		#endif /* SOMDLLIMPORT */
	#endif /* SOM_Module_repostry_Source || M_Repository_Class_Source */
	SOMClass * SOMLINK M_RepositoryNewClass
			(integer4 somtmajorVersion,integer4 somtminorVersion);
	}
	#define _SOMCLASS_M_Repository (M_RepositoryClassData.classObject)
	#ifndef SOMGD_M_Repository
		#if (defined(_M_Repository) || defined(__M_Repository))
			#undef _M_Repository
			#undef __M_Repository
			#define SOMGD_M_Repository 1
		#else
			#define _M_Repository _SOMCLASS_M_Repository
		#endif /* _M_Repository */
	#endif /* SOMGD_M_Repository */
	#define M_Repository_classObj _SOMCLASS_M_Repository
	#define _SOMMTOKEN_M_Repository(method) ((somMToken)(M_RepositoryClassData.method))
#endif /* M_Repository_API */

	class M_Repository : public SOMClass
	{
	protected:
		M_Repository(somMethodTab & mtab)
			: SOMClass(mtab)
		{}
	public:

		inline void operator delete(void *x)
			{ ((SOMObject *)x)->somFree(); };

		inline void * operator new(size_t /* len */)
		{ if (!M_RepositoryClassData.classObject)
			{ M_RepositoryNewClass(M_Repository_MajorVersion,M_Repository_MinorVersion); }
			return (void *)SOM_Resolve((SOMObject *)(void *)M_RepositoryClassData.classObject,
				SOMClass,somNewNoInit)((SOMClass *)(void *)M_RepositoryClassData.classObject);
		};
		M_Repository()
			: SOMClass(*(M_RepositoryCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==M_RepositoryCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultInit(0); }
		M_Repository(M_Repository *fromObj)
			: SOMClass(*(M_RepositoryCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==M_RepositoryCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultCopyInit(0,(SOMObject*)(void*)fromObj); }
		inline Repository * somNew()
		{
			return (Repository *)(void *)SOM_Resolve(this,SOMClass,somNew)
				((SOMClass *)(void *)this);
		}
	};
#ifndef Repository_API
#define Repository_API
	typedef struct Repository_RepositoryDescription
	{
		Identifier name;
		string id;
		string defined_in;
	} Repository_RepositoryDescription;
	#ifndef _IDL_SEQUENCE_Repository_RepositoryDescription_defined
		#define _IDL_SEQUENCE_Repository_RepositoryDescription_defined
		SOM_SEQUENCE_TYPEDEF(Repository_RepositoryDescription);
	#endif /* _IDL_SEQUENCE_Repository_RepositoryDescription_defined */
	#ifndef SOM_DONT_USE_SHORT_NAMES
		#ifndef SOMGD_RepositoryDescription
			#if defined(RepositoryDescription)
				#undef RepositoryDescription
				#define SOMGD_RepositoryDescription
			#else
				#define RepositoryDescription Repository_RepositoryDescription
			#endif
		#endif /* SOMGD_RepositoryDescription */
	#endif /* SOM_DONT_USE_SHORT_NAMES */
	#ifndef SOM_DONT_USE_SHORT_NAMES
		#ifndef _IDL_SEQUENCE_RepositoryDescription_defined
			#define _IDL_SEQUENCE_RepositoryDescription_defined
			#define _IDL_SEQUENCE_RepositoryDescription _IDL_SEQUENCE_Repository_RepositoryDescription
		#endif /* _IDL_SEQUENCE_RepositoryDescription_defined */
	#endif /* SOM_DONT_USE_SHORT_NAMES */
	#ifndef Repository_irOpenErrorCodes_defined
		#define Repository_irOpenErrorCodes_defined
		typedef unsigned long Repository_irOpenErrorCodes;
		#ifndef Repository_NOACCESS
			#define Repository_NOACCESS 1UL
		#endif /* Repository_NOACCESS */
		#ifndef Repository_BADMAGICNUMBER
			#define Repository_BADMAGICNUMBER 2UL
		#endif /* Repository_BADMAGICNUMBER */
		#ifndef Repository_MISSINGVERSIONINFO
			#define Repository_MISSINGVERSIONINFO 3UL
		#endif /* Repository_MISSINGVERSIONINFO */
		#ifndef Repository_IOERROR
			#define Repository_IOERROR 4UL
		#endif /* Repository_IOERROR */
		#ifndef Repository_VERSIONMISMATCH
			#define Repository_VERSIONMISMATCH 5UL
		#endif /* Repository_VERSIONMISMATCH */
		#ifndef Repository_NOWRITEACCESS
			#define Repository_NOWRITEACCESS 6UL
		#endif /* Repository_NOWRITEACCESS */
		#ifndef Repository_INDEXINCONSISTENT
			#define Repository_INDEXINCONSISTENT 7UL
		#endif /* Repository_INDEXINCONSISTENT */
		#ifndef Repository_INDEXNOTPRESENT
			#define Repository_INDEXNOTPRESENT 8UL
		#endif /* Repository_INDEXNOTPRESENT */
		#ifndef SOM_DONT_USE_SHORT_NAMES
			#ifndef SOMGD_irOpenErrorCodes
				#if defined(irOpenErrorCodes)
					#undef irOpenErrorCodes
					#define SOMGD_irOpenErrorCodes
				#else
					#define irOpenErrorCodes Repository_irOpenErrorCodes
				#endif
			#endif /* SOMGD_irOpenErrorCodes */
		#endif /* SOM_DONT_USE_SHORT_NAMES */
	#endif /* Repository_irOpenErrorCodes_defined */
#define ex_Repository_irOpenError   "::Repository::irOpenError"
#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ex_irOpenError
#ifndef ex_irOpenError
#define ex_irOpenError  ex_Repository_irOpenError
#else
#define SOMTGD_ex_irOpenError
#undef ex_irOpenError
#endif /* ex_irOpenError */
#endif /* SOMTGD_ex_irOpenError */
#endif /* SOM_DONT_USE_SHORT_NAMES */
typedef struct Repository_irOpenError
{
	Repository_irOpenErrorCodes errorCode;
	string fileName;
} Repository_irOpenError;
#ifndef SOM_DONT_USE_SHORT_NAMES
	#ifndef SOMGD_irOpenError
		#if defined(irOpenError)
			#undef irOpenError
			#define SOMGD_irOpenError
		#else
			#define irOpenError Repository_irOpenError
		#endif
	#endif /* SOMGD_irOpenError */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Contained * (somTP_Repository_lookup_id)(
			Repository * somSelf,
			Environment *ev,
			/* in */ string search_id);
		#pragma linkage(somTP_Repository_lookup_id,system)
		typedef somTP_Repository_lookup_id *somTD_Repository_lookup_id;
	#else /* __IBMC__ */
		typedef Contained * (SOMLINK * somTD_Repository_lookup_id)(
			Repository * somSelf,
			Environment *ev,
			/* in */ string search_id);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef string (somTP_Repository_lookup_modifier)(
			Repository * somSelf,
			Environment *ev,
			/* in */ string name,
			/* in */ string modifier);
		#pragma linkage(somTP_Repository_lookup_modifier,system)
		typedef somTP_Repository_lookup_modifier *somTD_Repository_lookup_modifier;
	#else /* __IBMC__ */
		typedef string (SOMLINK * somTD_Repository_lookup_modifier)(
			Repository * somSelf,
			Environment *ev,
			/* in */ string name,
			/* in */ string modifier);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_release_cache)(
			Repository * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Repository_release_cache,system)
		typedef somTP_Repository_release_cache *somTD_Repository_release_cache;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_release_cache)(
			Repository * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_queryException)(
			Repository * somSelf,
			Environment *ev);
		#pragma linkage(somTP_Repository_queryException,system)
		typedef somTP_Repository_queryException *somTD_Repository_queryException;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_queryException)(
			Repository * somSelf,
			Environment *ev);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Container_ContainedSeq (somTP_Repository_contents)(
			Repository * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
		#pragma linkage(somTP_Repository_contents,system)
		typedef somTP_Repository_contents *somTD_Repository_contents;
	#else /* __IBMC__ */
		typedef Container_ContainedSeq (SOMLINK * somTD_Repository_contents)(
			Repository * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Container_ContainedSeq (somTP_Repository_lookup_name)(
			Repository * somSelf,
			Environment *ev,
			/* in */ Identifier search_name,
			/* in */ long levels_to_search,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
		#pragma linkage(somTP_Repository_lookup_name,system)
		typedef somTP_Repository_lookup_name *somTD_Repository_lookup_name;
	#else /* __IBMC__ */
		typedef Container_ContainedSeq (SOMLINK * somTD_Repository_lookup_name)(
			Repository * somSelf,
			Environment *ev,
			/* in */ Identifier search_name,
			/* in */ long levels_to_search,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef Container_ContainerDescriptionSeq (somTP_Repository_describe_contents)(
			Repository * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited,
			/* in */ long max_returned_objs);
		#pragma linkage(somTP_Repository_describe_contents,system)
		typedef somTP_Repository_describe_contents *somTD_Repository_describe_contents;
	#else /* __IBMC__ */
		typedef Container_ContainerDescriptionSeq (SOMLINK * somTD_Repository_describe_contents)(
			Repository * somSelf,
			Environment *ev,
			/* in */ Container_InterfaceName limit_type,
			/* in */ boolean exclude_inherited,
			/* in */ long max_returned_objs);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somInit)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somInit,system)
		typedef somTP_Repository_somInit *somTD_Repository_somInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somInit)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somUninit)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somUninit,system)
		typedef somTP_Repository_somUninit *somTD_Repository_somUninit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somUninit)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somFree)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somFree,system)
		typedef somTP_Repository_somFree *somTD_Repository_somFree;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somFree)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMClass * (somTP_Repository_somGetClass)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somGetClass,system)
		typedef somTP_Repository_somGetClass *somTD_Repository_somGetClass;
	#else /* __IBMC__ */
		typedef SOMClass * (SOMLINK * somTD_Repository_somGetClass)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef string (somTP_Repository_somGetClassName)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somGetClassName,system)
		typedef somTP_Repository_somGetClassName *somTD_Repository_somGetClassName;
	#else /* __IBMC__ */
		typedef string (SOMLINK * somTD_Repository_somGetClassName)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef long (somTP_Repository_somGetSize)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somGetSize,system)
		typedef somTP_Repository_somGetSize *somTD_Repository_somGetSize;
	#else /* __IBMC__ */
		typedef long (SOMLINK * somTD_Repository_somGetSize)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_somIsA)(
			Repository * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_Repository_somIsA,system)
		typedef somTP_Repository_somIsA *somTD_Repository_somIsA;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_somIsA)(
			Repository * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_somIsInstanceOf)(
			Repository * somSelf,
			/* in */ SOMClass * aClassObj);
		#pragma linkage(somTP_Repository_somIsInstanceOf,system)
		typedef somTP_Repository_somIsInstanceOf *somTD_Repository_somIsInstanceOf;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_somIsInstanceOf)(
			Repository * somSelf,
			/* in */ SOMClass * aClassObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_somRespondsTo)(
			Repository * somSelf,
			/* in */ somId mId);
		#pragma linkage(somTP_Repository_somRespondsTo,system)
		typedef somTP_Repository_somRespondsTo *somTD_Repository_somRespondsTo;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_somRespondsTo)(
			Repository * somSelf,
			/* in */ somId mId);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_somDispatch)(
			Repository * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_Repository_somDispatch,system)
		typedef somTP_Repository_somDispatch *somTD_Repository_somDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_somDispatch)(
			Repository * somSelf,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_somClassDispatch)(
			Repository * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
		#pragma linkage(somTP_Repository_somClassDispatch,system)
		typedef somTP_Repository_somClassDispatch *somTD_Repository_somClassDispatch;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_somClassDispatch)(
			Repository * somSelf,
			/* in */ SOMClass * clsObj,
			/* out */ somToken *retValue,
			/* in */ somId methodId,
			/* in */ va_list ap);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_somCastObj)(
			Repository * somSelf,
			/* in */ SOMClass * castedCls);
		#pragma linkage(somTP_Repository_somCastObj,system)
		typedef somTP_Repository_somCastObj *somTD_Repository_somCastObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_somCastObj)(
			Repository * somSelf,
			/* in */ SOMClass * castedCls);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef boolean (somTP_Repository_somResetObj)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somResetObj,system)
		typedef somTP_Repository_somResetObj *somTD_Repository_somResetObj;
	#else /* __IBMC__ */
		typedef boolean (SOMLINK * somTD_Repository_somResetObj)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Repository_somPrintSelf)(
			Repository * somSelf);
		#pragma linkage(somTP_Repository_somPrintSelf,system)
		typedef somTP_Repository_somPrintSelf *somTD_Repository_somPrintSelf;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Repository_somPrintSelf)(
			Repository * somSelf);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDumpSelf)(
			Repository * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_Repository_somDumpSelf,system)
		typedef somTP_Repository_somDumpSelf *somTD_Repository_somDumpSelf;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDumpSelf)(
			Repository * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDumpSelfInt)(
			Repository * somSelf,
			/* in */ long level);
		#pragma linkage(somTP_Repository_somDumpSelfInt,system)
		typedef somTP_Repository_somDumpSelfInt *somTD_Repository_somDumpSelfInt;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDumpSelfInt)(
			Repository * somSelf,
			/* in */ long level);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDefaultInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl);
		#pragma linkage(somTP_Repository_somDefaultInit,system)
		typedef somTP_Repository_somDefaultInit *somTD_Repository_somDefaultInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDefaultInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDefaultCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultCopyInit,system)
		typedef somTP_Repository_somDefaultCopyInit *somTD_Repository_somDefaultCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDefaultCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDefaultConstCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultConstCopyInit,system)
		typedef somTP_Repository_somDefaultConstCopyInit *somTD_Repository_somDefaultConstCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDefaultConstCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDefaultVCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultVCopyInit,system)
		typedef somTP_Repository_somDefaultVCopyInit *somTD_Repository_somDefaultVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDefaultVCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDefaultConstVCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultConstVCopyInit,system)
		typedef somTP_Repository_somDefaultConstVCopyInit *somTD_Repository_somDefaultConstVCopyInit;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDefaultConstVCopyInit)(
			Repository * somSelf,
			/* inout */ somInitCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Repository_somDefaultAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultAssign,system)
		typedef somTP_Repository_somDefaultAssign *somTD_Repository_somDefaultAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Repository_somDefaultAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Repository_somDefaultConstAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultConstAssign,system)
		typedef somTP_Repository_somDefaultConstAssign *somTD_Repository_somDefaultConstAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Repository_somDefaultConstAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Repository_somDefaultVAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultVAssign,system)
		typedef somTP_Repository_somDefaultVAssign *somTD_Repository_somDefaultVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Repository_somDefaultVAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef SOMObject * (somTP_Repository_somDefaultConstVAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
		#pragma linkage(somTP_Repository_somDefaultConstVAssign,system)
		typedef somTP_Repository_somDefaultConstVAssign *somTD_Repository_somDefaultConstVAssign;
	#else /* __IBMC__ */
		typedef SOMObject * (SOMLINK * somTD_Repository_somDefaultConstVAssign)(
			Repository * somSelf,
			/* inout */ somAssignCtrl *ctrl,
			/* in */ SOMObject * fromObj);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
#ifdef SOM_EXTERN_C_STATIC
	extern "C" {
#endif
	#ifdef __IBMC__
		typedef void (somTP_Repository_somDestruct)(
			Repository * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
		#pragma linkage(somTP_Repository_somDestruct,system)
		typedef somTP_Repository_somDestruct *somTD_Repository_somDestruct;
	#else /* __IBMC__ */
		typedef void (SOMLINK * somTD_Repository_somDestruct)(
			Repository * somSelf,
			/* in */ octet doFree,
			/* inout */ somDestructCtrl *ctrl);
	#endif /* __IBMC__ */
#ifdef SOM_EXTERN_C_STATIC
	}
#endif
	#ifndef Repository_MajorVersion
		#define Repository_MajorVersion   2
	#endif /* Repository_MajorVersion */
	#ifndef Repository_MinorVersion
		#define Repository_MinorVersion   1
	#endif /* Repository_MinorVersion */
	typedef struct RepositoryClassDataStructure
	{
		M_Repository * classObject;
		somMToken lookup_id;
		somMToken lookup_modifier;
		somMToken release_cache;
		somMToken saveIR;
		somMToken _get_subrepositorylist;
		somMToken _set_subrepositorylist;
		somMToken queryException;
	} RepositoryClassDataStructure;
	typedef struct RepositoryCClassDataStructure
	{
		somMethodTabs parentMtab;
		somDToken instanceDataToken;
	} RepositoryCClassDataStructure;
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_repostry_Source) || defined(Repository_Class_Source)
			SOMEXTERN struct RepositoryClassDataStructure _RepositoryClassData;
			#ifndef RepositoryClassData
				#define RepositoryClassData    _RepositoryClassData
			#endif /* RepositoryClassData */
		#else
			SOMEXTERN struct RepositoryClassDataStructure * SOMLINK resolve_RepositoryClassData(void);
			#ifndef RepositoryClassData
				#define RepositoryClassData    (*(resolve_RepositoryClassData()))
			#endif /* RepositoryClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_repostry_Source) || defined(Repository_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_repostry_Source || Repository_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_repostry_Source || Repository_Class_Source */
		struct RepositoryClassDataStructure SOMDLINK RepositoryClassData;
	#endif /* SOM_RESOLVE_DATA */
	#ifdef SOM_RESOLVE_DATA
		#if defined(SOM_Module_repostry_Source) || defined(Repository_Class_Source)
			SOMEXTERN struct RepositoryCClassDataStructure _RepositoryCClassData;
			#ifndef RepositoryCClassData
				#define RepositoryCClassData    _RepositoryCClassData
			#endif /* RepositoryCClassData */
		#else
			SOMEXTERN struct RepositoryCClassDataStructure * SOMLINK resolve_RepositoryCClassData(void);
			#ifndef RepositoryCClassData
				#define RepositoryCClassData    (*(resolve_RepositoryCClassData()))
			#endif /* RepositoryCClassData */
		#endif
	#else /* SOM_RESOLVE_DATA */
		SOMEXTERN 
		#if defined(SOM_Module_repostry_Source) || defined(Repository_Class_Source)
			#ifdef SOMDLLEXPORT
				SOMDLLEXPORT
			#endif /* SOMDLLEXPORT */
		#else /* SOM_Module_repostry_Source || Repository_Class_Source */
			#ifdef SOMDLLIMPORT
				SOMDLLIMPORT
			#endif /* SOMDLLIMPORT */
		#endif /* SOM_Module_repostry_Source || Repository_Class_Source */
		struct RepositoryCClassDataStructure SOMDLINK RepositoryCClassData;
	#endif /* SOM_RESOLVE_DATA */
	extern "C" {
	extern 
	#if defined(SOM_Module_repostry_Source) || defined(Repository_Class_Source)
		#ifdef SOMDLLEXPORT
			SOMDLLEXPORT
		#endif /* SOMDLLEXPORT */
	#else /* SOM_Module_repostry_Source || Repository_Class_Source */
		#ifdef SOMDLLIMPORT
			SOMDLLIMPORT
		#endif /* SOMDLLIMPORT */
	#endif /* SOM_Module_repostry_Source || Repository_Class_Source */
	M_Repository * SOMLINK RepositoryNewClass
			(integer4 somtmajorVersion,integer4 somtminorVersion);
	}
	#define _SOMCLASS_Repository (RepositoryClassData.classObject)
	#ifndef SOMGD_Repository
		#if (defined(_Repository) || defined(__Repository))
			#undef _Repository
			#undef __Repository
			#define SOMGD_Repository 1
		#else
			#define _Repository _SOMCLASS_Repository
		#endif /* _Repository */
	#endif /* SOMGD_Repository */
	#define Repository_classObj _SOMCLASS_Repository
	#define _SOMMTOKEN_Repository(method) ((somMToken)(RepositoryClassData.method))
#endif /* Repository_API */

	class Repository : public Container
	{
	protected:
		Repository(somMethodTab & mtab)
			: Container(mtab)
		{}
	public:

		inline Contained * lookup_id(
			Environment *ev,
			/* in */ string search_id)
		{
			return SOM_Resolve((void *)this,Repository,lookup_id)
					((Repository *)(void *)this,ev,search_id);
		};

		inline string lookup_modifier(
			Environment *ev,
			/* in */ string name,
			/* in */ string modifier)
		{
			return SOM_Resolve((void *)this,Repository,lookup_modifier)
					((Repository *)(void *)this,ev,name,modifier);
		};

		inline void release_cache(
			Environment *ev)
		{
			SOM_Resolve((void *)this,Repository,release_cache)
					((Repository *)(void *)this,ev);
		};

		inline boolean queryException(
			Environment *ev)
		{
			return SOM_Resolve((void *)this,Repository,queryException)
					((Repository *)(void *)this,ev);
		};

		inline void operator delete(void *x)
			{ ((SOMObject *)x)->somFree(); };

		inline void * operator new(size_t /* len */)
		{ if (!RepositoryClassData.classObject)
			{ RepositoryNewClass(Repository_MajorVersion,Repository_MinorVersion); }
			return (void *)SOM_Resolve((SOMObject *)(void *)RepositoryClassData.classObject,
				SOMClass,somNewNoInit)((SOMClass *)(void *)RepositoryClassData.classObject);
		};
		Repository()
			: Container(*(RepositoryCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==RepositoryCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultInit(0); }
		Repository(Repository *fromObj)
			: Container(*(RepositoryCClassData.parentMtab->mtab))
		{ if ((*(void **)(void *)this)==RepositoryCClassData.parentMtab->mtab)
			((SOMObject *)(void *)this)->somDefaultCopyInit(0,(SOMObject*)(void*)fromObj); }
	};
#endif /* SOM_Module_repostry_Header_xh */
