dnl Process this file with autoconf to produce a configure script.
AC_INIT(rexxsaa.h)
AC_PREFIX_DEFAULT(/usr)

. $srcdir/regina.ver
VERSION_NODOT=\"$VER\"
VERSION=\"$VER_DOT\"
VER_DATE=\"$VER_DATE\"
AC_SUBST(VERSION)
AC_SUBST(VERSION_NODOT)
AC_SUBST(VER_DATE)
AC_SUBST(VER_MAJOR)
AC_SUBST(VER_MINOR)
AC_SUBST(VER_SUPP)

dnl ---------------------- check for C compiler -----------------
dnl Checks for one of the C compilers below - change if yours not there.
CC_LIST="xlC xlc gcc cc c89 acc"
MH_PROG_CC

AC_CONFIG_HEADER(config.h)
AC_ISC_POSIX

dnl Checks for system first
AC_CANONICAL_SYSTEM

mymakefile="Makefile"
on_qnx4=no
on_beos=no
gci_available=no
GCI_CONVERT_HEADER="gci_convert.unsupported"
case "$target" in
   *hp-hpux*)
      SYS_DEFS="-D_HPUX_SOURCE"
      ;;
   *ibm-aix*)
      SYS_DEFS="-D_ALL_SOURCE"
#     mymakefile="Makefile.aix"
      ;;
   *dec-osf*)
      ;;
   *sequent-dynix*)
      ;;
   i*86*solaris*)
      GCI_CONVERT_HEADER="gci_convert.solaris.i86"
      gci_available=yes
      ;;
   *solaris*)
      GCI_CONVERT_HEADER="gci_convert.solaris.sparc"
      gci_available=yes
      ;;
   sparc*sunos*)
      ;;
   i*86-*linux*)
      GCI_CONVERT_HEADER="gci_convert.linux.i86"
      gci_available=yes
      ;;
   *86_64-*linux*)
      GCI_CONVERT_HEADER="gci_convert.linux.86_64"
      gci_available=yes
      ;;
   alpha*-*linux*)
      GCI_CONVERT_HEADER="gci_convert.linux.alpha"
      gci_available=yes
      ;;
   *cygwin*)
      GCI_CONVERT_HEADER="gci_convert.cygwin.i86"
      gci_available=yes
      ;;
   *nto-qnx*)
      ;;
   *qnx*)
      on_qnx4=yes
      SYS_DEFS="-Q"
      ;;
   *beos*)
      on_beos=yes
      ;;
esac
AC_SUBST(SYS_DEFS)

dnl
dnl include our 32/64bit tests
dnl
sinclude(common/inclibarch.m4)

AC_SUBST(GCI_CONVERT_HEADER)

dnl Check for dynamic shared library support libraries
MH_EXTRA_LIBS=""
MH_CHECK_LIB(dld dl)
SHLIBS="${MH_EXTRA_LIBS}"

dnl Check for extra required libraries - don't include libfl or libl
MH_EXTRA_LIBS=""
MH_CHECK_LIB(m nsl nsl_s socket net)
dnl -- check for crypt library and function
MH_CHECK_CRYPT
AC_PROG_LEX
BOTHLIBS="${LEXLIB} ${MH_EXTRA_LIBS}"

MH_HAVE_PROTO
if test "$mh_have_proto" = "no"; then
   AC_MSG_ERROR(Regina requires an ANSI compiler; cannot continue)
fi

AC_PROG_RANLIB

dnl --------------------- Check for other programs. ---------------
AC_PROG_LN_S
AC_PROG_MAKE_SET

dnl -------------------- Checks for header files. -----------------
AC_HEADER_STDC
AC_CHECK_HEADERS( \
   arpa/inet.h  \
   assert.h \
   ctype.h \
   crypt.h \
   dl.h \
   errno.h \
   fcntl.h \
   grp.h \
   limits.h \
   malloc.h \
   math.h \
   netdb.h \
   netinet/in.h \
   poll.h \
   process.h \
   pwd.h \
   setjmp.h \
   share.h \
   signal.h \
   stdarg.h \
   stdio.h \
   stdlib.h \
   stdint.h \
   string.h \
   sys/poll.h \
   sys/resource.h \
   sys/select.h \
   sys/socket.h \
   sys/stat.h \
   sys/time.h \
   sys/utsname.h \
   sys/wait.h \
   termios.h \
   time.h \
   unistd.h
   )

AC_CHECK_FUNCS(sysconf div raise putenv usleep random ftruncate \
   memcpy memmove strerror strerror_r gettimeofday ftime poll \
   _fullpath vsprintf _splitpath2 _splitpath sigaction \
   lstat mkstemp inet_ntop gmtime_r localtime_r \
   readlink realpath)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
MH_CHECK_CC_O
MH_CHECK__SIGHANDLER_T
MH_STRUCT_RANDOM_DATA
MH_CHECK_BUILTIN_RETURN_ADDRESS
MH_C_LONG_LONG
MH_CHECK_TYPE_SOCKLEN_T

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_ALLOCA
if test $ac_cv_func_alloca_works = yes; then
   ALLOCA=""
   ALLOCA_SHO=""
   ALLOCA_TSO=""
else
   ALLOCA="alloca.o"
   ALLOCA_SHO="alloca.so.o"
   ALLOCA_TSO="alloca.tso.o"
fi
AC_SUBST(ALLOCA)
AC_SUBST(ALLOCA_SHO)
AC_SUBST(ALLOCA_TSO)

dnl
dnl include our debugging switch checking
dnl
sinclude(common/incdebug.m4)

dnl --------------- allow --enable-orexx-binary-compatible to enable binary compatibility with ORexx
AC_ARG_ENABLE(orexx-binary-compatible,
   [  --enable-orexx-binary-compatible   enable binary compatibility with ORexx],
   [with_orexx_bc=$enableval],
   [with_orexx_bc=no],
)
if test "$with_orexx_bc" = yes; then
   OREXX_BINARY_COMPATIBLE="1"
   AC_DEFINE(OREXX_BINARY_COMPATIBLE)
fi

dnl --------------- allow --disable-posix-threads to disable multi-threading
AC_ARG_ENABLE(posix-threads,
        [  --disable-posix-threads disable POSIX-style multi-threading],
        [enable_posix_threads=no],
        [enable_posix_threads=yes],
)

dnl --------------- allow --disable-gci to disable General Call Interface
AC_ARG_ENABLE(gci,
   [  --disable-gci           disable General Call Interface],
   [with_gci=no],
   [with_gci=$gci_available],
)
if test "$with_gci" = yes; then
   GCI_SHO="gci_call.so.o gci_convert.so.o gci_execute.so.o gci_helper.so.o gci_prepare.so.o gci_reginabridge.so.o gci_rxfuncdefine.so.o gci_tree.so.o"
   HAVE_GCI="-DHAVE_GCI -I\$(gcidir)"
else
   GCI_SHO=""
   HAVE_GCI=""
fi
AC_SUBST(GCI_SHO)
AC_SUBST(HAVE_GCI)

if test "$ac_cv_prog_CC" = "gcc" -o "$ac_cv_prog_CC" = "g++"; then
   MH_CHECK_GCC_VERSION_SCRIPT
fi

dnl enable_posix_threads="yes"
MH_CHECK_POSIX_THREADS
if test "$mh_has_pthreads" = yes; then
   save_cflags="$CFLAGS"
   CFLAGS="$CFLAGS $THREADING_COMPILE"
#
# Where we know the format of getgrgid_r() function
# only test for that case
#
   case "$target" in
      *solaris*)
         MH_GETGRGID_R_STRUCT_RETURN
         ;;
      *linux*)
         MH_GETGRGID_R_INT_RETURN_5_PARAMS
         ;;
      *dec-osf*)
         MH_GETGRGID_R_INT_RETURN_5_PARAMS
         ;;
#
# FreeBSD does not have a reentrant version of getgrgid
#
      *freebsd*)
         ;;
      *apple-darwin*)
         ;;
      *cygwin*)
         ;;
      *)
         MH_GETGRGID_R_INT_RETURN_5_PARAMS
         if test "$mh_cv_getgrgid_r_int5" = "no"; then
            MH_GETGRGID_R_INT_RETURN_4_PARAMS
            if test "$mh_cv_getgrgid_r_int4" = "no"; then
               MH_GETGRGID_R_STRUCT_RETURN
            fi
         fi
   esac

   case "$target" in
#
# FreeBSD does not have a reentrant version of getpwduid
#
      *freebsd*)
         ;;
      *apple-darwin*)
         ;;
      *)
         MH_GETPWUID_R_INT_RETURN
         if test "$mh_cv_getpwuid_r_int" = "no"; then
            MH_GETPWUID_R_STRUCT_RETURN
         fi
   esac

   case "$target" in
#
# FreeBSD does not have a reentrant version of gethostbyname
#
      *freebsd*)
         ;;
      *apple-darwin*)
         ;;
      *cygwin*)
         ;;
      *)
         MH_GETHOSTBYNAME_R_INT_RETURN_6_PARAMS
         if test "$mh_cv_gethostbyname_r_int6" = "no"; then
            MH_GETHOSTBYNAME_R_STRUCT_RETURN_5_PARAMS
         fi
   esac

   CFLAGS="$save_cflags"
   REGINAMULTITHREAD="yes"
else
   REGINAMULTITHREAD="no"
fi
AC_SUBST(REGINAMULTITHREAD)

dnl --------------- allow --enable-tracemem to enable internal memory tracing
AC_ARG_ENABLE(tracemem,
   [  --enable-tracemem       enable memory tracing in debug mode],
   [with_tracemem=$enableval],
   [with_tracemem=no],
)
if test "$with_tracemem" = yes; then
   TRACEMEM="-DTRACEMEM"
else
   TRACEMEM=""
fi
AC_SUBST(TRACEMEM)

dnl --------------- allow --disable-flists to disable memory functions
AC_ARG_ENABLE(flists,
   [  --disable-flists        disable memory management functions],
   [with_flists=$enableval],
   [with_flists=yes],
)
if test "$with_flists" = no; then
   FLISTS="-DNOFLISTS"
else
   FLISTS=""
fi
AC_SUBST(FLISTS)

dnl --------------- allow --with-socket to specify socket for rxstack
AC_ARG_WITH(socket,
   [  --with-socket=9999      socket to use for external queues (default 5757)],
   [with_socket=$withval],
   [with_socket=no],
)
if test "$with_socket" = no; then
   REXXSOCKET=""
else
   REXXSOCKET="-DRXSOCKET=$with_socket"
fi
AC_SUBST(REXXSOCKET)

dnl --------------- allow --with-staticfunctions to enable linking external function packages statically
dnl must be called before MH_SHARED_LIBRARY
AC_ARG_WITH(staticfunctions,
   [  --with-staticfunctions  enable static linking of external function packages],
   [with_staticfunctions=$withval],
   [with_staticfunctions=no],
)
if test "$with_staticfunctions" = "yes"; then
   STATICLD_SHO="staticld.so.o rxpack.so.o"
   MH_STATIC_LOADING
else
   STATICLD_SHO=""
dnl --------------- Check how to make shared libraries -------------------
dnl MH_SHARED_LIBRARY must be called after determining if POSIX threads is specified
   MH_SHARED_LIBRARY

dnl --------------- Check if underscore is needed in loadable modules ----
dnl MH_CHECK_LEADING_USCORE must be called after processing --with-dlfcn[inc,lib]dir switches
   MH_CHECK_LEADING_USCORE
fi
AC_SUBST(STATICLD_SHO)
MH_SET_SHLPST

MH_CHECK_RPM(/usr/src/rpm /usr/src/redhat)

dnl --------------- Force definition of pre-compiler macro UNIX ----------
AC_DEFINE(UNIX)

dnl --------------- Check what compiler switch sets unsigned char ----------
MH_CHECK_UNSIGNED_CHAR_COMPILER_SWITCH()

dnl AC_OUTPUT(Makefile)

AC_OUTPUT($mymakefile regina-config rxstack.init.d)
chmod 755 regina-config
echo
echo "Regina has now been configured with the following options:"
echo
if test "x$SHL_TARGETS" = "x"; then
   echo "         Dynamic Loading Support: none"
else
   echo "         Dynamic Loading Support: supported. Extra components: $SHL_TARGETS"
fi
if test "$with_dlfcnincdir" != no ; then
   echo "                dlfcn headers in: $with_dlfcnincdir"
fi
if test "$with_dlfcnlibdir" != no ; then
   echo "              dlfcn libraries in: $with_dlfcnlibdir"
fi

myopts="${bitflag}BIT"
if test "$with_debug" = yes ; then
   myopts="$myopts DEBUG"
fi
if test "$with_purify" = yes ; then
   myopts="$myopts PURIFY"
fi
if test "$with_efence" = yes; then
   myopts="$myopts EFENCE"
fi
if test "$with_orexx_bc" = yes; then
   myopts="$myopts OREXX_BINARY"
fi
if test "$with_gci" = yes; then
   myopts="$myopts GCI"
fi
if test "$with_flists" = no; then
   myopts="$myopts NO_FLISTS"
fi
if test "$with_socket" = no; then
   myopts="$myopts"
else
   myopts="$myopts SOCKET=$with_socket"
fi

if test "$with_staticfunctions" = "yes"; then
   myfuncs=""
   if test "$with_testpackage" = "yes"; then
      myfuncs="$myfuncs test"
   fi
   if test "$with_regutil" = "yes"; then
      myfuncs="$myfuncs regutil"
   fi
   if test "$with_rexxcurses" = "yes"; then
      myfuncs="$myfuncs rexxcurses"
   fi
   if test "$with_rexxtk" = "yes"; then
      myfuncs="$myfuncs rexxtk"
   fi
   if test "$with_rexxgd" = "yes"; then
      myfuncs="$myfuncs rexxgd"
   fi
   if test "$with_rexxcurl" = "yes"; then
      myfuncs="$myfuncs rexxcurl"
   fi
   if test "$with_rexxsql" = "yes"; then
      myfuncs="$myfuncs rexxsql"
   fi
   if test "$with_rexxisam" = "yes"; then
      myfuncs="$myfuncs rexxisam"
   fi
   if test "$with_rxsock" = "yes"; then
      myfuncs="$myfuncs rxsock"
   fi
   if test "$with_rexxdw" = "yes"; then
      myfuncs="$myfuncs rexxdw"
   fi
   echo "          Static Loaded Packages: $myfuncs"
fi

if test "$on_beos" = yes; then
   bindir="/boot/home/config/bin"
   libdir="/boot/home/config/lib"
fi

echo "                   Build options: $myopts"
echo "   binaries will be installed in: $bindir"
if test "x$binarybitprefix" = "x32"; then
   echo "   binaries will have '32' appended to them. eg rexx32, regina32"
fi
echo "  libraries will be installed in: $libdir"
echo "                        {prefix}: $prefix"
echo "                   {exec_prefix}: $exec_prefix"
echo
echo "To build the Regina binaries, and dynamically loadable libraries, type 'make'"
echo "To install Regina in the above directories, type 'make install'"
echo
