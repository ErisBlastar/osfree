#
# Makefile for building Regina with MingW32 compiler
#
# make -C MingW32-gcc-3.4.0-MT-DYNAMIC-DEBUG -f $(SRCDIR)/makefile.win32.mingw DEBUG=Y > MingW32-gcc-3.4.0-MT-DYNAMIC-DEBUG/make-out.log 2>&1
# make -C MingW32-gcc-3.4.0-MT-DYNAMIC-RELEASE -f $(SRCDIR)/makefile.win32.mingw > MingW32-gcc-3.4.0-MT-DYNAMIC-RELEASE/make-out.log 2>&1
#
# Run with -r switch
# eg make -r -f ..\makefile.win32.mingw
#

SRCDIR=$(REGINA_SRCDIR)
COMMONSRCDIR=$(SRCDIR)\common

include $(SRCDIR)/regina.ver

VERDOT = $(VER_DOT)
VERDATE = $(VER_DATE)

VEXTRA = -DREGINA_VERSION_DATE=\"$(VER_DATE)\" -DREGINA_VERSION_MAJOR=\"$(VER_MAJOR)\" -DREGINA_VERSION_MINOR=\"$(VER_MINOR)\" -DREGINA_VERSION_SUPP=\"$(VER_SUPP)\"

CC = gcc

ifeq ($(DEBUG),Y)
OPTIMIZE = -g -fbounds-checking -Wall
else
OPTIMIZE = -O3 -Wall -DNDEBUG
endif

ifeq ($(TRACEMEM),Y)
MEMTRACE = -DTRACEMEM
else
MEMTRACE =
endif

ifeq ($(FLISTS),N)
USEFLISTS = -DNOFLISTS
else
USEFLISTS =
endif

ifdef ($(SOCKET))
REXXSOCKET = "-DRXSOCKET=$(SOCKET)"
endif

THREADING = -mthreads
MT_FILE = mt_win32.o
LDFLAGS = -mwindows -mthreads
LDFLAGS1 = -mconsole -mthreads

ifeq ($(GCI),N)
GCI_SHO =
HAVE_GCI =
else
GCI_SHO = gci_call.ts.o gci_convert.ts.o gci_execute.ts.o gci_helper.ts.o gci_prepare.ts.o \
          gci_reginabridge.ts.o gci_rxfuncdefine.ts.o gci_tree.ts.o
HAVE_GCI = -DHAVE_GCI -I$(SRCDIR)/gci -I.
endif

DYN_COMP = -DDYNAMIC -D__REGINA_DLL
SHL_TARGETS = rxqueue.exe rxstack.exe regina.exe rxtest1.dll rxtest2.dll
LD_RXLIB_PRE = $(CC) -shared -mwindows -mthreads
LD_RXLIB1 = -o rxtest1.dll -Wl,--export-all-symbols -Wl,--kill-at regina.a $(TCPLIBS)
LD_RXLIB2 = -o rxtest2.dll -Wl,--export-all-symbols -Wl,--kill-at regina.a $(TCPLIBS)

.SUFFIXES:

VPATH=$(SRCDIR)/ $(SRCDIR)/gci $(SRCDIR)/ntservice

OFILES =    funcs.o builtin.o error.o variable.o interprt.o debug.o dbgfuncs.o memory.o parsing.o   \
            files.o misc.o unxfuncs.o arxfuncs.o cmsfuncs.o os2funcs.o shell.o rexxext.o stack.o    \
            extstack.o tracing.o interp.o cmath.o convert.o strings.o library.o strmath.o signals.o \
            macros.o envir.o expr.o instore.o rexxbif.o yaccsrc.o lexsrc.o options.o os_win.o       \
            wrappers.o os_other.o $(MT_FILE)

TSFILES =   funcs.ts.o builtin.ts.o error.ts.o variable.ts.o extstack.ts.o rexxbif.ts.o interprt.ts.o \
            debug.ts.o dbgfuncs.ts.o memory.ts.o parsing.ts.o files.ts.o misc.ts.o unxfuncs.ts.o      \
            arxfuncs.ts.o cmsfuncs.ts.o os2funcs.ts.o shell.ts.o rexxext.ts.o stack.ts.o tracing.ts.o \
            interp.ts.o cmath.ts.o convert.ts.o strings.ts.o library.ts.o strmath.ts.o signals.ts.o   \
            macros.ts.o envir.ts.o expr.ts.o instore.ts.o yaccsrc.ts.o lexsrc.ts.o wrappers.ts.o      \
            options.ts.o os_win.ts.o os_other.ts.o rexx.ts.o client.ts.o rexxsaa.ts.o mt_win32.ts.o      \
            $(GCI_SHO)

MTSSRC =    $(SRCDIR)/en.mts $(SRCDIR)/pt.mts $(SRCDIR)/no.mts $(SRCDIR)/de.mts $(SRCDIR)/es.mts $(SRCDIR)/pl.mts $(SRCDIR)/tr.mts

CEXTRA = $(REXXSOCKET) $(HAVE_GCI) $(VEXTRA) -funsigned-char
COPT = -MMD $(OPTIMIZE) $(CEXTRA) -I$(SRCDIR)/ $(MEMTRACE) $(NOFLISTS) $(THREADING)
COPTDYN = -MMD $(OPTIMIZE) $(CEXTRA) -I$(SRCDIR)/ $(MEMTRACE) $(NOFLISTS) $(DYN_COMP) $(THREADING)
TCPLIBS = -lwsock32

#%.c: *.l
#	echo
#$(SRCDIR)/yaccsrc.h $(SRCDIR)/yaccsrc.c: $(SRCDIR)/yaccsrc.y
#	bison -p__regina -o$(SRCDIR)/yaccsrc.c -d $(SRCDIR)/yaccsrc.y

#$(SRCDIR)/lexsrc.c: $(SRCDIR)/lexsrc.l
#	flex -P__regina -Scontrib/flex.skl -8 -o$(SRCDIR)/lexsrc.c $(SRCDIR)/lexsrc.l

%.o: %.c
	$(CC) -c $(COPT) -o $@ $<
	
%.ts.o: %.c
	$(CC) -c $(COPTDYN) -o $@ $<

ifdef ($(HAVE_GCI))
all: gci_convert.h rexx.exe rexx.a execiser.exe $(SHL_TARGETS) rxstack.exe rxqueue.exe threader.exe mtb_files
else
all: rexx.exe rexx.a execiser.exe $(SHL_TARGETS) rxstack.exe rxqueue.exe threader.exe mtb_files
endif

rexx.exe : $(OFILES) rexx.o rexxw32exe.o nosaa.o
	$(CC) $(LDFLAGS1) -o rexx.exe $(OFILES) rexx.o rexxw32exe.o nosaa.o $(TCPLIBS)

regina.exe : regina.dll regina.o reginaw32exe.o
	$(CC) $(LDFLAGS1) -o regina.exe regina.o regina.a reginaw32exe.o $(TCPLIBS)

execiser.exe : execiser.o regina.dll
	$(CC) $(LDFLAGS1) -o execiser.exe execiser.o regina.a

rxqueue.exe : rxqueue.o erexxbif.o eextstack.o rxqueuew32exe.o
	$(CC) $(LDFLAGS1) -o rxqueue.exe rxqueue.o erexxbif.o eextstack.o rxqueuew32exe.o $(TCPLIBS)

rxstack.exe : rxstack.o erexxbif_mt.o eextstack_mt.o service.o rxstackw32exe.o
	$(CC) $(LDFLAGS1) -o rxstack.exe rxstack.o erexxbif_mt.o eextstack_mt.o service.o rxstackw32exe.o $(TCPLIBS)

threader.exe : threader.o regina.dll
	$(CC) $(LDFLAGS1) -o threader.exe threader.o regina.a

rexx.a: $(OFILES) client.o drexx.o rexxsaa.o
	ar rc rexx.a $(OFILES) client.o drexx.o rexxsaa.o

regina.dll: gci_convert.h $(TSFILES) reginaw32dll.o
	$(CC) -shared $(LDFLAGS) -o regina.dll \
  -Wl,--out-implib,regina.a -Wl,-Map,regina.dll.map -Wl,--cref \
  rexx.a reginaw32dll.o *.ts.o $(TCPLIBS) $(SRCDIR)/regina_w32_mingw_dll.def

test1.o: $(SRCDIR)/test1.c
	$(CC) -c $(COPTDYN) -U__REGINA_DLL -o test1.o $(SRCDIR)/test1.c

rxtest1.dll: test1.o regina.dll
	$(LD_RXLIB_PRE) test1.o $(LD_RXLIB1)

test2.o: $(SRCDIR)/test2.c
	$(CC) -c $(COPTDYN) -U__REGINA_DLL -o test2.o $(SRCDIR)/test2.c

rxtest2.dll: test2.o regina.dll
	$(LD_RXLIB_PRE) test2.o $(LD_RXLIB2)

drexx.o: $(SRCDIR)/rexx.c
	$(CC) -c $(COPT) -DRXLIB -o drexx.o $(SRCDIR)/rexx.c

rexx.ts.o: $(SRCDIR)/rexx.c
	$(CC) -c $(COPTDYN) -DRXLIB -o rexx.ts.o $(SRCDIR)/rexx.c

rxqueue.o: $(SRCDIR)/rxqueue.c
	$(CC) -c $(COPT) -DEXTERNAL_TO_REGINA -o rxqueue.o $(SRCDIR)/rxqueue.c

rxstack.o: $(SRCDIR)/rxstack.c
	$(CC) -c $(COPT) -I$(SRCDIR)/ntservice -DEXTERNAL_TO_REGINA -DBUILD_NT_SERVICE -o rxstack.o $(SRCDIR)/rxstack.c

erexxbif_mt.o: $(SRCDIR)/rexxbif.c
	$(CC) -c $(COPT) -DEXTERNAL_TO_REGINA -o erexxbif_mt.o $(SRCDIR)/rexxbif.c

erexxbif.o: $(SRCDIR)/rexxbif.c
	$(CC) -c $(COPT) -DEXTERNAL_TO_REGINA -o erexxbif.o $(SRCDIR)/rexxbif.c

eextstack_mt.o: $(SRCDIR)/extstack.c
	$(CC) -c $(COPT) -DEXTERNAL_TO_REGINA -o eextstack_mt.o $(SRCDIR)/extstack.c

eextstack.o: $(SRCDIR)/extstack.c
	$(CC) -c $(COPT) -DEXTERNAL_TO_REGINA -o eextstack.o $(SRCDIR)/extstack.c

extstack.o: $(SRCDIR)/extstack.c
	$(CC) -c $(COPT) -o extstack.o $(SRCDIR)/extstack.c

yaccsrc.o: $(SRCDIR)/yaccsrc.c
	$(CC) -c $(COPT) -DYYMAXDEPTH=10000 -o yaccsrc.o $(SRCDIR)/yaccsrc.c

yaccsrc.ts.o: $(SRCDIR)/yaccsrc.c
	$(CC) -c $(COPTDYN) -DYYMAXDEPTH=10000 -o yaccsrc.ts.o $(SRCDIR)/yaccsrc.c

threader.o: $(SRCDIR)/threader.c
	$(CC) -c $(COPT) -DWIN32_THREADS -o threader.o $(SRCDIR)/threader.c

gci_convert.h: $(SRCDIR)/gci/gci_convert.win32.vc
	copy $(SRCDIR)\gci\gci_convert.win32.vc gci_convert.h

mtb_files: msgcmp.exe $(MTSSRC)
	msgcmp $(MTSSRC)

msgcmp.exe: msgcmp.o
	$(CC) -o msgcmp.exe msgcmp.o

msgcmp.o: $(SRCDIR)/msgcmp.c
	$(CC) $(COPT) -o msgcmp.o -c $(SRCDIR)/msgcmp.c

#
# Rules for resource files and version details
# We assume we have an already functional regina.exe
#
reginaw32dll.rc: $(SRCDIR)\regina.ver $(SRCDIR)\reginaw32dll.rc
	regina $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\reginaw32dll.rc $@ $(VERDOT) $(VERDATE)
reginaw32exe.rc: $(SRCDIR)\regina.ver $(SRCDIR)\reginaw32exe.rc
	regina $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\reginaw32exe.rc $@ $(VERDOT) $(VERDATE)
rxstackw32exe.rc: $(SRCDIR)\regina.ver $(SRCDIR)\rxstackw32exe.rc
	regina $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\rxstackw32exe.rc $@ $(VERDOT) $(VERDATE)
rxqueuew32exe.rc: $(SRCDIR)\regina.ver $(SRCDIR)\rxqueuew32exe.rc
	regina $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\rxqueuew32exe.rc $@ $(VERDOT) $(VERDATE)
rexxw32exe.rc: $(SRCDIR)\regina.ver $(SRCDIR)\rexxw32exe.rc
	regina $(COMMONSRCDIR)\fixrc.rexx $(SRCDIR)\rexxw32exe.rc $@ $(VERDOT) $(VERDATE)

reginaw32dll.o: reginaw32dll.rc
	copy $(SRCDIR)\reginaw32.ico .
	windres --include=$(SRCDIR)/ reginaw32dll.rc reginaw32dll.res
	windres reginaw32dll.res reginaw32dll.o

reginatsw32dll.o: reginatsw32dll.rc
	copy $(SRCDIR)\reginaw32.ico .
	windres --include=$(SRCDIR)/ reginatsw32dll.rc reginatsw32dll.res
	windres reginatsw32dll.res reginatsw32dll.o

reginaw32exe.o: reginaw32exe.rc
	copy $(SRCDIR)\reginaw32.ico .
	windres --include=$(SRCDIR)/ reginaw32exe.rc reginaw32exe.res
	windres reginaw32exe.res reginaw32exe.o

rexxw32exe.o: rexxw32exe.rc
	copy $(SRCDIR)\reginaw32.ico .
	windres --include=$(SRCDIR)/ rexxw32exe.rc rexxw32exe.res
	windres rexxw32exe.res rexxw32exe.o

rxstackw32exe.o: rxstackw32exe.rc
	copy $(SRCDIR)\reginaw32.ico .
	windres --include=$(SRCDIR)/ rxstackw32exe.rc rxstackw32exe.res
	windres rxstackw32exe.res rxstackw32exe.o

rxqueuew32exe.o: rxqueuew32exe.rc
	copy $(SRCDIR)\reginaw32.ico .
	windres --include=$(SRCDIR)/ rxqueuew32exe.rc rxqueuew32exe.res
	windres rxqueuew32exe.res rxqueuew32exe.o

zip:
	zip -9r regina-mingw$(VER).zip * -x MingW32-gcc-3.4.0-MT-DYNAMIC-DEBUG/* -x MingW32-gcc-3.4.0-MT-DYNAMIC-RELEASE/*

#
# Build NSIS package...
#
dist: all
	cp $(SRCDIR)/rexxsaa.h .
	cp -r $(SRCDIR)/demo .
	cp $(SRCDIR)/README.W32 .
	cp $(SRCDIR)/README.33 .
	cp $(SRCDIR)\COPYING-LIB .
	cp $(SRCDIR)/regina_ss.ini .
	cp $(SRCDIR)/regina_fa.ini .
	cp $(SRCDIR)/regina_mt.ini .
	cp $(SRCDIR)/regina_mingw.nsi .
	cp $(SRCDIR)/common/isnt.nsh .
	cp $(SRCDIR)/common/path.nsh .
	cp $(SRCDIR)/common/WriteEnv.nsh .
	cp $(SRCDIR)/common/uninstall.ico .
	C:/Program\ Files/NSIS/makensis.exe /DVERSION=$(VERDOT) /DNODOTVER=$(VER) /DSRCDIR=. regina_mingw.nsi

DEPS := $(wildcard *.d)
ifneq ($(DEPS),)
include $(DEPS)
endif

