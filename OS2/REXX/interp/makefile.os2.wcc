#
# Makefile for Regina REXX Interpreter using OpenWatcom 1.1
#

SRC = $(%REGINA_SRCDIRN)\

!include $(SRC)regina.ver
VERDOT = $(VER_DOT)
VERDATE = $(VER_DATE)

YACC = yacc
#YACC = bison -ly #-d #-lyt

LEX = lex
#LEX = flex -8 #-d
#LL = -L/store/lib -lfl

!ifeq MULTI N
THREADING =
THREADING_LINK =
THREADING_FILE = mt_notmt
!else
THREADING = /bm /dREGINA_MULTI
THREADING_LINK = /bm
THREADING_FILE = mt_os2
!endif

#
# GCI is default
#
!ifeq GCI N
GCI_SHO =
HAVE_GCI =
!else
GCI_SHO = gci_call.dlo gci_convert.dlo gci_execute.dlo gci_helper.dlo &
          gci_prepare.dlo gci_reginabridge.dlo gci_rxfuncdefine.dlo &
          gci_tree.dlo
HAVE_GCI = /dHAVE_GCI /i=$(SRC)gci
!endif
#
# good from here down
#

OFILES =      &
funcs.obj     &
builtin.obj   &
error.obj     &
variable.obj  &
interprt.obj  &
debug.obj     &
dbgfuncs.obj  &
memory.obj    &
parsing.obj   &
files.obj     &
misc.obj      &
unxfuncs.obj  &
arxfuncs.obj  &
os2funcs.obj  &
cmsfuncs.obj  &
shell.obj     &
rexxext.obj   &
stack.obj     &
tracing.obj   &
interp.obj    &
cmath.obj     &
convert.obj   &
strings.obj   &
library.obj   &
strmath.obj   &
signals.obj   &
macros.obj    &
envir.obj     &
expr.obj      &
mt_notmt.obj  &
instore.obj   &
yaccsrc.obj   &
lexsrc.obj    &
wrappers.obj  &
options.obj   &
os_os2.obj    &
extstack.obj  &
rexxbif.obj


DLOFILES =    &
funcs.dlo     &
builtin.dlo   &
error.dlo     &
variable.dlo  &
interprt.dlo  &
debug.dlo     &
dbgfuncs.dlo  &
memory.dlo    &
parsing.dlo   &
files.dlo     &
misc.dlo      &
unxfuncs.dlo  &
arxfuncs.dlo  &
os2funcs.dlo  &
cmsfuncs.dlo  &
shell.dlo     &
rexxext.dlo   &
stack.dlo     &
tracing.dlo   &
interp.dlo    &
cmath.dlo     &
convert.dlo   &
strings.dlo   &
library.dlo   &
strmath.dlo   &
signals.dlo   &
macros.dlo    &
envir.dlo     &
expr.dlo      &
$(THREADING_FILE).dlo &
instore.dlo   &
yaccsrc.dlo   &
lexsrc.dlo    &
wrappers.dlo  &
options.dlo   &
os_os2.dlo    &
extstack.dlo  &
rexxbif.dlo   &
$(GCI_SHO)

LIBFILE=rexx.lib
DLLBASE=regina
DLLFILE=$(DLLBASE).dll
IMPFILE=$(DLLBASE).lib

DLLTEST1=rxtest1.dll
DLLTEST2=rxtest2.dll

CC              = wcc386
TARGET=os2v2

!ifeq DEBUG Y
CFLAGS  = /d2
LDFLAGS = DEBUG ALL
!else
CFLAGS  =  /dNDEBUG /oneatx
LDFLAGS =
!endif


CPPFLAGS        = /dOS2 /i=$(SRC)

DYN_CFLAGS = /dDYNAMIC

CEXTRA = /dREGINA_VERSION_DATE=$(VER_DATE) /dREGINA_VERSION_MAJOR="$(VER_MAJOR)" /dREGINA_VERSION_MINOR="$(VER_MINOR)" /dREGINA_VERSION_SUPP="$(VER_SUPP)"

CCFLAGS         = /4s /wx /zq /mf $(CFLAGS) $(CPPFLAGS) $(CEXTRA)

LINK            = wlink

LIBEXE          = wlib
LIBFLAGS                = /q /n

HFILES = $(SRC)rexx.h $(SRC)defs.h $(SRC)extern.h $(SRC)regina_t.h $(SRC)configur.h $(SRC)strings.h

GCIHEADERS = $(SRC)gci\gci.h $(SRC)gci\embedded.h gci_convert.h

all : rexx.exe $(LIBFILE) regina.exe $(DLLTEST1) $(DLLTEST2) execiser.exe threader.exe

rexx.exe : $(OFILES) rexx.obj nosaa.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option caseexact
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name rexx.exe
        @%append dummy.lnk file rexx.obj
        @%append dummy.lnk file funcs.obj
        @%append dummy.lnk file builtin.obj
        @%append dummy.lnk file error.obj
        @%append dummy.lnk file variable.obj
        @%append dummy.lnk file interprt.obj
        @%append dummy.lnk file debug.obj
        @%append dummy.lnk file dbgfuncs.obj
        @%append dummy.lnk file memory.obj
        @%append dummy.lnk file parsing.obj
        @%append dummy.lnk file files.obj
        @%append dummy.lnk file misc.obj
        @%append dummy.lnk file unxfuncs.obj
        @%append dummy.lnk file arxfuncs.obj
        @%append dummy.lnk file os2funcs.obj
        @%append dummy.lnk file cmsfuncs.obj
        @%append dummy.lnk file shell.obj
        @%append dummy.lnk file rexxext.obj
        @%append dummy.lnk file stack.obj
        @%append dummy.lnk file tracing.obj
        @%append dummy.lnk file interp.obj
        @%append dummy.lnk file cmath.obj
        @%append dummy.lnk file convert.obj
        @%append dummy.lnk file strings.obj
        @%append dummy.lnk file library.obj
        @%append dummy.lnk file strmath.obj
        @%append dummy.lnk file signals.obj
        @%append dummy.lnk file macros.obj
        @%append dummy.lnk file envir.obj
        @%append dummy.lnk file mt_notmt.obj
        @%append dummy.lnk file instore.obj
        @%append dummy.lnk file expr.obj
        @%append dummy.lnk file yaccsrc.obj
        @%append dummy.lnk file lexsrc.obj
        @%append dummy.lnk file wrappers.obj
        @%append dummy.lnk file options.obj
        @%append dummy.lnk file os_os2.obj
        @%append dummy.lnk file extstack.obj
        @%append dummy.lnk file rexxbif.obj
        @%append dummy.lnk file nosaa.obj
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

regina.exe : $(IMPFILE) regina.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option caseexact
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name regina.exe
        @%append dummy.lnk file regina.obj
        @%append dummy.lnk file .\$(IMPFILE)
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

execiser.exe : $(IMPFILE) execiser.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option caseexact
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name execiser.exe
        @%append dummy.lnk file execiser.obj
        @%append dummy.lnk file .\$(IMPFILE)
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

threader.exe : $(IMPFILE) threader.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option caseexact
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name threader.exe
        @%append dummy.lnk file threader.obj
        @%append dummy.lnk file .\$(IMPFILE)
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

$(LIBFILE): $(OFILES) client.obj drexx.obj rexxsaa.obj
        @%create lib.rsp
        @%append lib.rsp +client.obj
        @%append lib.rsp +drexx.obj
        @%append lib.rsp +rexxsaa.obj
        @%append lib.rsp +funcs.obj
        @%append lib.rsp +builtin.obj
        @%append lib.rsp +error.obj
        @%append lib.rsp +variable.obj
        @%append lib.rsp +interprt.obj
        @%append lib.rsp +debug.obj
        @%append lib.rsp +dbgfuncs.obj
        @%append lib.rsp +memory.obj
        @%append lib.rsp +parsing.obj
        @%append lib.rsp +files.obj
        @%append lib.rsp +misc.obj
        @%append lib.rsp +unxfuncs.obj
        @%append lib.rsp +arxfuncs.obj
        @%append lib.rsp +os2funcs.obj
        @%append lib.rsp +cmsfuncs.obj
        @%append lib.rsp +shell.obj
        @%append lib.rsp +rexxext.obj
        @%append lib.rsp +stack.obj
        @%append lib.rsp +tracing.obj
        @%append lib.rsp +interp.obj
        @%append lib.rsp +cmath.obj
        @%append lib.rsp +convert.obj
        @%append lib.rsp +strings.obj
        @%append lib.rsp +library.obj
        @%append lib.rsp +strmath.obj
        @%append lib.rsp +signals.obj
        @%append lib.rsp +macros.obj
        @%append lib.rsp +envir.obj
        @%append lib.rsp +mt_notmt.obj
        @%append lib.rsp +instore.obj
        @%append lib.rsp +expr.obj
        @%append lib.rsp +yaccsrc.obj
        @%append lib.rsp +lexsrc.obj
        @%append lib.rsp +wrappers.obj
        @%append lib.rsp +options.obj
        @%append lib.rsp +os_os2.obj
        @%append lib.rsp +extstack.obj
        @%append lib.rsp +rexxbif.obj
        $(LIBEXE) $(LIBFLAGS) $@ @lib.rsp
        del lib.rsp

$(DLLFILE): $(DLOFILES) client.dlo drexx.dlo rexxsaa.dlo
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option caseexact
        @%append dummy.lnk system $(TARGET) dll
        @%append dummy.lnk name $(DLLFILE)
        @%append dummy.lnk option map
        @%append dummy.lnk file client.dlo
        @%append dummy.lnk file drexx.dlo
        @%append dummy.lnk file rexxsaa.dlo
        @%append dummy.lnk file funcs.dlo
        @%append dummy.lnk file builtin.dlo
        @%append dummy.lnk file error.dlo
        @%append dummy.lnk file variable.dlo
        @%append dummy.lnk file interprt.dlo
        @%append dummy.lnk file debug.dlo
        @%append dummy.lnk file dbgfuncs.dlo
        @%append dummy.lnk file memory.dlo
        @%append dummy.lnk file parsing.dlo
        @%append dummy.lnk file files.dlo
        @%append dummy.lnk file misc.dlo
        @%append dummy.lnk file unxfuncs.dlo
        @%append dummy.lnk file arxfuncs.dlo
        @%append dummy.lnk file os2funcs.dlo
        @%append dummy.lnk file cmsfuncs.dlo
        @%append dummy.lnk file shell.dlo
        @%append dummy.lnk file rexxext.dlo
        @%append dummy.lnk file stack.dlo
        @%append dummy.lnk file tracing.dlo
        @%append dummy.lnk file interp.dlo
        @%append dummy.lnk file cmath.dlo
        @%append dummy.lnk file convert.dlo
        @%append dummy.lnk file strings.dlo
        @%append dummy.lnk file library.dlo
        @%append dummy.lnk file strmath.dlo
        @%append dummy.lnk file signals.dlo
        @%append dummy.lnk file macros.dlo
        @%append dummy.lnk file envir.dlo
        @%append dummy.lnk file $(THREADING_FILE).dlo
        @%append dummy.lnk file instore.dlo
        @%append dummy.lnk file expr.dlo
        @%append dummy.lnk file yaccsrc.dlo
        @%append dummy.lnk file lexsrc.dlo
        @%append dummy.lnk file wrappers.dlo
        @%append dummy.lnk file options.dlo
        @%append dummy.lnk file os_os2.dlo
        @%append dummy.lnk file extstack.dlo
        @%append dummy.lnk file rexxbif.dlo
!ifneq GCI N
        @%append dummy.lnk file gci_call.dlo
        @%append dummy.lnk file gci_convert.dlo
        @%append dummy.lnk file gci_execute.dlo
        @%append dummy.lnk file gci_helper.dlo
        @%append dummy.lnk file gci_prepare.dlo
        @%append dummy.lnk file gci_reginabridge.dlo
        @%append dummy.lnk file gci_rxfuncdefine.dlo
        @%append dummy.lnk file gci_tree.dlo
!endif
        @%append dummy.lnk export RexxAllocateMemory
        @%append dummy.lnk export RexxDeregisterExit
        @%append dummy.lnk export RexxDeregisterFunction
        @%append dummy.lnk export RexxDeregisterSubcom
        @%append dummy.lnk export RexxFreeMemory
        @%append dummy.lnk export RexxQueryExit
        @%append dummy.lnk export RexxQueryFunction
        @%append dummy.lnk export RexxQuerySubcom
        @%append dummy.lnk export RexxRegisterExitDll
        @%append dummy.lnk export RexxRegisterExitExe
        @%append dummy.lnk export RexxRegisterFunctionDll
        @%append dummy.lnk export RexxRegisterFunctionExe
        @%append dummy.lnk export RexxRegisterSubcomDll
        @%append dummy.lnk export RexxRegisterSubcomExe
        @%append dummy.lnk export RexxSetHalt
        @%append dummy.lnk export RexxStart
        @%append dummy.lnk export RexxVariablePool
        @%append dummy.lnk export ReginaVersion
        @%append dummy.lnk export __regina_faked_main
        @%append dummy.lnk export RexxAddMacro
        @%append dummy.lnk export RexxAddQueue
        @%append dummy.lnk export RexxClearMacroSpace
        @%append dummy.lnk export RexxCreateQueue
        @%append dummy.lnk export RexxDeleteQueue
        @%append dummy.lnk export RexxDropMacro
        @%append dummy.lnk export RexxLoadMacroSpace
        @%append dummy.lnk export RexxPullQueue
        @%append dummy.lnk export RexxQueryMacro
        @%append dummy.lnk export RexxQueryQueue
        @%append dummy.lnk export RexxReorderMacro
        @%append dummy.lnk export RexxSaveMacroSpace
        @%append dummy.lnk export RexxCallBack
        @%append dummy.lnk export ReginaCleanup
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

$(DLLTEST1): test1.dlo $(IMPFILE)
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option caseexact
        @%append dummy.lnk system $(TARGET) dll
        @%append dummy.lnk name $(DLLTEST1)
        @%append dummy.lnk file test1.dlo
        @%append dummy.lnk export Test1Function1
        @%append dummy.lnk export Test1Function2
        @%append dummy.lnk export Test1LoadFuncs
        @%append dummy.lnk export Test1DropFuncs
        @%append dummy.lnk library $(IMPFILE)
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

$(DLLTEST2): test2.dlo $(IMPFILE)
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option caseexact
        @%append dummy.lnk system $(TARGET) dll
        @%append dummy.lnk name $(DLLTEST2)
        @%append dummy.lnk file test2.dlo
        @%append dummy.lnk export Test2Function1
        @%append dummy.lnk export Test2Function2
        @%append dummy.lnk export Test2LoadFuncs
        @%append dummy.lnk export Test2DropFuncs
        @%append dummy.lnk library $(IMPFILE)
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

$(IMPFILE): $(DLLFILE)
        $(LIBEXE) $(LIBFLAGS) $(DLLBASE) +$(DLLFILE)

#
# rules for making normal object files
#
funcs.obj:    $(SRC)funcs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

builtin.obj:  $(SRC)builtin.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

error.obj:    $(SRC)error.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

variable.obj: $(SRC)variable.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

interprt.obj: $(SRC)interprt.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

debug.obj:    $(SRC)debug.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

dbgfuncs.obj: $(SRC)dbgfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

memory.obj:   $(SRC)memory.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

parsing.obj:  $(SRC)parsing.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

files.obj:    $(SRC)files.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

misc.obj:     $(SRC)misc.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

unxfuncs.obj: $(SRC)unxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

arxfuncs.obj: $(SRC)arxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

os2funcs.obj: $(SRC)os2funcs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

cmsfuncs.obj: $(SRC)cmsfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

shell.obj:    $(SRC)shell.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

rexxext.obj:  $(SRC)rexxext.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

stack.obj:    $(SRC)stack.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

tracing.obj:  $(SRC)tracing.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

interp.obj:   $(SRC)interp.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

cmath.obj:    $(SRC)cmath.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

convert.obj:  $(SRC)convert.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

strings.obj:  $(SRC)strings.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

library.obj:  $(SRC)library.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

strmath.obj:  $(SRC)strmath.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

signals.obj:  $(SRC)signals.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

macros.obj:   $(SRC)macros.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

envir.obj:    $(SRC)envir.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

expr.obj:     $(SRC)expr.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

mt_notmt.obj: $(SRC)mt_notmt.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

instore.obj:  $(SRC)instore.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

wrappers.obj: $(SRC)wrappers.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

options.obj:  $(SRC)options.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

os_os2.obj:   $(SRC)os_os2.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

extstack.obj: $(SRC)extstack.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

rexxbif.obj:  $(SRC)rexxbif.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

rexx.obj:   $(SRC)rexx.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

lexsrc.obj : $(SRC)lexsrc.c $(SRC)yaccsrc.h $(SRC)rexx.h
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

#lexsrc.c : lexsrc.l
#       $(LEX) lexsrc.l
#       $(MV) lex.yy.c lexsrc.c

yaccsrc.obj: $(SRC)yaccsrc.c $(SRC)defs.h $(SRC)rexx.h
        $(CC) $(CCFLAGS) /dYYMAXDEPTH=10000 /fo=$@ $(SRC)$*.c

#yaccsrc.c yaccsrc.h : yaccsrc.y
#       $(YACC) -dv yaccsrc.y
#       $(MV) y.tab.h yaccsrc.h
#       $(MV) y.tab.c yaccsrc.c

drexx.obj: $(SRC)rexx.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=drexx.obj /dRXLIB $(SRC)rexx.c

client.obj: $(SRC)client.c $(HFILES) $(SRC)rexxsaa.h $(SRC)rxiface.h
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

rexxsaa.obj: $(SRC)rexxsaa.c $(HFILES) $(SRC)rexxsaa.h $(SRC)rxiface.h
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

nosaa.obj: $(SRC)nosaa.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)$*.c

#
# rules for DLL objects
#
funcs.dlo:    $(SRC)funcs.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

builtin.dlo:  $(SRC)builtin.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

error.dlo:    $(SRC)error.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

variable.dlo: $(SRC)variable.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

interprt.dlo: $(SRC)interprt.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

debug.dlo:    $(SRC)debug.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

dbgfuncs.dlo: $(SRC)dbgfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

memory.dlo:   $(SRC)memory.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

parsing.dlo:  $(SRC)parsing.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

files.dlo:    $(SRC)files.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

misc.dlo:     $(SRC)misc.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

unxfuncs.dlo: $(SRC)unxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

arxfuncs.dlo: $(SRC)arxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

os2funcs.dlo: $(SRC)os2funcs.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

cmsfuncs.dlo: $(SRC)cmsfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

shell.dlo:    $(SRC)shell.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

rexxext.dlo:  $(SRC)rexxext.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

stack.dlo:    $(SRC)stack.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

tracing.dlo:  $(SRC)tracing.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

interp.dlo:   $(SRC)interp.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

cmath.dlo:    $(SRC)cmath.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

convert.dlo:  $(SRC)convert.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

strings.dlo:  $(SRC)strings.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

library.dlo:  $(SRC)library.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) $(DYN_CFLAGS) /bd /fo=$*.dlo $(SRC)$*.c

strmath.dlo:  $(SRC)strmath.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

signals.dlo:  $(SRC)signals.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

macros.dlo:   $(SRC)macros.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

envir.dlo:    $(SRC)envir.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

mt_os2.dlo:   $(SRC)mt_os2.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

mt_notmt.dlo: $(SRC)mt_notmt.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

instore.dlo:  $(SRC)instore.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

expr.dlo:     $(SRC)expr.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

wrappers.dlo: $(SRC)wrappers.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) $(DYN_CFLAGS) /bd /fo=$*.dlo $(SRC)$*.c

options.dlo:  $(SRC)options.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

os_os2.dlo:   $(SRC)os_os2.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

extstack.dlo: $(SRC)extstack.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

rexxbif.dlo:  $(SRC)rexxbif.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

rexx.dlo:   $(SRC)rexx.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

lexsrc.dlo : $(SRC)lexsrc.c $(SRC)yaccsrc.h $(SRC)rexx.h
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

#lexsrc.c : lexsrc.l
#       $(LEX) lexsrc.l
#       $(MV) lex.yy.c lexsrc.c

yaccsrc.dlo: $(SRC)yaccsrc.c $(SRC)defs.h $(SRC)rexx.h
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /dYYMAXDEPTH=10000 /bd /fo=$*.dlo $(SRC)$*.c

#yaccsrc.c yaccsrc.h : yaccsrc.y
#       $(YACC) -dv yaccsrc.y
#       $(MV) y.tab.h yaccsrc.h
#       $(MV) y.tab.c yaccsrc.c

drexx.dlo: $(SRC)rexx.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /fo=drexx.dlo /dRXLIB $(SRC)rexx.c

client.dlo: $(SRC)client.c $(HFILES) $(SRC)rexxsaa.h $(SRC)rxiface.h
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

rexxsaa.dlo: $(SRC)rexxsaa.c $(HFILES) $(SRC)rexxsaa.h $(SRC)rxiface.h
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)$*.c

gci_call.dlo: $(SRC)gci\gci_call.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_convert.dlo: $(SRC)gci\gci_convert.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_execute.dlo: $(SRC)gci\gci_execute.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_helper.dlo: $(SRC)gci\gci_helper.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_prepare.dlo: $(SRC)gci\gci_prepare.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_reginabridge.dlo: $(SRC)gci\gci_reginabridge.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_rxfuncdefine.dlo: $(SRC)gci\gci_rxfuncdefine.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_tree.dlo: $(SRC)gci\gci_tree.c $(GCIHEADERS)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /bd /fo=$*.dlo $(SRC)gci\$*.c

gci_convert.h: $(SRC)\gci\gci_convert.os2.wcc
         copy $(SRC)\gci\gci_convert.os2.wcc .\gci_convert.h

test1.dlo:   $(SRC)test1.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) /bd /fo=$*.dlo $(SRC)$*.c

test2.dlo:   $(SRC)test2.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) /bd /fo=$*.dlo $(SRC)$*.c

regina.obj:   $(SRC)regina.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /fo=$*.obj $(SRC)$*.c

execiser.obj:   $(SRC)execiser.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) /fo=$*.obj $(SRC)$*.c

threader.obj:   $(SRC)threader.c $(HFILES)
        $(CC) $(CCFLAGS) $(THREADING) $(HAVE_GCI) -DOS2_THREADS /fo=$*.obj $(SRC)$*.c

# DO NOT DELETE THIS LINE -- make depend depends on it.
