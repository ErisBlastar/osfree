#
# Makefile for Regina REXX Interpreter using OpenWatcom C/C++ 1.0+
# Target is dos4g
# Build system is intended to be command.com on Windows
# Ensure REGINA_SRCDIR is short otherwise msgcmp.exe will fail with a too long command line
#

SRC=$(%REGINA_SRCDIR)

!include $(SRC)\regina.ver

LIBFILE=rexx.lib
DLLBASE=regina
DLLFILE=$(DLLBASE).lib
IMPFILE=$(DLLBASE).lib

DLLTEST1=rxtest1.lib
DLLTEST2=rxtest2.lib

CC              = wcc386
TARGET=dos4g
MULTI = N

!ifeq DEBUG Y
CFLAGS  = /d2 /bt=$(TARGET)
LDFLAGS = DEBUG WATCOM ALL
!ifeq TRACEMEM Y
MEMTRACE = /DTRACEMEM
!else
MEMTRACE =
!endif
!else
CFLAGS  =  /DNDEBUG /oneatx /bt=$(TARGET)
LDFLAGS =
!endif

!ifeq FLISTS N
NOFLISTS = /uFLISTS
!else
NOFLISTS =
!endif

!ifeq MULTI Y
THREADING_COMPILE = /bm
MT_FILE = mt_win32
THREADING_TARGET = threader.exe
!else
THREADING_COMPILE =
MT_FILE = mt_notmt
THREADING_TARGET =
!endif

OFILES =      &
funcs.obj     &
builtin.obj   &
error.obj     &
variable.obj  &
interprt.obj  &
debug.obj     &
dbgfuncs.obj  &
memory.obj    &
parsing.obj   &
files.obj     &
misc.obj      &
unxfuncs.obj  &
os2funcs.obj  &
cmsfuncs.obj  &
arxfuncs.obj  &
shell.obj     &
rexxext.obj   &
stack.obj     &
tracing.obj   &
interp.obj    &
cmath.obj     &
convert.obj   &
strings.obj   &
library.obj   &
strmath.obj   &
signals.obj   &
macros.obj    &
envir.obj     &
expr.obj      &
yaccsrc.obj   &
lexsrc.obj    &
wrappers.obj  &
options.obj   &
instore.obj   &
extstack.obj  &
rexxbif.obj   &
$(MT_FILE).obj   &
os_other.obj

DLOFILES =      &
funcs.dlo     &
builtin.dlo   &
error.dlo     &
variable.dlo  &
interprt.dlo  &
debug.dlo     &
dbgfuncs.dlo  &
memory.dlo    &
parsing.dlo   &
files.dlo     &
misc.dlo      &
unxfuncs.dlo  &
os2funcs.dlo  &
cmsfuncs.dlo  &
arxfuncs.dlo  &
shell.dlo     &
rexxext.dlo   &
stack.dlo     &
tracing.dlo   &
interp.dlo    &
cmath.dlo     &
convert.dlo   &
strings.dlo   &
library.dlo   &
strmath.dlo   &
signals.dlo   &
macros.dlo    &
envir.dlo     &
expr.dlo      &
yaccsrc.dlo   &
lexsrc.dlo    &
wrappers.dlo  &
options.dlo   &
instore.dlo   &
extstack.dlo  &
rexxbif.dlo   &
$(MT_FILE).dlo   &
staticld.dlo &
os_other.dlo

!ifeq STATIC_TEST Y
STATIC_PACKAGES = -DHAVE_TEST_PACKAGE
DYNAMIC_FLAGS = /DDYNAMIC /DDYNAMIC_STATIC
!endif

#
# if VER_SUPP not blank, may need to add double quotes
#
CEXTRA          = -DREGINA_VERSION_DATE=$(VER_DATE) -DREGINA_VERSION_MAJOR="$(VER_MAJOR)" -DREGINA_VERSION_MINOR="$(VER_MINOR)" -DREGINA_VERSION_SUPP=$(VER_SUPP)
CPPFLAGS        = /DDOS /DNO_EXTERNAL_QUEUES /i=$(SRC) $(STATIC_PACKAGES)
CCFLAGS         = /ei /zq /mf $(CFLAGS) $(CPPFLAGS) $(CEXTRA) $(MEMTRACE) $(NOFLISTS) $(THREADING_COMPILE)

DYN_COMP        = $(DYNAMIC_FLAGS) $(THREADING_COMPILE)

LINK            = wlink

LIBEXE          = wlib
LIBFLAGS                = /q /n

HFILES = $(SRC)\rexx.h $(SRC)\defs.h $(SRC)\extern.h $(SRC)\regina_t.h $(SRC)\strings.h

MTSSRC = $(SRC)\en.mts $(SRC)\pt.mts $(SRC)\no.mts $(SRC)\de.mts $(SRC)\es.mts $(SRC)\pl.mts $(SRC)\tr.mts

all : rexx.exe execiser.exe $(DLLFILE) $(LIBFILE) rxtest1.lib rxtest2.lib regina.exe mtb_files

rexx.exe : $(OFILES) rexx.obj nosaa.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option stack=0x20000
        @%append dummy.lnk option heapsize=40960
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name rexx.exe
        @%append dummy.lnk file rexx.obj
        @%append dummy.lnk file nosaa.obj
        for %i in ($(OFILES)) do %append dummy.lnk file %i
        $(LINK) $(LDFLAGS) @dummy.lnk
        %erase dummy.lnk

regina.exe : $(IMPFILE) regina.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option stack=0x20000
        @%append dummy.lnk option heapsize=40960
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name regina.exe
        @%append dummy.lnk file regina.obj
        @%append dummy.lnk file $(IMPFILE)
        if $(STATIC_TEST)==Y %append dummy.lnk library rxtest1.lib
        if $(STATIC_TEST)==Y %append dummy.lnk library rxtest2.lib
        $(LINK) $(LDFLAGS) @dummy.lnk
        %erase dummy.lnk

execiser.exe : $(IMPFILE) execiser.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option stack=0x20000
        @%append dummy.lnk option heapsize=40960
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name execiser.exe
        @%append dummy.lnk file execiser.obj
        @%append dummy.lnk file $(IMPFILE)
        if $(STATIC_TEST)==Y %append dummy.lnk library rxtest1.lib
        if $(STATIC_TEST)==Y %append dummy.lnk library rxtest2.lib
        $(LINK) $(LDFLAGS) @dummy.lnk
        %erase dummy.lnk

rxstack.exe : rxstack.obj erexxbif.obj eextstack.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option stack=0x20000
        @%append dummy.lnk option heapsize=40960
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name rxstack.exe
        @%append dummy.lnk file rxstack.obj
        @%append dummy.lnk file eextstack.obj
        @%append dummy.lnk file erexxbif.obj
        @%append dummy.lnk library user32,wsock32
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

rxqueue.exe : rxqueue.obj erexxbif.obj eextstack.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option stack=0x20000
        @%append dummy.lnk option heapsize=40960
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name rxqueue.exe
        @%append dummy.lnk file rxqueue.obj
        @%append dummy.lnk file eextstack.obj
        @%append dummy.lnk file erexxbif.obj
        @%append dummy.lnk library user32,wsock32
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

$(LIBFILE): $(OFILES) client.obj drexx.obj rexxsaa.obj
        @%create lib.rsp
        @%append lib.rsp +client.obj
        @%append lib.rsp +drexx.obj
        @%append lib.rsp +rexxsaa.obj
        for %i in ($(OFILES)) do %append lib.rsp +%i
        $(LIBEXE) $(LIBFLAGS) $@ @lib.rsp
        del lib.rsp

$(DLLFILE): $(DLOFILES) client.dlo drexx.dlo rexxsaa.dlo
        @%create lib.rsp
        @%append lib.rsp +client.dlo
        @%append lib.rsp +drexx.dlo
        @%append lib.rsp +rexxsaa.dlo
        for %i in ($(DLOFILES)) do %append lib.rsp +%i
        $(LIBEXE) $(LIBFLAGS) $@ @lib.rsp
        del lib.rsp

$(DLLTEST1): test1.dlo
        @%create lib.rsp
        @%append lib.rsp +test1.dlo
        $(LIBEXE) $(LIBFLAGS) $@ @lib.rsp
        %erase lib.rsp

$(DLLTEST2): test2.dlo
        @%create lib.rsp
        @%append lib.rsp +test2.dlo
        $(LIBEXE) $(LIBFLAGS) $@ @lib.rsp
        %erase lib.rsp

#
# rules for making normal object files
#
funcs.obj:    $(SRC)\funcs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

builtin.obj:  $(SRC)\builtin.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

error.obj:    $(SRC)\error.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

variable.obj: $(SRC)\variable.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

interprt.obj: $(SRC)\interprt.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

debug.obj:    $(SRC)\debug.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

dbgfuncs.obj: $(SRC)\dbgfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

memory.obj:   $(SRC)\memory.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

parsing.obj:  $(SRC)\parsing.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

files.obj:    $(SRC)\files.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

misc.obj:     $(SRC)\misc.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

unxfuncs.obj: $(SRC)\unxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

arxfuncs.obj: $(SRC)\arxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

os2funcs.obj: $(SRC)\os2funcs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

cmsfuncs.obj: $(SRC)\cmsfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

shell.obj:    $(SRC)\shell.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

rexxext.obj:  $(SRC)\rexxext.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

stack.obj:    $(SRC)\stack.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

tracing.obj:  $(SRC)\tracing.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

interp.obj:   $(SRC)\interp.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

cmath.obj:    $(SRC)\cmath.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

convert.obj:  $(SRC)\convert.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

strings.obj:  $(SRC)\strings.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

library.obj:  $(SRC)\library.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

strmath.obj:  $(SRC)\strmath.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

signals.obj:  $(SRC)\signals.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

macros.obj:   $(SRC)\macros.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

envir.obj:    $(SRC)\envir.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

expr.obj:     $(SRC)\expr.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

wrappers.obj: $(SRC)\wrappers.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

options.obj:  $(SRC)\options.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

os_other.obj:   $(SRC)\os_other.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

instore.obj:  $(SRC)\instore.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

extstack.obj:  $(SRC)\extstack.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

rexxbif.obj:  $(SRC)\rexxbif.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

eextstack.obj:  $(SRC)\extstack.c $(HFILES)
        $(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\extstack.c

erexxbif.obj:  $(SRC)\rexxbif.c $(HFILES)
        $(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\rexxbif.c

rxstack.obj:  $(SRC)\rxstack.c $(HFILES)
        $(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\$*.c

rxqueue.obj:  $(SRC)\rxqueue.c $(HFILES)
        $(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\$*.c

nosaa.obj:    $(SRC)\nosaa.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

mt_win32.obj: $(SRC)\mt_win32.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

mt_notmt.obj: $(SRC)\mt_notmt.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

rexx.obj:   $(SRC)\rexx.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

lexsrc.obj : $(SRC)\lexsrc.c $(SRC)\yaccsrc.h $(SRC)\rexx.h
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

#lexsrc.c : lexsrc.l
#       $(LEX) lexsrc.l
#       $(MV) lex.yy.c lexsrc.c

yaccsrc.obj: $(SRC)\yaccsrc.c $(SRC)\defs.h $(SRC)\rexx.h
        $(CC) $(CCFLAGS) /DYYMAXDEPTH=10000 /fo=$@ $(SRC)\$*.c

#yaccsrc.c yaccsrc.h : yaccsrc.y
#       $(YACC) -dv yaccsrc.y
#       $(MV) y.tab.h yaccsrc.h
#       $(MV) y.tab.c yaccsrc.c

drexx.obj: $(SRC)\rexx.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=drexx.obj -DRXLIB $(SRC)\rexx.c

client.obj: $(SRC)\client.c $(HFILES) $(SRC)\rexxsaa.h $(SRC)\rxiface.h
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

rexxsaa.obj: $(SRC)\rexxsaa.c $(HFILES) $(SRC)\rexxsaa.h $(SRC)\rxiface.h
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

#
# rules for DLL objects
#
funcs.dlo:    $(SRC)\funcs.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

staticld.dlo:    $(SRC)\staticld.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

builtin.dlo:  $(SRC)\builtin.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

error.dlo:    $(SRC)\error.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

variable.dlo: $(SRC)\variable.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

interprt.dlo: $(SRC)\interprt.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

debug.dlo:    $(SRC)\debug.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

dbgfuncs.dlo: $(SRC)\dbgfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

memory.dlo:   $(SRC)\memory.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

parsing.dlo:  $(SRC)\parsing.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

files.dlo:    $(SRC)\files.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

misc.dlo:     $(SRC)\misc.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

unxfuncs.dlo: $(SRC)\unxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

arxfuncs.dlo: $(SRC)\arxfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

os2funcs.dlo: $(SRC)\os2funcs.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

cmsfuncs.dlo: $(SRC)\cmsfuncs.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

shell.dlo:    $(SRC)\shell.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

rexxext.dlo:  $(SRC)\rexxext.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

stack.dlo:    $(SRC)\stack.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

extstack.dlo:  $(SRC)\extstack.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$@ $(SRC)\extstack.c

tracing.dlo:  $(SRC)\tracing.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

interp.dlo:   $(SRC)\interp.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

cmath.dlo:    $(SRC)\cmath.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

convert.dlo:  $(SRC)\convert.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

strings.dlo:  $(SRC)\strings.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

library.dlo:  $(SRC)\library.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

strmath.dlo:  $(SRC)\strmath.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

signals.dlo:  $(SRC)\signals.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

macros.dlo:   $(SRC)\macros.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

envir.dlo:    $(SRC)\envir.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

expr.dlo:     $(SRC)\expr.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

wrappers.dlo: $(SRC)\wrappers.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

options.dlo:  $(SRC)\options.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

os_other.dlo:   $(SRC)\os_other.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

instore.dlo:  $(SRC)\instore.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

rexxbif.dlo:  $(SRC)\rexxbif.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

exstack.obj:  $(SRC)\exstack.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

nosaa.dlo:    $(SRC)\nosaa.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

mt_win32.dlo: $(SRC)\mt_win32.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

mt_notmt.dlo: $(SRC)\mt_notmt.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

rexx.dlo:   $(SRC)\rexx.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

lexsrc.dlo : $(SRC)\lexsrc.c $(SRC)\yaccsrc.h $(SRC)\rexx.h
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

#lexsrc.c : lexsrc.l
#       $(LEX) lexsrc.l
#       $(MV) lex.yy.c lexsrc.c

yaccsrc.dlo: $(SRC)\yaccsrc.c $(SRC)\defs.h $(SRC)\rexx.h
        $(CC) $(CCFLAGS) /DYYMAXDEPTH=10000 $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

#yaccsrc.c yaccsrc.h : yaccsrc.y
#       $(YACC) -dv yaccsrc.y
#       $(MV) y.tab.h yaccsrc.h
#       $(MV) y.tab.c yaccsrc.c

drexx.dlo: $(SRC)\rexx.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=drexx.dlo -DRXLIB $(SRC)\rexx.c

client.dlo: $(SRC)\client.c $(HFILES) $(SRC)\rexxsaa.h $(SRC)\rxiface.h
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

rexxsaa.dlo: $(SRC)\rexxsaa.c $(HFILES) $(SRC)\rexxsaa.h $(SRC)\rxiface.h
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c


test1.dlo:   $(SRC)\test1.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

test2.dlo:   $(SRC)\test2.c $(HFILES)
        $(CC) $(CCFLAGS) $(DYN_COMP) /fo=$*.dlo $(SRC)\$*.c

regina.obj:   $(SRC)\regina.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$*.obj $(SRC)\$*.c

rexxa.obj:   $(SRC)\regina.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$*.obj $(SRC)\regina.c

execiser.obj:   $(SRC)\execiser.c $(HFILES)
        $(CC) $(CCFLAGS) /fo=$*.obj $(SRC)\$*.c

threader.obj:   $(SRC)\threader.c $(HFILES)
        $(CC) $(CCFLAGS) -DWIN32_THREADS /fo=$*.obj $(SRC)\$*.c

#
# Convert .mts to .mtb
#
mtb_files: msgcmp.exe $(MTSSRC) .SYMBOLIC
        msgcmp $(MTSSRC)

msgcmp.exe : msgcmp.obj
        @%create dummy.lnk
        @%append dummy.lnk option quiet
        @%append dummy.lnk option stack=0x10000000
        @%append dummy.lnk option heapsize=40960
        @%append dummy.lnk system $(TARGET)
        @%append dummy.lnk name msgcmp.exe
        @%append dummy.lnk file msgcmp.obj
        $(LINK) $(LDFLAGS) @dummy.lnk
        del dummy.lnk

msgcmp.obj: $(SRC)\msgcmp.c
        $(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

binary:
	-mkdir dist
	cd dist
	-del /F /S *.*
	copy ..\regina.exe
	copy ..\rexx.exe
	copy ..\*.mtb
	copy $(SRC)\COPYING-LIB
	copy $(SRC)\README.$(VER) README$(VER).txt
	copy $(SRC)\README.DOS4G README.txt
	-mkdir include
	copy $(SRC)\rexxsaa.h include
	-mkdir lib
	copy ..\regina.lib lib
	copy ..\rexx.lib lib
	-mkdir demo
	copy $(SRC)\demo\*.rexx demo
	-del ..\regina??dos4g.zip
	zip -r ..\regina$(VER)dos4g *
	cd ..

# DO NOT DELETE THIS LINE -- make depend depends on it.
