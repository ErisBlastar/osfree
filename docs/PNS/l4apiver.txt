 2) Версии API, соответствия их реализациям L4
 (Этот раздел -- пересказ страницы http://l4hq.org/kernels/ [17].)

 На протяжении истории L4 -- с начала 1990-х гг, менялось API -- начиная с оригинального API L4/x86, написанного
 на ассемблере под 486 процессор, продолжая независимым от архитектуры API version X.2 L4Ka::Pistachio, и кончая
 Pistachio-embedded API и API OKL4.

 Причин этому было несколько -- поддержка новых архитектур, их возможностей, добавление более эффективных абстракций
 и механизмов, а также эксперименты с новыми возможностями и поиск путей развития.

 Многие из этих API носят экспериментальный характер, они быстро меняются. Их названия начинаются с X.: X.0, X.2.
 (eXperimental). Общепринятыми и стандартизованными API являются API V.0, V.2, V.4, а также серия API L4, разработанных
 в NICTA, они начинаются с N.

 a) API version V.2

 Это оригинальный API L4. Специфичен для архитектуры x86 и имеет ряд недостатков. Этот API поддерживался оригинальным
 ядром L4/x86, написанным на ассемблере. Данная версия API имела 64-битные Thread ID's. Также, треды в этой версии были
 жестко привязаны к своему адресному пространству, что делало невозможной миграцию тредов между адресными пространствами.
 -- важная необходимость для многих случаев, например, для NUMA-систем. API L4/Fiasco -- это улучшенное API V.2.

 б) API version X.0

 Экспериментальная, но стабильная версия API. Не очень сильно отличается от V.2. По сравнению с V.2, размер Thread ID
 изменен на 32 бита. Это освободило один регистр процессора в случае IA32, что позволило применить этот регистр для IPC
 с маленькими сообщениями, передаваемыми через регистры. Также это решило проблемы с эффективностью назначения Thread
 ID's -- увеличилась производительность многих приложений. Кроме того, эта версия API не содержала концепции Кланов и
 Шефов, которая в реализации API V.2 была признана неэффективной (был большой оверхед при перенаправлении сообщений)
 Подробнее о кланах и шефах см. раздел "Механизмы и API L4".

 Эту версию API реализует L4Ka::Hazelnut. Более эффективная схема перенаправления сообщений, чем кланы и шефы версии
 V.2, была реализована во внутренних IBM'овских реализациях L4. (Не в L4Ka::Hazelnut).

 в) API version X.2 (aka version V.4)

 Решает множество проблем API X.0. Управление адресными пространствами и тредами полностью отделено друг от друга, Thread
 ID's теперь назначаются независимо от Task ID's. Управление памятью стало более эффективным и IPC тоже реализовано более
 эффективно. Теперь передача как маленьких сообщений, так и сообщений среднего размера, была реализована эффективно.
 Управление процессором также стало более эффективным. Введена поддержка многопроцессорности. API стало независимым от
 архитектуры. Четко разделены API и ABI, что сделало приложения API version X.2 более переносимыми. Эта версия API
 постепенно стабилизируется и должна быть утверждена в качестве version V.4. Появилось это API в L4Ka::Pistachio.

 г) Серия API версий N...

 Австралийская организация NICTA (National ICT Australia) на основе API version X.2 создает серию API N1, N2,...
 направленную на встраиваемые применения. Этот API поддерживают ядра NICTA::Pistachio-embedded, разработанные для
 embedded устройств. Они поддерживают архитектуры ARM, MIPS и x86. Реализация для ARM-архитектуры очень отлажена,
 устойчива и применяется на индустриальном уровне (tuned, mature and deployed industrially).

 д) OKL4 API

 NICTA создала коммерческую компанию под названием Open Kernel Labs, которая на основе API серии N разрабатывает
 ядра OKL4 с сервисами на основе Iguana Embedded OS Personality и Wombat Linux server. OK Labs сотрудничает вместе с
 NICTA и работает над созданием надежного ядра для коммерческих применений с формально доказанной правильностью алгоритмов.
 (to provide a secure, formally-verified version of kernel).
