.TH rc 1 "29 Jun 1996" "Willows TWIN XPDK" "TWIN XPDK Tools"
.SH NAME
rc \- Windows resource compiler
.SH SYNOPSIS
.B rc [ 
.BI -a n
.B ] [ -b ] [
.BI -D val
.B ] [
.BI -e endian
.B ] [ -h ] [
.BI -I path
.B ] [ -i ] [ -l ] [
.BI -n table
.B ] [
.BI -o file
.B ] [ 
.BI -U keyword
.B ] [ -v ] [ -V ] [ -? ] [ 
.BI --align= n
.B ] [ --big-endian ] [
.BI --define= val
.B ] [
.BI --endian= endian
.B ] [
.BI --include-path= path
.B ] [ --little-endian ] [
.BI --table-name= table
.B ] [
.BI --output-file= file
.B ] [
.BI --undefine= keyword
.B ] [ --verbose ] [ --version ] [ --help ]
.I SourceFile
.SH DESCRIPTION
.B rc
compiles a Windows resource file into a C source file.
.B rc
includes its own C preprocessor, as a replacement for
.BR cpp (1).
This preprocessor can be controlled with the
.BR -D ,
.BR -I ,
and
.B -U
switches; see the OPTIONS section below for details.

.B rc
is typically used within a TWIN makefile to compile the Windows
resources, such as dialog boxes, menus, and icons, associated
with a Windows application.  The C source file produced by
.B rc
is compiled and linked with the executable to provide resource
functionality to the application.

In a project using the
.I makefile.inc
include file provided in the TWIN distribution,
.B rc
is automatically run by
.BR make (1)
if the
.I resource
variable is set to the basename of the resource script in the
makefile.
.SH OPTIONS
TWIN
.B rc
supports both standard, single-character options and GNU-style long options.
.TP
.BI -a "n, " --align= n
Set byte-alignment for RCDATA and user-defined resources.  
.I n
can be the integer values 1, 2, or 4, for byte-alignment, word-alignment, and doubleword-alignment,
respectively.
.BI -a s
(short alignment) is a synonym for
.BI -a 2
;
.BI -a l
(long alignment) is a synonym for
.BI -a 4.
.TP
.BI -b ", " --big-endian
Use big-endian format for the output of integers in RCDATA and user-defined resources.
.TP
.BI -D "val, " --define= val
Define the symbol
.IR val .
If
.I val
is of the form
.IR keyword = val ,
define
.I keyword
to have the value
.IR val .
.TP
.BI -e "endian, " --endian= endian
Use
.IR endian -endian
format for the output of integers in RCDATA and user-defined resources, where
.I endian
is either
.I big
or 
.IR little.
.TP
.BI -I "path, " --include-path= path
Add
.I path
to the include directory search path.  This path is searched for files specified in #include directives
and for files referenced in resource statements.
.TP
.BR -i ", " -l ", " --little-endian
Use little-endian format for the output of integers in RCDATA and user-defined resources.
.TP
.BI -n "table, " --table-name= table
Set the table name to be used for the resources.  See
.I Resource files in DLLs
below.
.TP
.BI -o "file, " --output-file-name= file
Set the output resource source file name.  By default the name
is the input file name with the .rc extension replaced by .res.c.
The compiled file will have a .res.o extension.
.TP
.BI -U "keyword, " --undefine= keyword
Undefine the symbol
.IR keyword ,
if it was previously defined.
.TP
.BI -v ", " --verbose
Produce verbose output.
This option will output status information as the resource 
compiler is executing.
.TP
.BI -V ", " --version
Display the version number of TWIN rc.
.TP
.BI -h ", " -? ", " --help
Display a summary of options.
.SH FILES
.B rc
uses the following files:
.TP
.I *.rc
Input resource file
.TP
.I *.res.c
Output C file
.TP
.I windows.h
Include file containing standard constant definitions
.SH RESOURCE FILE EXTENSIONS
Willows
.B rc
supports several extensions to the standard Microsoft resource file definition.  These are used for
Unix-specific considerations and the inclusion of multiple resource scripts in the same project.
.SS User-data resources
User-data resources are specified by RCDATA statements in the resource file, and by external
type names.
.B rc
supports two extensions to the standard format, which can also be controlled from the
command line.  The
.B ALIGN
statement allows a specific user-defined resource to be aligned
to a specific boundary.
.B ALIGN 1
forces integers to be byte-aligned (the default, unless the
.B -a
switch is given).
.B ALIGN 2
or
.B ALIGN short
forces integers to be word-aligned (the same as the
.BI -a 2
or
.BI -a s
command-line switches);
.B ALIGN 4
or
.B ALIGN long
forces integers to be doubleword-aligned (equivalent to the
.BI -a 4
or 
.BI -a l
switches).

The
.B ENDIAN
statement controls the output format of integers.
.B ENDIAN little
(or
.BR -l ,
.BR -i ,
or
.BI --endian= little
from the command line) forces integers to be in little-endian format, with the least-significant
byte coming first in the output file.
.B ENDIAN big
(or
.BI --endian= big
or
.BR -b )
causes integers to be output in big-endian format, placing the most-significant byte first.

These statements come after the RCDATA declaration but before the data definition:

.RS
"foo" RCDATA ALIGN short ENDIAN little { 0x04, 0x0d }
.RE
.SS Resource files in DLLs
TWIN expects each module's resource script to have a different internal name.  Applications should
have the table name "appl", the default.  Windows Dynamic Link Libraries (DLLs) or TWIN shared-object
DLLs should have the table name be the same as that of the library.  This can be done from the command
line with the
.BI -n name
or
.BI --table-name= name
switches, or by placing the
.B TABLENAME
.I name
directive in the resource script, where
.I name
is the name of the library.  More generally, the
.B -n
and
.B --table-name
switches and the
.B TABLENAME
directive can be used to give a resource script any internal name, possibly to use more than one
resource file in the same project.  The table name must also be changed in the command line to
the module-definition compiler,
.BR mdc ,
using the
.B -r
switch.

.B TABLENAME
can appear anywhere in a resource script outside of a resource definition:

.RS
#include <windows.h>

TABLENAME table

DIALOG ...
.RE

.SH SEE ALSO
Willows Toolkit
.I Getting Started
Guide,
.BR mdc (1)
.SH BUGS
The internal preprocessor does not properly handle parameterized macros.  Constructs such as

#define LOWORD(x) ((x)&0xFFFF)

are not properly expanded.  Such a statement, if encountered in a header file, will be recognized and processed,
but the macro expansion will cause an error.

Segment-load flags on individual string-table resources are ignored.  The last specified set of flags applies to
all string-table resources.

Many platforms have preprocessor-specific directives.  CodeWarrior on the Macintosh has a __option
macro; HP/UX supports a #ident directive.  The former will cause a parse error, while the latter
will cause an "unknown preprocessor directive" error.  These problems can be avoided by enclosing
all system header include files in an
.B #ifndef RC_INVOKED
block.

Error reporting is spotty at best.
