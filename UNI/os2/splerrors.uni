group splerrors;

constant PMERR_SPL_DRIVER_ERROR             = $4001;
constant PMERR_SPL_DEVICE_ERROR             = $4002;
constant PMERR_SPL_DEVICE_NOT_INSTALLED     = $4003;
constant PMERR_SPL_QUEUE_ERROR              = $4004;
constant PMERR_SPL_INV_HSPL                 = $4005;
constant PMERR_SPL_NO_DISK_SPACE            = $4006;
constant PMERR_SPL_NO_MEMORY                = $4007;
constant PMERR_SPL_PRINT_ABORT              = $4008;
constant PMERR_SPL_SPOOLER_NOT_INSTALLED    = $4009;
constant PMERR_SPL_INV_FORMS_CODE           = $400A;
constant PMERR_SPL_INV_PRIORITY             = $400B;
constant PMERR_SPL_NO_FREE_JOB_ID           = $400C;
constant PMERR_SPL_NO_DATA                  = $400D;
constant PMERR_SPL_INV_TOKEN                = $400E;
constant PMERR_SPL_INV_DATATYPE             = $400F;
constant PMERR_SPL_PROCESSOR_ERROR          = $4010;
constant PMERR_SPL_INV_JOB_ID               = $4011;
constant PMERR_SPL_JOB_NOT_PRINTING         = $4012;
constant PMERR_SPL_JOB_PRINTING             = $4013;
constant PMERR_SPL_QUEUE_ALREADY_EXISTS     = $4014;
constant PMERR_SPL_INV_QUEUE_NAME           = $4015;
constant PMERR_SPL_QUEUE_NOT_EMPTY          = $4016;
constant PMERR_SPL_DEVICE_ALREADY_EXISTS    = $4017;
constant PMERR_SPL_DEVICE_LIMIT_REACHED     = $4018;
constant PMERR_SPL_STATUS_STRING_TRUNC      = $4019;
constant PMERR_SPL_INV_LENGTH_OR_COUNT      = $401A;
constant PMERR_SPL_FILE_NOT_FOUND           = $401B;
constant PMERR_SPL_CANNOT_OPEN_FILE         = $401C;
constant PMERR_SPL_DRIVER_NOT_INSTALLED     = $401D;
constant PMERR_SPL_INV_PROCESSOR_DATTYPE    = $401E;
constant PMERR_SPL_INV_DRIVER_DATATYPE      = $401F;
constant PMERR_SPL_PROCESSOR_NOT_INST       = $4020;
constant PMERR_SPL_NO_SUCH_LOG_ADDRESS      = $4021;
constant PMERR_SPL_PRINTER_NOT_FOUND        = $4022;
constant PMERR_SPL_DD_NOT_FOUND             = $4023;
constant PMERR_SPL_QUEUE_NOT_FOUND          = $4024;
constant PMERR_SPL_MANY_QUEUES_ASSOC        = $4025;
constant PMERR_SPL_NO_QUEUES_ASSOCIATED     = $4026;
constant PMERR_SPL_INI_FILE_ERROR           = $4027;
constant PMERR_SPL_NO_DEFAULT_QUEUE         = $4028;
constant PMERR_SPL_NO_CURRENT_FORMS_CODE    = $4029;
constant PMERR_SPL_NOT_AUTHORISED           = $402A;
constant PMERR_SPL_TEMP_NETWORK_ERROR       = $402B;
constant PMERR_SPL_HARD_NETWORK_ERROR       = $402C;
constant PMERR_DEL_NOT_ALLOWED              = $402D;
constant PMERR_CANNOT_DEL_QP_REF            = $402E;
constant PMERR_CANNOT_DEL_QNAME_REF         = $402F;
constant PMERR_CANNOT_DEL_PRINTER_DD_REF    = $4030;
constant PMERR_CANNOT_DEL_PRN_NAME_REF      = $4031;
constant PMERR_CANNOT_DEL_PRN_ADDR_REF      = $4032;
constant PMERR_SPOOLER_QP_NOT_DEFINED       = $4033;
constant PMERR_PRN_NAME_NOT_DEFINED         = $4034;
constant PMERR_PRN_ADDR_NOT_DEFINED         = $4035;
constant PMERR_PRINTER_DD_NOT_DEFINED       = $4036;
constant PMERR_PRINTER_QUEUE_NOT_DEFINED    = $4037;
constant PMERR_PRN_ADDR_IN_USE              = $4038;
constant PMERR_SPL_TOO_MANY_OPEN_FILES      = $4039;
constant PMERR_SPL_CP_NOT_REQD              = $403A;
constant PMERR_SPL_PORT_SHUTDOWN            = $403B;
constant PMERR_SPL_NOT_HANDLED              = $403C;
constant PMERR_SPL_CNV_NOT_INIT             = $403D;
constant PMERR_SPL_INIT_IN_PROGRESS         = $403E;
constant PMERR_SPL_TYPE_NOT_AVAIL           = $403F;
constant PMERR_UNABLE_TO_CLOSE_DEVICE       = $4040;
constant PMERR_SPL_SESSION_TERM             = $4041;
constant PMERR_SPL_NOT_REGISTERED           = $4042;

constant PMERR_SPL_ERROR_1         = ( SPLERR_BASE + 4001 );
constant PMERR_SPL_ERROR_2         = ( SPLERR_BASE + 4002 );
constant PMERR_SPL_ERROR_3         = ( SPLERR_BASE + 4003 );
constant PMERR_SPL_ERROR_4         = ( SPLERR_BASE + 4004 );
constant PMERR_SPL_ERROR_5         = ( SPLERR_BASE + 4005 );
constant PMERR_SPL_ERROR_6         = ( SPLERR_BASE + 4006 );
constant PMERR_SPL_ERROR_7         = ( SPLERR_BASE + 4007 );
constant PMERR_SPL_ERROR_8         = ( SPLERR_BASE + 4008 );
constant PMERR_SPL_ERROR_9         = ( SPLERR_BASE + 4009 );
constant PMERR_SPL_ERROR_10        = ( SPLERR_BASE + 4010 );
constant PMERR_SPL_ERROR_11        = ( SPLERR_BASE + 4011 );
constant PMERR_SPL_ERROR_12        = ( SPLERR_BASE + 4012 );
constant PMERR_SPL_ERROR_13        = ( SPLERR_BASE + 4013 );
constant PMERR_SPL_ERROR_14        = ( SPLERR_BASE + 4014 );
constant PMERR_SPL_ERROR_15        = ( SPLERR_BASE + 4015 );
constant PMERR_SPL_ERROR_16        = ( SPLERR_BASE + 4016 );
constant PMERR_SPL_ERROR_17        = ( SPLERR_BASE + 4017 );
constant PMERR_SPL_ERROR_18        = ( SPLERR_BASE + 4018 );
constant PMERR_SPL_ERROR_19        = ( SPLERR_BASE + 4019 );
constant PMERR_SPL_ERROR_20        = ( SPLERR_BASE + 4020 );
constant PMERR_SPL_ERROR_21        = ( SPLERR_BASE + 4021 );
constant PMERR_SPL_ERROR_22        = ( SPLERR_BASE + 4022 );
constant PMERR_SPL_ERROR_23        = ( SPLERR_BASE + 4023 );
constant PMERR_SPL_ERROR_24        = ( SPLERR_BASE + 4024 );
constant PMERR_SPL_ERROR_25        = ( SPLERR_BASE + 4025 );
constant PMERR_SPL_ERROR_26        = ( SPLERR_BASE + 4026 );
constant PMERR_SPL_ERROR_27        = ( SPLERR_BASE + 4027 );
constant PMERR_SPL_ERROR_28        = ( SPLERR_BASE + 4028 );
constant PMERR_SPL_ERROR_29        = ( SPLERR_BASE + 4029 );
constant PMERR_SPL_ERROR_30        = ( SPLERR_BASE + 4030 );
constant PMERR_SPL_ERROR_31        = ( SPLERR_BASE + 4031 );
constant PMERR_SPL_ERROR_32        = ( SPLERR_BASE + 4032 );
constant PMERR_SPL_ERROR_33        = ( SPLERR_BASE + 4033 );
constant PMERR_SPL_ERROR_34        = ( SPLERR_BASE + 4034 );
constant PMERR_SPL_ERROR_35        = ( SPLERR_BASE + 4035 );
constant PMERR_SPL_ERROR_36        = ( SPLERR_BASE + 4036 );
constant PMERR_SPL_ERROR_37        = ( SPLERR_BASE + 4037 );
constant PMERR_SPL_ERROR_38        = ( SPLERR_BASE + 4038 );
constant PMERR_SPL_ERROR_39        = ( SPLERR_BASE + 4039 );
constant PMERR_SPL_ERROR_40        = ( SPLERR_BASE + 4040 );

constant PMERR_SPLMSGBOX_INFO_CAPTION   = ( SPLERR_BASE + 4041 );
constant PMERR_SPLMSGBOX_WARNING_CAPTION= ( SPLERR_BASE + 4042 );
constant PMERR_SPLMSGBOX_ERROR_CAPTION  = ( SPLERR_BASE + 4043 );
constant PMERR_SPLMSGBOX_SEVERE_CAPTION = ( SPLERR_BASE + 4044 );

constant PMERR_SPLMSGBOX_JOB_DETAILS    = ( SPLERR_BASE + 4045 );

constant PMERR_SPLMSGBOX_ERROR_ACTION   = ( SPLERR_BASE + 4046 );
constant PMERR_SPLMSGBOX_SEVERE_ACTION  = ( SPLERR_BASE + 4047 );

constant PMERR_SPLMSGBOX_BIT_0_TEXT     = ( SPLERR_BASE + 4048 );
constant PMERR_SPLMSGBOX_BIT_1_TEXT     = ( SPLERR_BASE + 4049 );
constant PMERR_SPLMSGBOX_BIT_2_TEXT     = ( SPLERR_BASE + 4050 );
constant PMERR_SPLMSGBOX_BIT_3_TEXT     = ( SPLERR_BASE + 4051 );
constant PMERR_SPLMSGBOX_BIT_4_TEXT     = ( SPLERR_BASE + 4052 );
constant PMERR_SPLMSGBOX_BIT_5_TEXT     = ( SPLERR_BASE + 4053 );
constant PMERR_SPLMSGBOX_BIT_15_TEXT    = ( SPLERR_BASE + 4054 );
constant PMERR_SPL_NOPATHBUFFER         = ( SPLERR_BASE + 4055 );

constant PMERR_SPL_ALREADY_INITIALISED  = ( SPLERR_BASE + 4093 );
constant PMERR_SPL_ERROR                = ( SPLERR_BASE + 4095 );


constant NERR_BASE      = 2100;
constant NERR_NetNotStarted    =  (NERR_BASE+2);   (* The NETWKSTA.SYS workstation driver isn't installed. *)
constant NERR_RedirectedPath   =  (NERR_BASE+17);  (* The operation is invalid on a redirected resource. *)
constant NERR_BufTooSmall      =  (NERR_BASE+23);  (* The API return buffer is too small. *)
constant NERR_InvalidAPI       =  (NERR_BASE+42);  (* The requested API isn't supported on the remote server. *)
constant NERR_QNotFound        =  (NERR_BASE+50);  (* The printer queue does not exist. *)
constant NERR_JobNotFound      =  (NERR_BASE+51);  (* The print job does not exist. *)
constant NERR_DestNotFound     =  (NERR_BASE+52);  (* The printer destination cannot be found. *)
constant NERR_DestExists       =  (NERR_BASE+53);  (* The printer destination already exists. *)
constant NERR_QExists          =  (NERR_BASE+54);  (* The printer queue already exists. *)
constant NERR_QNoRoom          =  (NERR_BASE+55);  (* No more printer queues can be added. *)
constant NERR_JobNoRoom        =  (NERR_BASE+56);  (* No more print jobs can be added.  *)
constant NERR_DestNoRoom       =  (NERR_BASE+57);  (* No more printer destinations can be added. *)
constant NERR_DestIdle         =  (NERR_BASE+58);  (* This printer destination is idle and cannot accept control operations. *)
constant NERR_DestInvalidOp    =  (NERR_BASE+59);  (* This printer destination request contains an invalid control function. *)
constant NERR_SpoolerNotLoaded =  (NERR_BASE+61);  (* The spooler is not running. *)
constant NERR_DestInvalidState =  (NERR_BASE+62);  (* This operation cannot be performed on the print destination in its current state. *)
constant NERR_JobInvalidState  =  (NERR_BASE+64);  (* This operation cannot be performed on the print job in its current state. *)
constant NERR_SpoolNoMemory    =  (NERR_BASE+65);  (* A spooler memory allocation failure occurred. *)
constant NERR_DriverNotFound   =  (NERR_BASE+66);  (* The device driver does not exist. *)
constant NERR_DataTypeInvalid  =  (NERR_BASE+67);  (* The datatype is not supported by the processor. *)
constant NERR_ProcNotFound     =  (NERR_BASE+68);  (* The print processor is not installed. *)
constant NERR_BadDev           =  (NERR_BASE+241); (* The requested device is invalid. *)
constant NERR_CommDevInUse     =  (NERR_BASE+243); (* This device is already in use as a communications device. *)
constant NERR_InvalidComputer  = (NERR_BASE+251); (* This computername is invalid. *)
constant NERR_OpenFiles        =  (NERR_BASE+301); (* There are open files on the connection.    *)
constant NERR_LocalDrive       =  (NERR_BASE+305); (* The drive letter is in use locally. *)

end.
